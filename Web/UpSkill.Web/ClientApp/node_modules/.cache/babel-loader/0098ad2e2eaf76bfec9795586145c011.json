{"ast":null,"code":"// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables\nconst {\n  parseBranch\n} = require('../lib/utils.js');\n\nconst getPrEvent = ({\n  env\n}) => {\n  try {\n    const event = env.GITHUB_EVENT_PATH ? require(env.GITHUB_EVENT_PATH) : undefined;\n\n    if (event && event.pull_request) {\n      return {\n        branch: event.pull_request.base ? parseBranch(event.pull_request.base.ref) : undefined,\n        pr: event.pull_request.number\n      };\n    }\n  } catch {// Noop\n  }\n\n  return {\n    pr: undefined,\n    branch: undefined\n  };\n};\n\nconst getPrNumber = env => {\n  const event = env.GITHUB_EVENT_PATH ? require(env.GITHUB_EVENT_PATH) : undefined;\n  return event && event.pull_request ? event.pull_request.number : undefined;\n};\n\nmodule.exports = {\n  detect({\n    env\n  }) {\n    return Boolean(env.GITHUB_ACTIONS);\n  },\n\n  configuration({\n    env,\n    cwd\n  }) {\n    const isPr = env.GITHUB_EVENT_NAME === 'pull_request' || env.GITHUB_EVENT_NAME === 'pull_request_target';\n    const branch = parseBranch(env.GITHUB_EVENT_NAME === 'pull_request_target' ? `refs/pull/${getPrNumber(env)}/merge` : env.GITHUB_REF);\n    return {\n      name: 'GitHub Actions',\n      service: 'github',\n      commit: env.GITHUB_SHA,\n      build: env.GITHUB_RUN_ID,\n      isPr,\n      branch,\n      prBranch: isPr ? branch : undefined,\n      slug: env.GITHUB_REPOSITORY,\n      root: env.GITHUB_WORKSPACE,\n      ...(isPr ? getPrEvent({\n        env,\n        cwd\n      }) : undefined)\n    };\n  }\n\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/env-ci/services/github.js"],"names":["parseBranch","require","getPrEvent","env","event","GITHUB_EVENT_PATH","undefined","pull_request","branch","base","ref","pr","number","getPrNumber","module","exports","detect","Boolean","GITHUB_ACTIONS","configuration","cwd","isPr","GITHUB_EVENT_NAME","GITHUB_REF","name","service","commit","GITHUB_SHA","build","GITHUB_RUN_ID","prBranch","slug","GITHUB_REPOSITORY","root","GITHUB_WORKSPACE"],"mappings":"AAAA;AACA,MAAM;AAACA,EAAAA;AAAD,IAAgBC,OAAO,CAAC,iBAAD,CAA7B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAC5B,MAAI;AACF,UAAMC,KAAK,GAAGD,GAAG,CAACE,iBAAJ,GAAwBJ,OAAO,CAACE,GAAG,CAACE,iBAAL,CAA/B,GAAyDC,SAAvE;;AAEA,QAAIF,KAAK,IAAIA,KAAK,CAACG,YAAnB,EAAiC;AAC/B,aAAO;AACLC,QAAAA,MAAM,EAAEJ,KAAK,CAACG,YAAN,CAAmBE,IAAnB,GAA0BT,WAAW,CAACI,KAAK,CAACG,YAAN,CAAmBE,IAAnB,CAAwBC,GAAzB,CAArC,GAAqEJ,SADxE;AAELK,QAAAA,EAAE,EAAEP,KAAK,CAACG,YAAN,CAAmBK;AAFlB,OAAP;AAID;AACF,GATD,CASE,MAAM,CACN;AACD;;AAED,SAAO;AAACD,IAAAA,EAAE,EAAEL,SAAL;AAAgBE,IAAAA,MAAM,EAAEF;AAAxB,GAAP;AACD,CAfD;;AAiBA,MAAMO,WAAW,GAAIV,GAAD,IAAS;AAC3B,QAAMC,KAAK,GAAGD,GAAG,CAACE,iBAAJ,GAAwBJ,OAAO,CAACE,GAAG,CAACE,iBAAL,CAA/B,GAAyDC,SAAvE;AACA,SAAOF,KAAK,IAAIA,KAAK,CAACG,YAAf,GAA8BH,KAAK,CAACG,YAAN,CAAmBK,MAAjD,GAA0DN,SAAjE;AACD,CAHD;;AAKAQ,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,CAAC;AAACb,IAAAA;AAAD,GAAD,EAAQ;AACZ,WAAOc,OAAO,CAACd,GAAG,CAACe,cAAL,CAAd;AACD,GAHc;;AAIfC,EAAAA,aAAa,CAAC;AAAChB,IAAAA,GAAD;AAAMiB,IAAAA;AAAN,GAAD,EAAa;AACxB,UAAMC,IAAI,GAAGlB,GAAG,CAACmB,iBAAJ,KAA0B,cAA1B,IAA4CnB,GAAG,CAACmB,iBAAJ,KAA0B,qBAAnF;AACA,UAAMd,MAAM,GAAGR,WAAW,CACxBG,GAAG,CAACmB,iBAAJ,KAA0B,qBAA1B,GAAmD,aAAYT,WAAW,CAACV,GAAD,CAAM,QAAhF,GAA0FA,GAAG,CAACoB,UADtE,CAA1B;AAIA,WAAO;AACLC,MAAAA,IAAI,EAAE,gBADD;AAELC,MAAAA,OAAO,EAAE,QAFJ;AAGLC,MAAAA,MAAM,EAAEvB,GAAG,CAACwB,UAHP;AAILC,MAAAA,KAAK,EAAEzB,GAAG,CAAC0B,aAJN;AAKLR,MAAAA,IALK;AAMLb,MAAAA,MANK;AAOLsB,MAAAA,QAAQ,EAAET,IAAI,GAAGb,MAAH,GAAYF,SAPrB;AAQLyB,MAAAA,IAAI,EAAE5B,GAAG,CAAC6B,iBARL;AASLC,MAAAA,IAAI,EAAE9B,GAAG,CAAC+B,gBATL;AAUL,UAAIb,IAAI,GAAGnB,UAAU,CAAC;AAACC,QAAAA,GAAD;AAAMiB,QAAAA;AAAN,OAAD,CAAb,GAA4Bd,SAApC;AAVK,KAAP;AAYD;;AAtBc,CAAjB","sourcesContent":["// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables\nconst {parseBranch} = require('../lib/utils.js');\n\nconst getPrEvent = ({env}) => {\n  try {\n    const event = env.GITHUB_EVENT_PATH ? require(env.GITHUB_EVENT_PATH) : undefined;\n\n    if (event && event.pull_request) {\n      return {\n        branch: event.pull_request.base ? parseBranch(event.pull_request.base.ref) : undefined,\n        pr: event.pull_request.number,\n      };\n    }\n  } catch {\n    // Noop\n  }\n\n  return {pr: undefined, branch: undefined};\n};\n\nconst getPrNumber = (env) => {\n  const event = env.GITHUB_EVENT_PATH ? require(env.GITHUB_EVENT_PATH) : undefined;\n  return event && event.pull_request ? event.pull_request.number : undefined;\n};\n\nmodule.exports = {\n  detect({env}) {\n    return Boolean(env.GITHUB_ACTIONS);\n  },\n  configuration({env, cwd}) {\n    const isPr = env.GITHUB_EVENT_NAME === 'pull_request' || env.GITHUB_EVENT_NAME === 'pull_request_target';\n    const branch = parseBranch(\n      env.GITHUB_EVENT_NAME === 'pull_request_target' ? `refs/pull/${getPrNumber(env)}/merge` : env.GITHUB_REF\n    );\n\n    return {\n      name: 'GitHub Actions',\n      service: 'github',\n      commit: env.GITHUB_SHA,\n      build: env.GITHUB_RUN_ID,\n      isPr,\n      branch,\n      prBranch: isPr ? branch : undefined,\n      slug: env.GITHUB_REPOSITORY,\n      root: env.GITHUB_WORKSPACE,\n      ...(isPr ? getPrEvent({env, cwd}) : undefined),\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}