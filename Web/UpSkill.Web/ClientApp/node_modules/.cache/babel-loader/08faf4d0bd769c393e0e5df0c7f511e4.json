{"ast":null,"code":"const _Terminal = require('./terminal');\n\nconst _BarElement = require('./generic-bar');\n\nconst _options = require('./options');\n\nconst _EventEmitter = require('events'); // Progress-Bar constructor\n\n\nmodule.exports = class MultiBar extends _EventEmitter {\n  constructor(options, preset) {\n    super(); // list of bars\n\n    this.bars = []; // parse+store options\n\n    this.options = _options.parse(options, preset); // disable synchronous updates\n\n    this.options.synchronousUpdate = false; // store terminal instance\n\n    this.terminal = this.options.terminal ? this.options.terminal : new _Terminal(this.options.stream); // the update timer\n\n    this.timer = null; // progress bar active ?\n\n    this.isActive = false; // update interval\n\n    this.schedulingRate = this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule;\n  } // add a new bar to the stack\n\n\n  create(total, startValue, payload) {\n    // progress updates are only visible in TTY mode!\n    if (this.options.noTTYOutput === false && this.terminal.isTTY() === false) {\n      return;\n    } // create new bar element\n\n\n    const bar = new _BarElement(this.options); // store bar\n\n    this.bars.push(bar); // multiprogress already active ?\n\n    if (!this.isActive) {\n      // hide the cursor ?\n      if (this.options.hideCursor === true) {\n        this.terminal.cursor(false);\n      } // disable line wrapping ?\n\n\n      if (this.options.linewrap === false) {\n        this.terminal.lineWrapping(false);\n      } // initialize update timer\n\n\n      this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n    } // set flag\n\n\n    this.isActive = true; // start progress bar\n\n    bar.start(total, startValue, payload); // trigger event\n\n    this.emit('start'); // return new instance\n\n    return bar;\n  } // remove a bar from the stack\n\n\n  remove(bar) {\n    // find element\n    const index = this.bars.indexOf(bar); // element found ?\n\n    if (index < 0) {\n      return false;\n    } // remove element\n\n\n    this.bars.splice(index, 1); // force update\n\n    this.update(); // clear bottom\n\n    this.terminal.newline();\n    this.terminal.clearBottom();\n    return true;\n  } // internal update routine\n\n\n  update() {\n    // stop timer\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    } // trigger event\n\n\n    this.emit('update-pre'); // reset cursor\n\n    this.terminal.cursorRelativeReset(); // trigger event\n\n    this.emit('redraw-pre'); // update each bar\n\n    for (let i = 0; i < this.bars.length; i++) {\n      // add new line ?\n      if (i > 0) {\n        this.terminal.newline();\n      } // render\n\n\n      this.bars[i].render();\n    } // trigger event\n\n\n    this.emit('redraw-post'); // add new line in notty mode!\n\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.terminal.newline();\n      this.terminal.newline();\n    } // next update\n\n\n    this.timer = setTimeout(this.update.bind(this), this.schedulingRate); // trigger event\n\n    this.emit('update-post'); // stop if stopOnComplete and all bars stopped\n\n    if (this.options.stopOnComplete && !this.bars.find(bar => bar.isActive)) {\n      this.stop();\n    }\n  }\n\n  stop() {\n    // stop timer\n    clearTimeout(this.timer);\n    this.timer = null; // set flag\n\n    this.isActive = false; // cursor hidden ?\n\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(true);\n    } // re-enable line wrpaping ?\n\n\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(true);\n    } // reset cursor\n\n\n    this.terminal.cursorRelativeReset(); // trigger event\n\n    this.emit('stop-pre-clear'); // clear line on complete ?\n\n    if (this.options.clearOnComplete) {\n      // clear all bars\n      this.terminal.clearBottom(); // or show final progress ?\n    } else {\n      // update each bar\n      for (let i = 0; i < this.bars.length; i++) {\n        // add new line ?\n        if (i > 0) {\n          this.terminal.newline();\n        } // trigger final rendering\n\n\n        this.bars[i].render(); // stop\n\n        this.bars[i].stop();\n      } // new line on complete\n\n\n      this.terminal.newline();\n    } // trigger event\n\n\n    this.emit('stop');\n  }\n\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/cli-progress/lib/multi-bar.js"],"names":["_Terminal","require","_BarElement","_options","_EventEmitter","module","exports","MultiBar","constructor","options","preset","bars","parse","synchronousUpdate","terminal","stream","timer","isActive","schedulingRate","isTTY","throttleTime","notTTYSchedule","create","total","startValue","payload","noTTYOutput","bar","push","hideCursor","cursor","linewrap","lineWrapping","setTimeout","update","bind","start","emit","remove","index","indexOf","splice","newline","clearBottom","clearTimeout","cursorRelativeReset","i","length","render","stopOnComplete","find","stop","clearOnComplete"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,QAAD,CAA7B,C,CAEA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,SAAuBH,aAAvB,CAAoC;AAEjDI,EAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAiB;AACxB,YADwB,CAGxB;;AACA,SAAKC,IAAL,GAAY,EAAZ,CAJwB,CAMxB;;AACA,SAAKF,OAAL,GAAeN,QAAQ,CAACS,KAAT,CAAeH,OAAf,EAAwBC,MAAxB,CAAf,CAPwB,CASxB;;AACA,SAAKD,OAAL,CAAaI,iBAAb,GAAiC,KAAjC,CAVwB,CAYxB;;AACA,SAAKC,QAAL,GAAiB,KAAKL,OAAL,CAAaK,QAAd,GAA0B,KAAKL,OAAL,CAAaK,QAAvC,GAAkD,IAAId,SAAJ,CAAc,KAAKS,OAAL,CAAaM,MAA3B,CAAlE,CAbwB,CAexB;;AACA,SAAKC,KAAL,GAAa,IAAb,CAhBwB,CAkBxB;;AACA,SAAKC,QAAL,GAAgB,KAAhB,CAnBwB,CAqBxB;;AACA,SAAKC,cAAL,GAAuB,KAAKJ,QAAL,CAAcK,KAAd,KAAwB,KAAKV,OAAL,CAAaW,YAArC,GAAoD,KAAKX,OAAL,CAAaY,cAAxF;AACH,GAzBgD,CA2BjD;;;AACAC,EAAAA,MAAM,CAACC,KAAD,EAAQC,UAAR,EAAoBC,OAApB,EAA4B;AAC9B;AACA,QAAI,KAAKhB,OAAL,CAAaiB,WAAb,KAA6B,KAA7B,IAAsC,KAAKZ,QAAL,CAAcK,KAAd,OAA0B,KAApE,EAA0E;AACtE;AACH,KAJ6B,CAM9B;;;AACA,UAAMQ,GAAG,GAAG,IAAIzB,WAAJ,CAAgB,KAAKO,OAArB,CAAZ,CAP8B,CAS9B;;AACA,SAAKE,IAAL,CAAUiB,IAAV,CAAeD,GAAf,EAV8B,CAY9B;;AACA,QAAI,CAAC,KAAKV,QAAV,EAAmB;AACf;AACA,UAAI,KAAKR,OAAL,CAAaoB,UAAb,KAA4B,IAAhC,EAAqC;AACjC,aAAKf,QAAL,CAAcgB,MAAd,CAAqB,KAArB;AACH,OAJc,CAMf;;;AACA,UAAI,KAAKrB,OAAL,CAAasB,QAAb,KAA0B,KAA9B,EAAoC;AAChC,aAAKjB,QAAL,CAAckB,YAAd,CAA2B,KAA3B;AACH,OATc,CAWf;;;AACA,WAAKhB,KAAL,GAAaiB,UAAU,CAAC,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAD,EAAyB,KAAKjB,cAA9B,CAAvB;AACH,KA1B6B,CA4B9B;;;AACA,SAAKD,QAAL,GAAgB,IAAhB,CA7B8B,CA+B9B;;AACAU,IAAAA,GAAG,CAACS,KAAJ,CAAUb,KAAV,EAAiBC,UAAjB,EAA6BC,OAA7B,EAhC8B,CAkC9B;;AACA,SAAKY,IAAL,CAAU,OAAV,EAnC8B,CAqC9B;;AACA,WAAOV,GAAP;AACH,GAnEgD,CAqEjD;;;AACAW,EAAAA,MAAM,CAACX,GAAD,EAAK;AACP;AACA,UAAMY,KAAK,GAAG,KAAK5B,IAAL,CAAU6B,OAAV,CAAkBb,GAAlB,CAAd,CAFO,CAIP;;AACA,QAAIY,KAAK,GAAG,CAAZ,EAAc;AACV,aAAO,KAAP;AACH,KAPM,CASP;;;AACA,SAAK5B,IAAL,CAAU8B,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB,EAVO,CAYP;;AACA,SAAKL,MAAL,GAbO,CAeP;;AACA,SAAKpB,QAAL,CAAc4B,OAAd;AACA,SAAK5B,QAAL,CAAc6B,WAAd;AAEA,WAAO,IAAP;AACH,GA1FgD,CA4FjD;;;AACAT,EAAAA,MAAM,GAAE;AACJ;AACA,QAAI,KAAKlB,KAAT,EAAe;AACX4B,MAAAA,YAAY,CAAC,KAAK5B,KAAN,CAAZ;AACA,WAAKA,KAAL,GAAa,IAAb;AACH,KALG,CAOJ;;;AACA,SAAKqB,IAAL,CAAU,YAAV,EARI,CAUJ;;AACA,SAAKvB,QAAL,CAAc+B,mBAAd,GAXI,CAaJ;;AACA,SAAKR,IAAL,CAAU,YAAV,EAdI,CAgBJ;;AACA,SAAK,IAAIS,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAE,KAAKnC,IAAL,CAAUoC,MAA3B,EAAmCD,CAAC,EAApC,EAAuC;AACnC;AACA,UAAIA,CAAC,GAAG,CAAR,EAAU;AACN,aAAKhC,QAAL,CAAc4B,OAAd;AACH,OAJkC,CAMnC;;;AACA,WAAK/B,IAAL,CAAUmC,CAAV,EAAaE,MAAb;AACH,KAzBG,CA2BJ;;;AACA,SAAKX,IAAL,CAAU,aAAV,EA5BI,CA8BJ;;AACA,QAAI,KAAK5B,OAAL,CAAaiB,WAAb,IAA4B,KAAKZ,QAAL,CAAcK,KAAd,OAA0B,KAA1D,EAAgE;AAC5D,WAAKL,QAAL,CAAc4B,OAAd;AACA,WAAK5B,QAAL,CAAc4B,OAAd;AACH,KAlCG,CAoCJ;;;AACA,SAAK1B,KAAL,GAAaiB,UAAU,CAAC,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAD,EAAyB,KAAKjB,cAA9B,CAAvB,CArCI,CAuCJ;;AACA,SAAKmB,IAAL,CAAU,aAAV,EAxCI,CA0CJ;;AACA,QAAI,KAAK5B,OAAL,CAAawC,cAAb,IAA+B,CAAC,KAAKtC,IAAL,CAAUuC,IAAV,CAAevB,GAAG,IAAIA,GAAG,CAACV,QAA1B,CAApC,EAAyE;AACrE,WAAKkC,IAAL;AACH;AACJ;;AAEDA,EAAAA,IAAI,GAAE;AAEF;AACAP,IAAAA,YAAY,CAAC,KAAK5B,KAAN,CAAZ;AACA,SAAKA,KAAL,GAAa,IAAb,CAJE,CAMF;;AACA,SAAKC,QAAL,GAAgB,KAAhB,CAPE,CASF;;AACA,QAAI,KAAKR,OAAL,CAAaoB,UAAb,KAA4B,IAAhC,EAAqC;AACjC,WAAKf,QAAL,CAAcgB,MAAd,CAAqB,IAArB;AACH,KAZC,CAcF;;;AACA,QAAI,KAAKrB,OAAL,CAAasB,QAAb,KAA0B,KAA9B,EAAoC;AAChC,WAAKjB,QAAL,CAAckB,YAAd,CAA2B,IAA3B;AACH,KAjBC,CAmBF;;;AACA,SAAKlB,QAAL,CAAc+B,mBAAd,GApBE,CAsBF;;AACA,SAAKR,IAAL,CAAU,gBAAV,EAvBE,CAyBF;;AACA,QAAI,KAAK5B,OAAL,CAAa2C,eAAjB,EAAiC;AAC7B;AACA,WAAKtC,QAAL,CAAc6B,WAAd,GAF6B,CAIjC;AACC,KALD,MAKK;AACD;AACA,WAAK,IAAIG,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAE,KAAKnC,IAAL,CAAUoC,MAA3B,EAAmCD,CAAC,EAApC,EAAuC;AACnC;AACA,YAAIA,CAAC,GAAG,CAAR,EAAU;AACN,eAAKhC,QAAL,CAAc4B,OAAd;AACH,SAJkC,CAMnC;;;AACA,aAAK/B,IAAL,CAAUmC,CAAV,EAAaE,MAAb,GAPmC,CASnC;;AACA,aAAKrC,IAAL,CAAUmC,CAAV,EAAaK,IAAb;AACH,OAbA,CAeD;;;AACA,WAAKrC,QAAL,CAAc4B,OAAd;AACH,KAhDC,CAkDF;;;AACA,SAAKL,IAAL,CAAU,MAAV;AACH;;AAjMgD,CAArD","sourcesContent":["const _Terminal = require('./terminal');\nconst _BarElement = require('./generic-bar');\nconst _options = require('./options');\nconst _EventEmitter = require('events');\n\n// Progress-Bar constructor\nmodule.exports = class MultiBar extends _EventEmitter{\n\n    constructor(options, preset){\n        super();\n\n        // list of bars\n        this.bars = [];\n\n        // parse+store options\n        this.options = _options.parse(options, preset);\n\n        // disable synchronous updates\n        this.options.synchronousUpdate = false;\n\n        // store terminal instance\n        this.terminal = (this.options.terminal) ? this.options.terminal : new _Terminal(this.options.stream);\n\n        // the update timer\n        this.timer = null;\n\n        // progress bar active ?\n        this.isActive = false;\n\n        // update interval\n        this.schedulingRate = (this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule);\n    }\n\n    // add a new bar to the stack\n    create(total, startValue, payload){\n        // progress updates are only visible in TTY mode!\n        if (this.options.noTTYOutput === false && this.terminal.isTTY() === false){\n            return;\n        }\n        \n        // create new bar element\n        const bar = new _BarElement(this.options);\n\n        // store bar\n        this.bars.push(bar);\n\n        // multiprogress already active ?\n        if (!this.isActive){\n            // hide the cursor ?\n            if (this.options.hideCursor === true){\n                this.terminal.cursor(false);\n            }\n\n            // disable line wrapping ?\n            if (this.options.linewrap === false){\n                this.terminal.lineWrapping(false);\n            }\n    \n            // initialize update timer\n            this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n        }\n\n        // set flag\n        this.isActive = true;\n\n        // start progress bar\n        bar.start(total, startValue, payload);\n\n        // trigger event\n        this.emit('start');\n\n        // return new instance\n        return bar;\n    }\n\n    // remove a bar from the stack\n    remove(bar){\n        // find element\n        const index = this.bars.indexOf(bar);\n\n        // element found ?\n        if (index < 0){\n            return false;\n        }\n\n        // remove element\n        this.bars.splice(index, 1);\n\n        // force update\n        this.update();\n\n        // clear bottom\n        this.terminal.newline();\n        this.terminal.clearBottom();\n\n        return true;\n    }\n\n    // internal update routine\n    update(){\n        // stop timer\n        if (this.timer){\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n\n        // trigger event\n        this.emit('update-pre');\n        \n        // reset cursor\n        this.terminal.cursorRelativeReset();\n\n        // trigger event\n        this.emit('redraw-pre');\n\n        // update each bar\n        for (let i=0; i< this.bars.length; i++){\n            // add new line ?\n            if (i > 0){\n                this.terminal.newline();\n            }\n\n            // render\n            this.bars[i].render();\n        }\n\n        // trigger event\n        this.emit('redraw-post');\n\n        // add new line in notty mode!\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.terminal.newline();\n            this.terminal.newline();\n        }\n\n        // next update\n        this.timer = setTimeout(this.update.bind(this), this.schedulingRate);\n\n        // trigger event\n        this.emit('update-post');\n\n        // stop if stopOnComplete and all bars stopped\n        if (this.options.stopOnComplete && !this.bars.find(bar => bar.isActive)) {\n            this.stop();\n        }\n    }\n\n    stop(){\n\n        // stop timer\n        clearTimeout(this.timer);\n        this.timer = null;\n\n        // set flag\n        this.isActive = false;\n\n        // cursor hidden ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(true);\n        }\n\n        // re-enable line wrpaping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(true);\n        }\n\n        // reset cursor\n        this.terminal.cursorRelativeReset();\n\n        // trigger event\n        this.emit('stop-pre-clear');\n\n        // clear line on complete ?\n        if (this.options.clearOnComplete){\n            // clear all bars\n            this.terminal.clearBottom();\n            \n        // or show final progress ?\n        }else{\n            // update each bar\n            for (let i=0; i< this.bars.length; i++){\n                // add new line ?\n                if (i > 0){\n                    this.terminal.newline();\n                }\n\n                // trigger final rendering\n                this.bars[i].render();\n\n                // stop\n                this.bars[i].stop();\n            }\n\n            // new line on complete\n            this.terminal.newline();\n        }\n\n        // trigger event\n        this.emit('stop');\n    }\n}\n"]},"metadata":{},"sourceType":"script"}