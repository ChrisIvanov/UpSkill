{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nconst MAX_REDIRECTS = 100;\n/** @private */\n\nexport class HttpConnection {\n  constructor(url, options = {}) {\n    this._stopPromiseResolver = () => {};\n\n    this.features = {};\n    this._negotiateVersion = 1;\n    Arg.isRequired(url, \"url\");\n    this._logger = createLogger(options.logger);\n    this.baseUrl = this._resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n\n    options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n    let webSocketModule = null;\n    let eventSourceModule = null;\n\n    if (Platform.isNode && typeof require !== \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n      webSocketModule = requireFunc(\"ws\");\n      eventSourceModule = requireFunc(\"eventsource\");\n    }\n\n    if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n\n    if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n\n    this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n    this._connectionStarted = false;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  async start(transferFormat) {\n    transferFormat = transferFormat || TransferFormat.Binary;\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n    this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\n\n    if (this._connectionState !== \"Disconnected\"\n    /* Disconnected */\n    ) {\n      return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\n    }\n\n    this._connectionState = \"Connecting\"\n    /* Connecting */\n    ;\n    this._startInternalPromise = this._startInternal(transferFormat);\n    await this._startInternalPromise; // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\n\n    if (this._connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n      // stop() was called and transitioned the client into the Disconnecting state.\n      const message = \"Failed to start the HttpConnection before stop() was called.\";\n\n      this._logger.log(LogLevel.Error, message); // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n\n\n      await this._stopPromise;\n      return Promise.reject(new Error(message));\n    } else if (this._connectionState !== \"Connected\"\n    /* Connected */\n    ) {\n      // stop() was called and transitioned the client into the Disconnecting state.\n      const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n\n      this._logger.log(LogLevel.Error, message);\n\n      return Promise.reject(new Error(message));\n    }\n\n    this._connectionStarted = true;\n  }\n\n  send(data) {\n    if (this._connectionState !== \"Connected\"\n    /* Connected */\n    ) {\n      return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n    }\n\n    if (!this._sendQueue) {\n      this._sendQueue = new TransportSendQueue(this.transport);\n    } // Transport will not be null if state is connected\n\n\n    return this._sendQueue.send(data);\n  }\n\n  async stop(error) {\n    if (this._connectionState === \"Disconnected\"\n    /* Disconnected */\n    ) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\n\n      return Promise.resolve();\n    }\n\n    if (this._connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n\n      return this._stopPromise;\n    }\n\n    this._connectionState = \"Disconnecting\"\n    /* Disconnecting */\n    ;\n    this._stopPromise = new Promise(resolve => {\n      // Don't complete stop() until stopConnection() completes.\n      this._stopPromiseResolver = resolve;\n    }); // stopInternal should never throw so just observe it.\n\n    await this._stopInternal(error);\n    await this._stopPromise;\n  }\n\n  async _stopInternal(error) {\n    // Set error as soon as possible otherwise there is a race between\n    // the transport closing and providing an error and the error from a close message\n    // We would prefer the close message error.\n    this._stopError = error;\n\n    try {\n      await this._startInternalPromise;\n    } catch (e) {// This exception is returned to the user as a rejected Promise from the start method.\n    } // The transport's onclose will trigger stopConnection which will run our onclose event.\n    // The transport should always be set if currently connected. If it wasn't set, it's likely because\n    // stop was called during start() and start() failed.\n\n\n    if (this.transport) {\n      try {\n        await this.transport.stop();\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\n\n        this._stopConnection();\n      }\n\n      this.transport = undefined;\n    } else {\n      this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n    }\n  }\n\n  async _startInternal(transferFormat) {\n    // Store the original base url and the access token factory since they may change\n    // as part of negotiating\n    let url = this.baseUrl;\n    this._accessTokenFactory = this._options.accessTokenFactory;\n\n    try {\n      if (this._options.skipNegotiation) {\n        if (this._options.transport === HttpTransportType.WebSockets) {\n          // No need to add a connection ID in this case\n          this.transport = this._constructTransport(HttpTransportType.WebSockets); // We should just call connect directly in this case.\n          // No fallback or negotiate in this case.\n\n          await this._startTransport(url, transferFormat);\n        } else {\n          throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n        }\n      } else {\n        let negotiateResponse = null;\n        let redirects = 0;\n\n        do {\n          negotiateResponse = await this._getNegotiationResponse(url); // the user tries to stop the connection when it is being started\n\n          if (this._connectionState === \"Disconnecting\"\n          /* Disconnecting */\n          || this._connectionState === \"Disconnected\"\n          /* Disconnected */\n          ) {\n            throw new Error(\"The connection was stopped during negotiation.\");\n          }\n\n          if (negotiateResponse.error) {\n            throw new Error(negotiateResponse.error);\n          }\n\n          if (negotiateResponse.ProtocolVersion) {\n            throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n          }\n\n          if (negotiateResponse.url) {\n            url = negotiateResponse.url;\n          }\n\n          if (negotiateResponse.accessToken) {\n            // Replace the current access token factory with one that uses\n            // the returned access token\n            const accessToken = negotiateResponse.accessToken;\n\n            this._accessTokenFactory = () => accessToken;\n          }\n\n          redirects++;\n        } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\n\n        if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n          throw new Error(\"Negotiate redirection limit exceeded.\");\n        }\n\n        await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\n      }\n\n      if (this.transport instanceof LongPollingTransport) {\n        this.features.inherentKeepAlive = true;\n      }\n\n      if (this._connectionState === \"Connecting\"\n      /* Connecting */\n      ) {\n        // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n        // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n        this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\n\n        this._connectionState = \"Connected\"\n        /* Connected */\n        ;\n      } // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n      // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n      // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n\n    } catch (e) {\n      this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\n\n      this._connectionState = \"Disconnected\"\n      /* Disconnected */\n      ;\n      this.transport = undefined; // if start fails, any active calls to stop assume that start will complete the stop promise\n\n      this._stopPromiseResolver();\n\n      return Promise.reject(e);\n    }\n  }\n\n  async _getNegotiationResponse(url) {\n    const headers = {};\n\n    if (this._accessTokenFactory) {\n      const token = await this._accessTokenFactory();\n\n      if (token) {\n        headers[HeaderNames.Authorization] = `Bearer ${token}`;\n      }\n    }\n\n    const [name, value] = getUserAgentHeader();\n    headers[name] = value;\n\n    const negotiateUrl = this._resolveNegotiateUrl(url);\n\n    this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\n\n    try {\n      const response = await this._httpClient.post(negotiateUrl, {\n        content: \"\",\n        headers: { ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      });\n\n      if (response.statusCode !== 200) {\n        return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\n      }\n\n      const negotiateResponse = JSON.parse(response.content);\n\n      if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n        // Negotiate version 0 doesn't use connectionToken\n        // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n        negotiateResponse.connectionToken = negotiateResponse.connectionId;\n      }\n\n      return negotiateResponse;\n    } catch (e) {\n      let errorMessage = \"Failed to complete negotiation with the server: \" + e;\n\n      if (e instanceof HttpError) {\n        if (e.statusCode === 404) {\n          errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n        }\n      }\n\n      this._logger.log(LogLevel.Error, errorMessage);\n\n      return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\n    }\n  }\n\n  _createConnectUrl(url, connectionToken) {\n    if (!connectionToken) {\n      return url;\n    }\n\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\n  }\n\n  async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\n\n    if (this._isITransport(requestedTransport)) {\n      this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n\n      this.transport = requestedTransport;\n      await this._startTransport(connectUrl, requestedTransferFormat);\n      this.connectionId = negotiateResponse.connectionId;\n      return;\n    }\n\n    const transportExceptions = [];\n    const transports = negotiateResponse.availableTransports || [];\n    let negotiate = negotiateResponse;\n\n    for (const endpoint of transports) {\n      const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\n\n      if (transportOrError instanceof Error) {\n        // Store the error and continue, we don't want to cause a re-negotiate in these cases\n        transportExceptions.push(`${endpoint.transport} failed:`);\n        transportExceptions.push(transportOrError);\n      } else if (this._isITransport(transportOrError)) {\n        this.transport = transportOrError;\n\n        if (!negotiate) {\n          try {\n            negotiate = await this._getNegotiationResponse(url);\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n\n          connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\n        }\n\n        try {\n          await this._startTransport(connectUrl, requestedTransferFormat);\n          this.connectionId = negotiate.connectionId;\n          return;\n        } catch (ex) {\n          this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\n\n          negotiate = undefined;\n          transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\n\n          if (this._connectionState !== \"Connecting\"\n          /* Connecting */\n          ) {\n            const message = \"Failed to select transport before stop() was called.\";\n\n            this._logger.log(LogLevel.Debug, message);\n\n            return Promise.reject(new Error(message));\n          }\n        }\n      }\n    }\n\n    if (transportExceptions.length > 0) {\n      return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\n    }\n\n    return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\n  }\n\n  _constructTransport(transport) {\n    switch (transport) {\n      case HttpTransportType.WebSockets:\n        if (!this._options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n\n        return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n\n      case HttpTransportType.ServerSentEvents:\n        if (!this._options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n\n        return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\n\n      case HttpTransportType.LongPolling:\n        return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\n\n      default:\n        throw new Error(`Unknown transport: ${transport}.`);\n    }\n  }\n\n  _startTransport(url, transferFormat) {\n    this.transport.onreceive = this.onreceive;\n\n    this.transport.onclose = e => this._stopConnection(e);\n\n    return this.transport.connect(url, transferFormat);\n  }\n\n  _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\n    const transport = HttpTransportType[endpoint.transport];\n\n    if (transport === null || transport === undefined) {\n      this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n\n      return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n    } else {\n      if (transportMatches(requestedTransport, transport)) {\n        const transferFormats = endpoint.transferFormats.map(s => TransferFormat[s]);\n\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === HttpTransportType.WebSockets && !this._options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n            this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\n\n            return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\n          } else {\n            this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\n\n            try {\n              return this._constructTransport(transport);\n            } catch (ex) {\n              return ex;\n            }\n          }\n        } else {\n          this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\n\n          return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\n        }\n      } else {\n        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\n\n        return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\n      }\n    }\n  }\n\n  _isITransport(transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  }\n\n  _stopConnection(error) {\n    this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\n\n    this.transport = undefined; // If we have a stopError, it takes precedence over the error from the transport\n\n    error = this._stopError || error;\n    this._stopError = undefined;\n\n    if (this._connectionState === \"Disconnected\"\n    /* Disconnected */\n    ) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\n\n      return;\n    }\n\n    if (this._connectionState === \"Connecting\"\n    /* Connecting */\n    ) {\n      this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\n\n      throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\n    }\n\n    if (this._connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n      // A call to stop() induced this call to stopConnection and needs to be completed.\n      // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n      this._stopPromiseResolver();\n    }\n\n    if (error) {\n      this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection disconnected.\");\n    }\n\n    if (this._sendQueue) {\n      this._sendQueue.stop().catch(e => {\n        this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\n      });\n\n      this._sendQueue = undefined;\n    }\n\n    this.connectionId = undefined;\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n\n    if (this._connectionStarted) {\n      this._connectionStarted = false;\n\n      try {\n        if (this.onclose) {\n          this.onclose(error);\n        }\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\n      }\n    }\n  }\n\n  _resolveUrl(url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n\n    if (!Platform.isBrowser || !window.document) {\n      throw new Error(`Cannot resolve '${url}'.`);\n    } // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n\n\n    const aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n\n    this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\n\n    return aTag.href;\n  }\n\n  _resolveNegotiateUrl(url) {\n    const index = url.indexOf(\"?\");\n    let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\n\n    if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\n      negotiateUrl += \"/\";\n    }\n\n    negotiateUrl += \"negotiate\";\n    negotiateUrl += index === -1 ? \"\" : url.substring(index);\n\n    if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\n      negotiateUrl += index === -1 ? \"?\" : \"&\";\n      negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\n    }\n\n    return negotiateUrl;\n  }\n\n}\n\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\n\n\nexport class TransportSendQueue {\n  constructor(_transport) {\n    this._transport = _transport;\n    this._buffer = [];\n    this._executing = true;\n    this._sendBufferedData = new PromiseSource();\n    this._transportResult = new PromiseSource();\n    this._sendLoopPromise = this._sendLoop();\n  }\n\n  send(data) {\n    this._bufferData(data);\n\n    if (!this._transportResult) {\n      this._transportResult = new PromiseSource();\n    }\n\n    return this._transportResult.promise;\n  }\n\n  stop() {\n    this._executing = false;\n\n    this._sendBufferedData.resolve();\n\n    return this._sendLoopPromise;\n  }\n\n  _bufferData(data) {\n    if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n      throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof data}`);\n    }\n\n    this._buffer.push(data);\n\n    this._sendBufferedData.resolve();\n  }\n\n  async _sendLoop() {\n    while (true) {\n      await this._sendBufferedData.promise;\n\n      if (!this._executing) {\n        if (this._transportResult) {\n          this._transportResult.reject(\"Connection stopped.\");\n        }\n\n        break;\n      }\n\n      this._sendBufferedData = new PromiseSource();\n      const transportResult = this._transportResult;\n      this._transportResult = undefined;\n      const data = typeof this._buffer[0] === \"string\" ? this._buffer.join(\"\") : TransportSendQueue._concatBuffers(this._buffer);\n      this._buffer.length = 0;\n\n      try {\n        await this._transport.send(data);\n        transportResult.resolve();\n      } catch (error) {\n        transportResult.reject(error);\n      }\n    }\n  }\n\n  static _concatBuffers(arrayBuffers) {\n    const totalLength = arrayBuffers.map(b => b.byteLength).reduce((a, b) => a + b);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n\n    for (const item of arrayBuffers) {\n      result.set(new Uint8Array(item), offset);\n      offset += item.byteLength;\n    }\n\n    return result.buffer;\n  }\n\n}\n\nclass PromiseSource {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\n  }\n\n  resolve() {\n    this._resolver();\n  }\n\n  reject(reason) {\n    this._rejecter(reason);\n  }\n\n}","map":{"version":3,"sources":["../../src/HttpConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this._stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}