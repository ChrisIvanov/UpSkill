{"ast":null,"code":"import axios from \"axios\";\nimport jwt from 'jwt-decode';\nimport { Base_URL } from '../utils/baseUrlConstant';\nconst API_URL = Base_URL + \"Identity/\"; // let refreshTokenTimeout = \"\";\n// const refreshToken = () => {\n//   axios.post(API_URL + \"refreshToken\", {});\n//   //TODO: Must return ApplicationUser object here.\n// }\n// refreshToken = async () => {\n//   this.stopRefreshTokenTimer();\n//   try {\n//       const user = await agent.Account.refreshToken();\n//       runInAction(() => this.user = user);\n//       store.commonStore.setToken(user.token);\n//       this.startRefreshTokenTimer(user);\n//   } catch (error) {\n//       console.log(error);\n//   }\n// }\n// startRefreshTokenTimer = (user) => {\n//   const jwtToken = JSON.parse(user.token.split('.')[1]);\n//   const expires = new Date(jwtToken.exp * 1000);\n//   const timeout = expires.getTime() - Date.now() - (60 * 1000);\n//   this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\n// }\n// stopRefreshTokenTimer() {\n//   clearTimeout(this.refreshTokenTimeout);\n// }\n\nconst register = (firstName, lastName, companyName, email, password, confirmPassword) => {\n  return axios.post(API_URL + \"register\", {\n    firstName,\n    lastName,\n    companyName,\n    email,\n    password,\n    confirmPassword\n  }); // .then(this.startRefreshTokenTimer(user));\n};\n\nconst login = (email, password) => {\n  return axios.post(API_URL + \"login\", {\n    email,\n    password\n  }).then(response => {\n    if (response.data.token) {\n      localStorage.setItem(\"token\", response.data.token);\n      localStorage.setItem(\"user\", JSON.stringify(jwt(response.data.token)));\n    } // this.startRefreshTokenTimer(user);\n\n\n    return response.data;\n  });\n};\n\nconst logout = () => {\n  return axios.post(API_URL + \"logout\").then(res => {\n    localStorage.removeItem(\"user\");\n  });\n};\n\nconst identity = {\n  register,\n  login,\n  logout\n};\nexport default identity;","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/services/auth.service.js"],"names":["axios","jwt","Base_URL","API_URL","register","firstName","lastName","companyName","email","password","confirmPassword","post","login","then","response","data","token","localStorage","setItem","JSON","stringify","logout","res","removeItem","identity"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,MAAMC,OAAO,GAAGD,QAAQ,GAAG,WAA3B,C,CACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAME,QAAQ,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,WAAtB,EAAmCC,KAAnC,EAA0CC,QAA1C,EAAoDC,eAApD,KAAwE;AACvF,SAAOV,KAAK,CAACW,IAAN,CAAWR,OAAO,GAAG,UAArB,EAAiC;AACtCE,IAAAA,SADsC;AAEtCC,IAAAA,QAFsC;AAGtCC,IAAAA,WAHsC;AAItCC,IAAAA,KAJsC;AAKtCC,IAAAA,QALsC;AAMtCC,IAAAA;AANsC,GAAjC,CAAP,CADuF,CASvF;AACD,CAVD;;AAYA,MAAME,KAAK,GAAG,CAACJ,KAAD,EAAQC,QAAR,KAAqB;AACjC,SAAOT,KAAK,CACTW,IADI,CACCR,OAAO,GAAG,OADX,EACoB;AACvBK,IAAAA,KADuB;AAEvBC,IAAAA;AAFuB,GADpB,EAKJI,IALI,CAKEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,KAAlB,EAAyB;AACvBC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,QAAQ,CAACC,IAAT,CAAcC,KAA5C;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAenB,GAAG,CAACa,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAlB,CAA7B;AACD,KAJiB,CAMlB;;;AACA,WAAOF,QAAQ,CAACC,IAAhB;AACD,GAbI,CAAP;AAcD,CAfD;;AAiBA,MAAMM,MAAM,GAAG,MAAM;AACnB,SAAOrB,KAAK,CACTW,IADI,CACCR,OAAO,GAAG,QADX,EAEJU,IAFI,CAEES,GAAD,IAAS;AACXL,IAAAA,YAAY,CAACM,UAAb,CAAwB,MAAxB;AACH,GAJI,CAAP;AAKD,CAND;;AAQA,MAAMC,QAAQ,GAAG;AACfpB,EAAAA,QADe;AAEfQ,EAAAA,KAFe;AAGfS,EAAAA;AAHe,CAAjB;AAMA,eAAeG,QAAf","sourcesContent":["import axios from \"axios\";\r\nimport jwt from 'jwt-decode'\r\n\r\nimport { Base_URL } from '../utils/baseUrlConstant';\r\n\r\nconst API_URL = Base_URL + \"Identity/\";\r\n// let refreshTokenTimeout = \"\";\r\n\r\n// const refreshToken = () => {\r\n//   axios.post(API_URL + \"refreshToken\", {});\r\n//   //TODO: Must return ApplicationUser object here.\r\n// }\r\n\r\n// refreshToken = async () => {\r\n//   this.stopRefreshTokenTimer();\r\n//   try {\r\n//       const user = await agent.Account.refreshToken();\r\n//       runInAction(() => this.user = user);\r\n//       store.commonStore.setToken(user.token);\r\n//       this.startRefreshTokenTimer(user);\r\n//   } catch (error) {\r\n//       console.log(error);\r\n//   }\r\n// }\r\n\r\n// startRefreshTokenTimer = (user) => {\r\n//   const jwtToken = JSON.parse(user.token.split('.')[1]);\r\n//   const expires = new Date(jwtToken.exp * 1000);\r\n//   const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n//   this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n// }\r\n\r\n// stopRefreshTokenTimer() {\r\n//   clearTimeout(this.refreshTokenTimeout);\r\n// }\r\n\r\nconst register = (firstName, lastName, companyName, email, password, confirmPassword) => { \r\n  return axios.post(API_URL + \"register\", { \r\n    firstName,\r\n    lastName, \r\n    companyName,\r\n    email,\r\n    password,\r\n    confirmPassword,\r\n  })\r\n  // .then(this.startRefreshTokenTimer(user));\r\n};\r\n\r\nconst login = (email, password) => {\r\n  return axios\r\n    .post(API_URL + \"login\", {\r\n      email,\r\n      password,\r\n    })\r\n    .then((response) => {\r\n      if (response.data.token) {\r\n        localStorage.setItem(\"token\", response.data.token)\r\n        localStorage.setItem(\"user\", JSON.stringify(jwt(response.data.token)));\r\n      }\r\n\r\n      // this.startRefreshTokenTimer(user);\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  return axios\r\n    .post(API_URL + \"logout\")\r\n    .then((res) => {\r\n        localStorage.removeItem(\"user\");\r\n    });\r\n};\r\n\r\nconst identity = {\r\n  register,\r\n  login,\r\n  logout,\r\n}\r\n\r\nexport default identity;\r\n"]},"metadata":{},"sourceType":"module"}