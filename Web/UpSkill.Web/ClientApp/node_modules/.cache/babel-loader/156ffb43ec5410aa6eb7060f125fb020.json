{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { Subject } from \"./Subject\";\nimport { Arg, getErrorString, Platform } from \"./Utils\";\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\n/** Describes the current state of the {@link HubConnection} to the server. */\n\nexport var HubConnectionState;\n\n(function (HubConnectionState) {\n  /** The hub connection is disconnected. */\n  HubConnectionState[\"Disconnected\"] = \"Disconnected\";\n  /** The hub connection is connecting. */\n\n  HubConnectionState[\"Connecting\"] = \"Connecting\";\n  /** The hub connection is connected. */\n\n  HubConnectionState[\"Connected\"] = \"Connected\";\n  /** The hub connection is disconnecting. */\n\n  HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\n  /** The hub connection is reconnecting. */\n\n  HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\n})(HubConnectionState || (HubConnectionState = {}));\n/** Represents a connection to a SignalR Hub. */\n\n\nexport class HubConnection {\n  constructor(connection, logger, protocol, reconnectPolicy) {\n    this._nextKeepAlive = 0;\n\n    this._freezeEventListener = () => {\n      this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\n    };\n\n    Arg.isRequired(connection, \"connection\");\n    Arg.isRequired(logger, \"logger\");\n    Arg.isRequired(protocol, \"protocol\");\n    this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\n    this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\n    this._logger = logger;\n    this._protocol = protocol;\n    this.connection = connection;\n    this._reconnectPolicy = reconnectPolicy;\n    this._handshakeProtocol = new HandshakeProtocol();\n\n    this.connection.onreceive = data => this._processIncomingData(data);\n\n    this.connection.onclose = error => this._connectionClosed(error);\n\n    this._callbacks = {};\n    this._methods = {};\n    this._closedCallbacks = [];\n    this._reconnectingCallbacks = [];\n    this._reconnectedCallbacks = [];\n    this._invocationId = 0;\n    this._receivedHandshakeResponse = false;\n    this._connectionState = HubConnectionState.Disconnected;\n    this._connectionStarted = false;\n    this._cachedPingMessage = this._protocol.writeMessage({\n      type: MessageType.Ping\n    });\n  }\n  /** @internal */\n  // Using a public static factory method means we can have a private constructor and an _internal_\n  // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n  // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n  // public parameter-less constructor.\n\n\n  static create(connection, logger, protocol, reconnectPolicy) {\n    return new HubConnection(connection, logger, protocol, reconnectPolicy);\n  }\n  /** Indicates the state of the {@link HubConnection} to the server. */\n\n\n  get state() {\n    return this._connectionState;\n  }\n  /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n   *  in the disconnected state or if the negotiation step was skipped.\r\n   */\n\n\n  get connectionId() {\n    return this.connection ? this.connection.connectionId || null : null;\n  }\n  /** Indicates the url of the {@link HubConnection} to the server. */\n\n\n  get baseUrl() {\n    return this.connection.baseUrl || \"\";\n  }\n  /**\r\n   * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n   * Reconnecting states.\r\n   * @param {string} url The url to connect to.\r\n   */\n\n\n  set baseUrl(url) {\n    if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\n      throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\n    }\n\n    if (!url) {\n      throw new Error(\"The HubConnection url must be a valid url.\");\n    }\n\n    this.connection.baseUrl = url;\n  }\n  /** Starts the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n   */\n\n\n  start() {\n    this._startPromise = this._startWithStateTransitions();\n    return this._startPromise;\n  }\n\n  async _startWithStateTransitions() {\n    if (this._connectionState !== HubConnectionState.Disconnected) {\n      return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\n    }\n\n    this._connectionState = HubConnectionState.Connecting;\n\n    this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\n\n    try {\n      await this._startInternal();\n\n      if (Platform.isBrowser) {\n        if (document) {\n          // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\n          document.addEventListener(\"freeze\", this._freezeEventListener);\n        }\n      }\n\n      this._connectionState = HubConnectionState.Connected;\n      this._connectionStarted = true;\n\n      this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\n    } catch (e) {\n      this._connectionState = HubConnectionState.Disconnected;\n\n      this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\n\n      return Promise.reject(e);\n    }\n  }\n\n  async _startInternal() {\n    this._stopDuringStartError = undefined;\n    this._receivedHandshakeResponse = false; // Set up the promise before any connection is (re)started otherwise it could race with received messages\n\n    const handshakePromise = new Promise((resolve, reject) => {\n      this._handshakeResolver = resolve;\n      this._handshakeRejecter = reject;\n    });\n    await this.connection.start(this._protocol.transferFormat);\n\n    try {\n      const handshakeRequest = {\n        protocol: this._protocol.name,\n        version: this._protocol.version\n      };\n\n      this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\n\n      await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\n\n      this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`); // defensively cleanup timeout in case we receive a message from the server before we finish start\n\n\n      this._cleanupTimeout();\n\n      this._resetTimeoutPeriod();\n\n      this._resetKeepAliveInterval();\n\n      await handshakePromise; // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\n      // being rejected on close, because this continuation can run after both the handshake completed successfully\n      // and the connection was closed.\n\n      if (this._stopDuringStartError) {\n        // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\n        // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\n        // will cause the calling continuation to get scheduled to run later.\n        // eslint-disable-next-line @typescript-eslint/no-throw-literal\n        throw this._stopDuringStartError;\n      }\n    } catch (e) {\n      this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\n\n      this._cleanupTimeout();\n\n      this._cleanupPingTimer(); // HttpConnection.stop() should not complete until after the onclose callback is invoked.\n      // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\n\n\n      await this.connection.stop(e);\n      throw e;\n    }\n  }\n  /** Stops the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n   */\n\n\n  async stop() {\n    // Capture the start promise before the connection might be restarted in an onclose callback.\n    const startPromise = this._startPromise;\n    this._stopPromise = this._stopInternal();\n    await this._stopPromise;\n\n    try {\n      // Awaiting undefined continues immediately\n      await startPromise;\n    } catch (e) {// This exception is returned to the user as a rejected Promise from the start method.\n    }\n  }\n\n  _stopInternal(error) {\n    if (this._connectionState === HubConnectionState.Disconnected) {\n      this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\n\n      return Promise.resolve();\n    }\n\n    if (this._connectionState === HubConnectionState.Disconnecting) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n\n      return this._stopPromise;\n    }\n\n    this._connectionState = HubConnectionState.Disconnecting;\n\n    this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\n\n    if (this._reconnectDelayHandle) {\n      // We're in a reconnect delay which means the underlying connection is currently already stopped.\n      // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\n      // fire the onclose callbacks.\n      this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\n\n      clearTimeout(this._reconnectDelayHandle);\n      this._reconnectDelayHandle = undefined;\n\n      this._completeClose();\n\n      return Promise.resolve();\n    }\n\n    this._cleanupTimeout();\n\n    this._cleanupPingTimer();\n\n    this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\"); // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\n    // or the onclose callback is invoked. The onclose callback will transition the HubConnection\n    // to the disconnected state if need be before HttpConnection.stop() completes.\n\n    return this.connection.stop(error);\n  }\n  /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n   *\r\n   * @typeparam T The type of the items returned by the server.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n   */\n\n\n  stream(methodName, ...args) {\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds); // eslint-disable-next-line prefer-const\n\n\n    let promiseQueue;\n    const subject = new Subject();\n\n    subject.cancelCallback = () => {\n      const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\n\n      delete this._callbacks[invocationDescriptor.invocationId];\n      return promiseQueue.then(() => {\n        return this._sendWithProtocol(cancelInvocation);\n      });\n    };\n\n    this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\n      if (error) {\n        subject.error(error);\n        return;\n      } else if (invocationEvent) {\n        // invocationEvent will not be null when an error is not passed to the callback\n        if (invocationEvent.type === MessageType.Completion) {\n          if (invocationEvent.error) {\n            subject.error(new Error(invocationEvent.error));\n          } else {\n            subject.complete();\n          }\n        } else {\n          subject.next(invocationEvent.item);\n        }\n      }\n    };\n\n    promiseQueue = this._sendWithProtocol(invocationDescriptor).catch(e => {\n      subject.error(e);\n      delete this._callbacks[invocationDescriptor.invocationId];\n    });\n\n    this._launchStreams(streams, promiseQueue);\n\n    return subject;\n  }\n\n  _sendMessage(message) {\n    this._resetKeepAliveInterval();\n\n    return this.connection.send(message);\n  }\n  /**\r\n   * Sends a js object to the server.\r\n   * @param message The js object to serialize and send.\r\n   */\n\n\n  _sendWithProtocol(message) {\n    return this._sendMessage(this._protocol.writeMessage(message));\n  }\n  /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n   *\r\n   * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n   * be processing the invocation.\r\n   *\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n   */\n\n\n  send(methodName, ...args) {\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\n\n    this._launchStreams(streams, sendPromise);\n\n    return sendPromise;\n  }\n  /** Invokes a hub method on the server using the specified name and arguments.\r\n   *\r\n   * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n   * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n   * resolving the Promise.\r\n   *\r\n   * @typeparam T The expected return type.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n   */\n\n\n  invoke(methodName, ...args) {\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\n\n    const p = new Promise((resolve, reject) => {\n      // invocationId will always have a value for a non-blocking invocation\n      this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\n        if (error) {\n          reject(error);\n          return;\n        } else if (invocationEvent) {\n          // invocationEvent will not be null when an error is not passed to the callback\n          if (invocationEvent.type === MessageType.Completion) {\n            if (invocationEvent.error) {\n              reject(new Error(invocationEvent.error));\n            } else {\n              resolve(invocationEvent.result);\n            }\n          } else {\n            reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\n          }\n        }\n      };\n\n      const promiseQueue = this._sendWithProtocol(invocationDescriptor).catch(e => {\n        reject(e); // invocationId will always have a value for a non-blocking invocation\n\n        delete this._callbacks[invocationDescriptor.invocationId];\n      });\n\n      this._launchStreams(streams, promiseQueue);\n    });\n    return p;\n  }\n  /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n   *\r\n   * @param {string} methodName The name of the hub method to define.\r\n   * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n   */\n\n\n  on(methodName, newMethod) {\n    if (!methodName || !newMethod) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n\n    if (!this._methods[methodName]) {\n      this._methods[methodName] = [];\n    } // Preventing adding the same handler multiple times.\n\n\n    if (this._methods[methodName].indexOf(newMethod) !== -1) {\n      return;\n    }\n\n    this._methods[methodName].push(newMethod);\n  }\n\n  off(methodName, method) {\n    if (!methodName) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n    const handlers = this._methods[methodName];\n\n    if (!handlers) {\n      return;\n    }\n\n    if (method) {\n      const removeIdx = handlers.indexOf(method);\n\n      if (removeIdx !== -1) {\n        handlers.splice(removeIdx, 1);\n\n        if (handlers.length === 0) {\n          delete this._methods[methodName];\n        }\n      }\n    } else {\n      delete this._methods[methodName];\n    }\n  }\n  /** Registers a handler that will be invoked when the connection is closed.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n   */\n\n\n  onclose(callback) {\n    if (callback) {\n      this._closedCallbacks.push(callback);\n    }\n  }\n  /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n   */\n\n\n  onreconnecting(callback) {\n    if (callback) {\n      this._reconnectingCallbacks.push(callback);\n    }\n  }\n  /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n   */\n\n\n  onreconnected(callback) {\n    if (callback) {\n      this._reconnectedCallbacks.push(callback);\n    }\n  }\n\n  _processIncomingData(data) {\n    this._cleanupTimeout();\n\n    if (!this._receivedHandshakeResponse) {\n      data = this._processHandshakeResponse(data);\n      this._receivedHandshakeResponse = true;\n    } // Data may have all been read when processing handshake response\n\n\n    if (data) {\n      // Parse the messages\n      const messages = this._protocol.parseMessages(data, this._logger);\n\n      for (const message of messages) {\n        switch (message.type) {\n          case MessageType.Invocation:\n            this._invokeClientMethod(message);\n\n            break;\n\n          case MessageType.StreamItem:\n          case MessageType.Completion:\n            {\n              const callback = this._callbacks[message.invocationId];\n\n              if (callback) {\n                if (message.type === MessageType.Completion) {\n                  delete this._callbacks[message.invocationId];\n                }\n\n                try {\n                  callback(message);\n                } catch (e) {\n                  this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\n                }\n              }\n\n              break;\n            }\n\n          case MessageType.Ping:\n            // Don't care about pings\n            break;\n\n          case MessageType.Close:\n            {\n              this._logger.log(LogLevel.Information, \"Close message received from server.\");\n\n              const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\n\n              if (message.allowReconnect === true) {\n                // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\n                // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.connection.stop(error);\n              } else {\n                // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\n                this._stopPromise = this._stopInternal(error);\n              }\n\n              break;\n            }\n\n          default:\n            this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\n\n            break;\n        }\n      }\n    }\n\n    this._resetTimeoutPeriod();\n  }\n\n  _processHandshakeResponse(data) {\n    let responseMessage;\n    let remainingData;\n\n    try {\n      [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\n    } catch (e) {\n      const message = \"Error parsing handshake response: \" + e;\n\n      this._logger.log(LogLevel.Error, message);\n\n      const error = new Error(message);\n\n      this._handshakeRejecter(error);\n\n      throw error;\n    }\n\n    if (responseMessage.error) {\n      const message = \"Server returned handshake error: \" + responseMessage.error;\n\n      this._logger.log(LogLevel.Error, message);\n\n      const error = new Error(message);\n\n      this._handshakeRejecter(error);\n\n      throw error;\n    } else {\n      this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\n    }\n\n    this._handshakeResolver();\n\n    return remainingData;\n  }\n\n  _resetKeepAliveInterval() {\n    if (this.connection.features.inherentKeepAlive) {\n      return;\n    } // Set the time we want the next keep alive to be sent\n    // Timer will be setup on next message receive\n\n\n    this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\n\n    this._cleanupPingTimer();\n  }\n\n  _resetTimeoutPeriod() {\n    if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n      // Set the timeout timer\n      this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds); // Set keepAlive timer if there isn't one\n\n      if (this._pingServerHandle === undefined) {\n        let nextPing = this._nextKeepAlive - new Date().getTime();\n\n        if (nextPing < 0) {\n          nextPing = 0;\n        } // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\n\n\n        this._pingServerHandle = setTimeout(async () => {\n          if (this._connectionState === HubConnectionState.Connected) {\n            try {\n              await this._sendMessage(this._cachedPingMessage);\n            } catch {\n              // We don't care about the error. It should be seen elsewhere in the client.\n              // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\n              this._cleanupPingTimer();\n            }\n          }\n        }, nextPing);\n      }\n    }\n  } // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  serverTimeout() {\n    // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n    // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n  }\n\n  _invokeClientMethod(invocationMessage) {\n    const methods = this._methods[invocationMessage.target.toLowerCase()];\n\n    if (methods) {\n      try {\n        methods.forEach(m => m.apply(this, invocationMessage.arguments));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\n      }\n\n      if (invocationMessage.invocationId) {\n        // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\n        const message = \"Server requested a response, which is not supported in this version of the client.\";\n\n        this._logger.log(LogLevel.Error, message); // We don't want to wait on the stop itself.\n\n\n        this._stopPromise = this._stopInternal(new Error(message));\n      }\n    } else {\n      this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\n    }\n  }\n\n  _connectionClosed(error) {\n    this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`); // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\n\n\n    this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\"); // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\n    // If it has already completed, this should just noop.\n\n    if (this._handshakeResolver) {\n      this._handshakeResolver();\n    }\n\n    this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\n\n    this._cleanupTimeout();\n\n    this._cleanupPingTimer();\n\n    if (this._connectionState === HubConnectionState.Disconnecting) {\n      this._completeClose(error);\n    } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._reconnect(error);\n    } else if (this._connectionState === HubConnectionState.Connected) {\n      this._completeClose(error);\n    } // If none of the above if conditions were true were called the HubConnection must be in either:\n    // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\n    // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\n    //    and potentially continue the reconnect() loop.\n    // 3. The Disconnected state in which case we're already done.\n\n  }\n\n  _completeClose(error) {\n    if (this._connectionStarted) {\n      this._connectionState = HubConnectionState.Disconnected;\n      this._connectionStarted = false;\n\n      if (Platform.isBrowser) {\n        if (document) {\n          document.removeEventListener(\"freeze\", this._freezeEventListener);\n        }\n      }\n\n      try {\n        this._closedCallbacks.forEach(c => c.apply(this, [error]));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\n      }\n    }\n  }\n\n  async _reconnect(error) {\n    const reconnectStartTime = Date.now();\n    let previousReconnectAttempts = 0;\n    let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\n\n    let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\n\n    if (nextRetryDelay === null) {\n      this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\n\n      this._completeClose(error);\n\n      return;\n    }\n\n    this._connectionState = HubConnectionState.Reconnecting;\n\n    if (error) {\n      this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\n    }\n\n    if (this._reconnectingCallbacks.length !== 0) {\n      try {\n        this._reconnectingCallbacks.forEach(c => c.apply(this, [error]));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\n      } // Exit early if an onreconnecting callback called connection.stop().\n\n\n      if (this._connectionState !== HubConnectionState.Reconnecting) {\n        this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\n\n        return;\n      }\n    }\n\n    while (nextRetryDelay !== null) {\n      this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\n\n      await new Promise(resolve => {\n        this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\n      });\n      this._reconnectDelayHandle = undefined;\n\n      if (this._connectionState !== HubConnectionState.Reconnecting) {\n        this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\n\n        return;\n      }\n\n      try {\n        await this._startInternal();\n        this._connectionState = HubConnectionState.Connected;\n\n        this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\n\n        if (this._reconnectedCallbacks.length !== 0) {\n          try {\n            this._reconnectedCallbacks.forEach(c => c.apply(this, [this.connection.connectionId]));\n          } catch (e) {\n            this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\n          }\n        }\n\n        return;\n      } catch (e) {\n        this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\n\n        if (this._connectionState !== HubConnectionState.Reconnecting) {\n          this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`); // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\n\n\n          if (this._connectionState === HubConnectionState.Disconnecting) {\n            this._completeClose();\n          }\n\n          return;\n        }\n\n        retryError = e instanceof Error ? e : new Error(e.toString());\n        nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\n      }\n    }\n\n    this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\n\n    this._completeClose();\n  }\n\n  _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\n    try {\n      return this._reconnectPolicy.nextRetryDelayInMilliseconds({\n        elapsedMilliseconds,\n        previousRetryCount,\n        retryReason\n      });\n    } catch (e) {\n      this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\n\n      return null;\n    }\n  }\n\n  _cancelCallbacksWithError(error) {\n    const callbacks = this._callbacks;\n    this._callbacks = {};\n    Object.keys(callbacks).forEach(key => {\n      const callback = callbacks[key];\n\n      try {\n        callback(null, error);\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\n      }\n    });\n  }\n\n  _cleanupPingTimer() {\n    if (this._pingServerHandle) {\n      clearTimeout(this._pingServerHandle);\n      this._pingServerHandle = undefined;\n    }\n  }\n\n  _cleanupTimeout() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  _createInvocation(methodName, args, nonblocking, streamIds) {\n    if (nonblocking) {\n      if (streamIds.length !== 0) {\n        return {\n          arguments: args,\n          streamIds,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      } else {\n        return {\n          arguments: args,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      }\n    } else {\n      const invocationId = this._invocationId;\n      this._invocationId++;\n\n      if (streamIds.length !== 0) {\n        return {\n          arguments: args,\n          invocationId: invocationId.toString(),\n          streamIds,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      } else {\n        return {\n          arguments: args,\n          invocationId: invocationId.toString(),\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      }\n    }\n  }\n\n  _launchStreams(streams, promiseQueue) {\n    if (streams.length === 0) {\n      return;\n    } // Synchronize stream data so they arrive in-order on the server\n\n\n    if (!promiseQueue) {\n      promiseQueue = Promise.resolve();\n    } // We want to iterate over the keys, since the keys are the stream ids\n    // eslint-disable-next-line guard-for-in\n\n\n    for (const streamId in streams) {\n      streams[streamId].subscribe({\n        complete: () => {\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\n        },\n        error: err => {\n          let message;\n\n          if (err instanceof Error) {\n            message = err.message;\n          } else if (err && err.toString) {\n            message = err.toString();\n          } else {\n            message = \"Unknown error\";\n          }\n\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\n        },\n        next: item => {\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\n        }\n      });\n    }\n  }\n\n  _replaceStreamingParams(args) {\n    const streams = [];\n    const streamIds = [];\n\n    for (let i = 0; i < args.length; i++) {\n      const argument = args[i];\n\n      if (this._isObservable(argument)) {\n        const streamId = this._invocationId;\n        this._invocationId++; // Store the stream for later use\n\n        streams[streamId] = argument;\n        streamIds.push(streamId.toString()); // remove stream from args\n\n        args.splice(i, 1);\n      }\n    }\n\n    return [streams, streamIds];\n  }\n\n  _isObservable(arg) {\n    // This allows other stream implementations to just work (like rxjs)\n    return arg && arg.subscribe && typeof arg.subscribe === \"function\";\n  }\n\n  _createStreamInvocation(methodName, args, streamIds) {\n    const invocationId = this._invocationId;\n    this._invocationId++;\n\n    if (streamIds.length !== 0) {\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        streamIds,\n        target: methodName,\n        type: MessageType.StreamInvocation\n      };\n    } else {\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        target: methodName,\n        type: MessageType.StreamInvocation\n      };\n    }\n  }\n\n  _createCancelInvocation(id) {\n    return {\n      invocationId: id,\n      type: MessageType.CancelInvocation\n    };\n  }\n\n  _createStreamItemMessage(id, item) {\n    return {\n      invocationId: id,\n      item,\n      type: MessageType.StreamItem\n    };\n  }\n\n  _createCompletionMessage(id, error, result) {\n    if (error) {\n      return {\n        error,\n        invocationId: id,\n        type: MessageType.Completion\n      };\n    }\n\n    return {\n      invocationId: id,\n      result,\n      type: MessageType.Completion\n    };\n  }\n\n}","map":{"version":3,"sources":["../../src/HubConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: ((...args: any[]) => void)[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                    document.addEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}