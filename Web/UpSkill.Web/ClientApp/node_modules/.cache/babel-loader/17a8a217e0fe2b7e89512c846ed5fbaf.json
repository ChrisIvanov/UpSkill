{"ast":null,"code":"// ETA calculation\nclass ETA {\n  constructor(length, initTime, initValue) {\n    // size of eta buffer\n    this.etaBufferLength = length || 100; // eta buffer with initial values\n\n    this.valueBuffer = [initValue];\n    this.timeBuffer = [initTime]; // eta time value\n\n    this.eta = '0';\n  } // add new values to calculation buffer\n\n\n  update(time, value, total) {\n    this.valueBuffer.push(value);\n    this.timeBuffer.push(time); // trigger recalculation\n\n    this.calculate(total - value);\n  } // fetch estimated time\n\n\n  getTime() {\n    return this.eta;\n  } // eta calculation - request number of remaining events\n\n\n  calculate(remaining) {\n    // get number of samples in eta buffer\n    const currentBufferSize = this.valueBuffer.length;\n    const buffer = Math.min(this.etaBufferLength, currentBufferSize);\n    const v_diff = this.valueBuffer[currentBufferSize - 1] - this.valueBuffer[currentBufferSize - buffer];\n    const t_diff = this.timeBuffer[currentBufferSize - 1] - this.timeBuffer[currentBufferSize - buffer]; // get progress per ms\n\n    const vt_rate = v_diff / t_diff; // strip past elements\n\n    this.valueBuffer = this.valueBuffer.slice(-this.etaBufferLength);\n    this.timeBuffer = this.timeBuffer.slice(-this.etaBufferLength); // eq: vt_rate *x = total\n\n    const eta = Math.ceil(remaining / vt_rate / 1000); // check values\n\n    if (isNaN(eta)) {\n      this.eta = 'NULL'; // +/- Infinity --- NaN already handled\n    } else if (!isFinite(eta)) {\n      this.eta = 'INF'; // > 10M s ? - set upper display limit ~115days (1e7/60/60/24)\n    } else if (eta > 1e7) {\n      this.eta = 'INF'; // negative ?\n    } else if (eta < 0) {\n      this.eta = 0;\n    } else {\n      // assign\n      this.eta = eta;\n    }\n  }\n\n}\n\nmodule.exports = ETA;","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/cli-progress/lib/eta.js"],"names":["ETA","constructor","length","initTime","initValue","etaBufferLength","valueBuffer","timeBuffer","eta","update","time","value","total","push","calculate","getTime","remaining","currentBufferSize","buffer","Math","min","v_diff","t_diff","vt_rate","slice","ceil","isNaN","isFinite","module","exports"],"mappings":"AACA;AACA,MAAMA,GAAN,CAAS;AAELC,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,SAAnB,EAA6B;AACpC;AACA,SAAKC,eAAL,GAAuBH,MAAM,IAAI,GAAjC,CAFoC,CAIpC;;AACA,SAAKI,WAAL,GAAmB,CAACF,SAAD,CAAnB;AACA,SAAKG,UAAL,GAAkB,CAACJ,QAAD,CAAlB,CANoC,CAQpC;;AACA,SAAKK,GAAL,GAAW,GAAX;AACH,GAZI,CAcL;;;AACAC,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAoB;AACtB,SAAKN,WAAL,CAAiBO,IAAjB,CAAsBF,KAAtB;AACA,SAAKJ,UAAL,CAAgBM,IAAhB,CAAqBH,IAArB,EAFsB,CAItB;;AACA,SAAKI,SAAL,CAAeF,KAAK,GAACD,KAArB;AACH,GArBI,CAuBL;;;AACAI,EAAAA,OAAO,GAAE;AACL,WAAO,KAAKP,GAAZ;AACH,GA1BI,CA4BL;;;AACAM,EAAAA,SAAS,CAACE,SAAD,EAAW;AAChB;AACA,UAAMC,iBAAiB,GAAG,KAAKX,WAAL,CAAiBJ,MAA3C;AACA,UAAMgB,MAAM,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKf,eAAd,EAA+BY,iBAA/B,CAAf;AAEA,UAAMI,MAAM,GAAG,KAAKf,WAAL,CAAiBW,iBAAiB,GAAG,CAArC,IAA0C,KAAKX,WAAL,CAAiBW,iBAAiB,GAAGC,MAArC,CAAzD;AACA,UAAMI,MAAM,GAAG,KAAKf,UAAL,CAAgBU,iBAAiB,GAAG,CAApC,IAAyC,KAAKV,UAAL,CAAgBU,iBAAiB,GAAGC,MAApC,CAAxD,CANgB,CAQhB;;AACA,UAAMK,OAAO,GAAGF,MAAM,GAACC,MAAvB,CATgB,CAWhB;;AACA,SAAKhB,WAAL,GAAmB,KAAKA,WAAL,CAAiBkB,KAAjB,CAAuB,CAAC,KAAKnB,eAA7B,CAAnB;AACA,SAAKE,UAAL,GAAmB,KAAKA,UAAL,CAAgBiB,KAAhB,CAAsB,CAAC,KAAKnB,eAA5B,CAAnB,CAbgB,CAehB;;AACA,UAAMG,GAAG,GAAGW,IAAI,CAACM,IAAL,CAAUT,SAAS,GAACO,OAAV,GAAkB,IAA5B,CAAZ,CAhBgB,CAkBhB;;AACA,QAAIG,KAAK,CAAClB,GAAD,CAAT,EAAe;AACX,WAAKA,GAAL,GAAW,MAAX,CADW,CAGf;AACC,KAJD,MAIM,IAAI,CAACmB,QAAQ,CAACnB,GAAD,CAAb,EAAmB;AACrB,WAAKA,GAAL,GAAW,KAAX,CADqB,CAGzB;AACC,KAJK,MAIA,IAAIA,GAAG,GAAG,GAAV,EAAc;AAChB,WAAKA,GAAL,GAAW,KAAX,CADgB,CAGpB;AACC,KAJK,MAIA,IAAIA,GAAG,GAAG,CAAV,EAAY;AACd,WAAKA,GAAL,GAAW,CAAX;AAEH,KAHK,MAGD;AACD;AACA,WAAKA,GAAL,GAAWA,GAAX;AACH;AACJ;;AAnEI;;AAsEToB,MAAM,CAACC,OAAP,GAAiB7B,GAAjB","sourcesContent":["\n// ETA calculation\nclass ETA{\n\n    constructor(length, initTime, initValue){\n        // size of eta buffer\n        this.etaBufferLength = length || 100;\n\n        // eta buffer with initial values\n        this.valueBuffer = [initValue];\n        this.timeBuffer = [initTime];\n\n        // eta time value\n        this.eta = '0';\n    }\n\n    // add new values to calculation buffer\n    update(time, value, total){\n        this.valueBuffer.push(value);\n        this.timeBuffer.push(time);\n\n        // trigger recalculation\n        this.calculate(total-value);\n    }\n\n    // fetch estimated time\n    getTime(){\n        return this.eta;\n    }\n\n    // eta calculation - request number of remaining events\n    calculate(remaining){\n        // get number of samples in eta buffer\n        const currentBufferSize = this.valueBuffer.length;\n        const buffer = Math.min(this.etaBufferLength, currentBufferSize);\n\n        const v_diff = this.valueBuffer[currentBufferSize - 1] - this.valueBuffer[currentBufferSize - buffer];\n        const t_diff = this.timeBuffer[currentBufferSize - 1] - this.timeBuffer[currentBufferSize - buffer];\n\n        // get progress per ms\n        const vt_rate = v_diff/t_diff;\n\n        // strip past elements\n        this.valueBuffer = this.valueBuffer.slice(-this.etaBufferLength);\n        this.timeBuffer  = this.timeBuffer.slice(-this.etaBufferLength);\n\n        // eq: vt_rate *x = total\n        const eta = Math.ceil(remaining/vt_rate/1000);\n\n        // check values\n        if (isNaN(eta)){\n            this.eta = 'NULL';\n\n        // +/- Infinity --- NaN already handled\n        }else if (!isFinite(eta)){\n            this.eta = 'INF';\n\n        // > 10M s ? - set upper display limit ~115days (1e7/60/60/24)\n        }else if (eta > 1e7){\n            this.eta = 'INF';\n\n        // negative ?\n        }else if (eta < 0){\n            this.eta = 0;\n\n        }else{\n            // assign\n            this.eta = eta;\n        }\n    }\n}\n\nmodule.exports = ETA;"]},"metadata":{},"sourceType":"script"}