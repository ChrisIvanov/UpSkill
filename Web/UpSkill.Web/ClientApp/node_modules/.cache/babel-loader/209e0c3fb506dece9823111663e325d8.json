{"ast":null,"code":"// https://confluence.jetbrains.com/display/TCD10/Predefined+Build+Parameters\nconst javaProperties = require('java-properties');\n\nconst fromEntries = require('fromentries');\n\nconst {\n  branch\n} = require('../lib/git.js');\n\nconst PROPERTIES_MAPPING = {\n  root: 'teamcity.build.workingDir',\n  branch: 'teamcity.build.branch'\n};\n\nconst safeReadProperties = filePath => {\n  try {\n    return javaProperties.of(filePath);\n  } catch {\n    return undefined;\n  }\n};\n\nconst getProperties = ({\n  env,\n  cwd\n}) => {\n  const buildProperties = env.TEAMCITY_BUILD_PROPERTIES_FILE ? safeReadProperties(env.TEAMCITY_BUILD_PROPERTIES_FILE) : undefined;\n  const configFile = buildProperties ? buildProperties.get('teamcity.configuration.properties.file') : undefined;\n  const configProperties = configFile ? safeReadProperties(configFile) : configFile;\n  return fromEntries(Object.keys(PROPERTIES_MAPPING).map(key => [key, (buildProperties ? buildProperties.get(PROPERTIES_MAPPING[key]) : undefined) || (configProperties ? configProperties.get(PROPERTIES_MAPPING[key]) : undefined) || (key === 'branch' ? branch({\n    env,\n    cwd\n  }) : undefined)]));\n};\n\nmodule.exports = {\n  detect({\n    env\n  }) {\n    return Boolean(env.TEAMCITY_VERSION);\n  },\n\n  configuration({\n    env,\n    cwd\n  }) {\n    return {\n      name: 'TeamCity',\n      service: 'teamcity',\n      commit: env.BUILD_VCS_NUMBER,\n      build: env.BUILD_NUMBER,\n      slug: env.TEAMCITY_BUILDCONF_NAME,\n      ...getProperties({\n        env,\n        cwd\n      })\n    };\n  }\n\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/env-ci/services/teamcity.js"],"names":["javaProperties","require","fromEntries","branch","PROPERTIES_MAPPING","root","safeReadProperties","filePath","of","undefined","getProperties","env","cwd","buildProperties","TEAMCITY_BUILD_PROPERTIES_FILE","configFile","get","configProperties","Object","keys","map","key","module","exports","detect","Boolean","TEAMCITY_VERSION","configuration","name","service","commit","BUILD_VCS_NUMBER","build","BUILD_NUMBER","slug","TEAMCITY_BUILDCONF_NAME"],"mappings":"AAAA;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AAEA,MAAM;AAACE,EAAAA;AAAD,IAAWF,OAAO,CAAC,eAAD,CAAxB;;AAEA,MAAMG,kBAAkB,GAAG;AAACC,EAAAA,IAAI,EAAE,2BAAP;AAAoCF,EAAAA,MAAM,EAAE;AAA5C,CAA3B;;AAEA,MAAMG,kBAAkB,GAAIC,QAAD,IAAc;AACvC,MAAI;AACF,WAAOP,cAAc,CAACQ,EAAf,CAAkBD,QAAlB,CAAP;AACD,GAFD,CAEE,MAAM;AACN,WAAOE,SAAP;AACD;AACF,CAND;;AAQA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAD,KAAgB;AACpC,QAAMC,eAAe,GAAGF,GAAG,CAACG,8BAAJ,GACpBR,kBAAkB,CAACK,GAAG,CAACG,8BAAL,CADE,GAEpBL,SAFJ;AAGA,QAAMM,UAAU,GAAGF,eAAe,GAAGA,eAAe,CAACG,GAAhB,CAAoB,wCAApB,CAAH,GAAmEP,SAArG;AACA,QAAMQ,gBAAgB,GAAGF,UAAU,GAAGT,kBAAkB,CAACS,UAAD,CAArB,GAAoCA,UAAvE;AAEA,SAAOb,WAAW,CAChBgB,MAAM,CAACC,IAAP,CAAYf,kBAAZ,EAAgCgB,GAAhC,CAAqCC,GAAD,IAAS,CAC3CA,GAD2C,EAE3C,CAACR,eAAe,GAAGA,eAAe,CAACG,GAAhB,CAAoBZ,kBAAkB,CAACiB,GAAD,CAAtC,CAAH,GAAkDZ,SAAlE,MACGQ,gBAAgB,GAAGA,gBAAgB,CAACD,GAAjB,CAAqBZ,kBAAkB,CAACiB,GAAD,CAAvC,CAAH,GAAmDZ,SADtE,MAEGY,GAAG,KAAK,QAAR,GAAmBlB,MAAM,CAAC;AAACQ,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,CAAzB,GAAwCH,SAF3C,CAF2C,CAA7C,CADgB,CAAlB;AAQD,CAfD;;AAiBAa,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,CAAC;AAACb,IAAAA;AAAD,GAAD,EAAQ;AACZ,WAAOc,OAAO,CAACd,GAAG,CAACe,gBAAL,CAAd;AACD,GAHc;;AAIfC,EAAAA,aAAa,CAAC;AAAChB,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,EAAa;AACxB,WAAO;AACLgB,MAAAA,IAAI,EAAE,UADD;AAELC,MAAAA,OAAO,EAAE,UAFJ;AAGLC,MAAAA,MAAM,EAAEnB,GAAG,CAACoB,gBAHP;AAILC,MAAAA,KAAK,EAAErB,GAAG,CAACsB,YAJN;AAKLC,MAAAA,IAAI,EAAEvB,GAAG,CAACwB,uBALL;AAML,SAAGzB,aAAa,CAAC;AAACC,QAAAA,GAAD;AAAMC,QAAAA;AAAN,OAAD;AANX,KAAP;AAQD;;AAbc,CAAjB","sourcesContent":["// https://confluence.jetbrains.com/display/TCD10/Predefined+Build+Parameters\n\nconst javaProperties = require('java-properties');\nconst fromEntries = require('fromentries');\n\nconst {branch} = require('../lib/git.js');\n\nconst PROPERTIES_MAPPING = {root: 'teamcity.build.workingDir', branch: 'teamcity.build.branch'};\n\nconst safeReadProperties = (filePath) => {\n  try {\n    return javaProperties.of(filePath);\n  } catch {\n    return undefined;\n  }\n};\n\nconst getProperties = ({env, cwd}) => {\n  const buildProperties = env.TEAMCITY_BUILD_PROPERTIES_FILE\n    ? safeReadProperties(env.TEAMCITY_BUILD_PROPERTIES_FILE)\n    : undefined;\n  const configFile = buildProperties ? buildProperties.get('teamcity.configuration.properties.file') : undefined;\n  const configProperties = configFile ? safeReadProperties(configFile) : configFile;\n\n  return fromEntries(\n    Object.keys(PROPERTIES_MAPPING).map((key) => [\n      key,\n      (buildProperties ? buildProperties.get(PROPERTIES_MAPPING[key]) : undefined) ||\n        (configProperties ? configProperties.get(PROPERTIES_MAPPING[key]) : undefined) ||\n        (key === 'branch' ? branch({env, cwd}) : undefined),\n    ])\n  );\n};\n\nmodule.exports = {\n  detect({env}) {\n    return Boolean(env.TEAMCITY_VERSION);\n  },\n  configuration({env, cwd}) {\n    return {\n      name: 'TeamCity',\n      service: 'teamcity',\n      commit: env.BUILD_VCS_NUMBER,\n      build: env.BUILD_NUMBER,\n      slug: env.TEAMCITY_BUILDCONF_NAME,\n      ...getProperties({env, cwd}),\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}