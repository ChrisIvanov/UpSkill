{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJoinDefinitions = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst mapGetOrSet_1 = require(\"./utilities/mapGetOrSet\");\n\nconst FieldSetScalar = new graphql_1.GraphQLScalarType({\n  name: 'join__FieldSet'\n});\nconst JoinGraphDirective = new graphql_1.GraphQLDirective({\n  name: \"join__graph\",\n  locations: [graphql_1.DirectiveLocation.ENUM_VALUE],\n  args: {\n    name: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    },\n    url: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\n\nfunction getJoinGraphEnum(serviceList) {\n  const sortedServiceList = serviceList.slice().sort((a, b) => a.name.localeCompare(b.name));\n\n  function sanitizeGraphQLName(name) {\n    const alphaNumericUnderscoreOnly = name.replace(/[\\W]/g, '_');\n    const noNumericFirstChar = alphaNumericUnderscoreOnly.match(/^\\d/) ? '_' + alphaNumericUnderscoreOnly : alphaNumericUnderscoreOnly;\n    const noUnderscoreNumericEnding = noNumericFirstChar.match(/_\\d+$/) ? noNumericFirstChar + '_' : noNumericFirstChar;\n    const toUpper = noUnderscoreNumericEnding.toLocaleUpperCase();\n    return toUpper;\n  }\n\n  const sanitizedNameToServiceDefinitions = new Map();\n\n  for (const service of sortedServiceList) {\n    const {\n      name\n    } = service;\n    const sanitized = sanitizeGraphQLName(name);\n    mapGetOrSet_1.mapGetOrSet(sanitizedNameToServiceDefinitions, sanitized, []).push(service);\n  }\n\n  const enumValueNameToServiceDefinition = Object.create(null);\n\n  for (const [sanitizedName, services] of sanitizedNameToServiceDefinitions) {\n    if (services.length === 1) {\n      enumValueNameToServiceDefinition[sanitizedName] = services[0];\n    } else {\n      for (const [index, service] of services.entries()) {\n        enumValueNameToServiceDefinition[`${sanitizedName}_${index + 1}`] = service;\n      }\n    }\n  }\n\n  const entries = Object.entries(enumValueNameToServiceDefinition);\n  return {\n    graphNameToEnumValueName: Object.fromEntries(entries.map(([enumValueName, service]) => [service.name, enumValueName])),\n    JoinGraphEnum: new graphql_1.GraphQLEnumType({\n      name: 'join__Graph',\n      values: Object.fromEntries(entries.map(([enumValueName, service]) => [enumValueName, {\n        value: service\n      }]))\n    })\n  };\n}\n\nfunction getJoinFieldDirective(JoinGraphEnum) {\n  return new graphql_1.GraphQLDirective({\n    name: 'join__field',\n    locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n    args: {\n      graph: {\n        type: JoinGraphEnum\n      },\n      requires: {\n        type: FieldSetScalar\n      },\n      provides: {\n        type: FieldSetScalar\n      }\n    }\n  });\n}\n\nfunction getJoinOwnerDirective(JoinGraphEnum) {\n  return new graphql_1.GraphQLDirective({\n    name: 'join__owner',\n    locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n    args: {\n      graph: {\n        type: new graphql_1.GraphQLNonNull(JoinGraphEnum)\n      }\n    }\n  });\n}\n\nfunction getJoinDefinitions(serviceList) {\n  const {\n    graphNameToEnumValueName,\n    JoinGraphEnum\n  } = getJoinGraphEnum(serviceList);\n  const JoinFieldDirective = getJoinFieldDirective(JoinGraphEnum);\n  const JoinOwnerDirective = getJoinOwnerDirective(JoinGraphEnum);\n  const JoinTypeDirective = new graphql_1.GraphQLDirective({\n    name: 'join__type',\n    locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n    isRepeatable: true,\n    args: {\n      graph: {\n        type: new graphql_1.GraphQLNonNull(JoinGraphEnum)\n      },\n      key: {\n        type: FieldSetScalar\n      }\n    }\n  });\n  return {\n    graphNameToEnumValueName,\n    FieldSetScalar,\n    JoinTypeDirective,\n    JoinFieldDirective,\n    JoinOwnerDirective,\n    JoinGraphEnum,\n    JoinGraphDirective\n  };\n}\n\nexports.getJoinDefinitions = getJoinDefinitions;","map":{"version":3,"sources":["../src/joinSpec.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJoinDefinitions = void 0;\nconst graphql_1 = require(\"graphql\");\nconst mapGetOrSet_1 = require(\"./utilities/mapGetOrSet\");\nconst FieldSetScalar = new graphql_1.GraphQLScalarType({\n    name: 'join__FieldSet',\n});\nconst JoinGraphDirective = new graphql_1.GraphQLDirective({\n    name: \"join__graph\",\n    locations: [graphql_1.DirectiveLocation.ENUM_VALUE],\n    args: {\n        name: {\n            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n        url: {\n            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),\n        },\n    }\n});\nfunction getJoinGraphEnum(serviceList) {\n    const sortedServiceList = serviceList\n        .slice()\n        .sort((a, b) => a.name.localeCompare(b.name));\n    function sanitizeGraphQLName(name) {\n        const alphaNumericUnderscoreOnly = name.replace(/[\\W]/g, '_');\n        const noNumericFirstChar = alphaNumericUnderscoreOnly.match(/^\\d/)\n            ? '_' + alphaNumericUnderscoreOnly\n            : alphaNumericUnderscoreOnly;\n        const noUnderscoreNumericEnding = noNumericFirstChar.match(/_\\d+$/)\n            ? noNumericFirstChar + '_'\n            : noNumericFirstChar;\n        const toUpper = noUnderscoreNumericEnding.toLocaleUpperCase();\n        return toUpper;\n    }\n    const sanitizedNameToServiceDefinitions = new Map();\n    for (const service of sortedServiceList) {\n        const { name } = service;\n        const sanitized = sanitizeGraphQLName(name);\n        mapGetOrSet_1.mapGetOrSet(sanitizedNameToServiceDefinitions, sanitized, []).push(service);\n    }\n    const enumValueNameToServiceDefinition = Object.create(null);\n    for (const [sanitizedName, services] of sanitizedNameToServiceDefinitions) {\n        if (services.length === 1) {\n            enumValueNameToServiceDefinition[sanitizedName] = services[0];\n        }\n        else {\n            for (const [index, service] of services.entries()) {\n                enumValueNameToServiceDefinition[`${sanitizedName}_${index + 1}`] = service;\n            }\n        }\n    }\n    const entries = Object.entries(enumValueNameToServiceDefinition);\n    return {\n        graphNameToEnumValueName: Object.fromEntries(entries.map(([enumValueName, service]) => [service.name, enumValueName])),\n        JoinGraphEnum: new graphql_1.GraphQLEnumType({\n            name: 'join__Graph',\n            values: Object.fromEntries(entries.map(([enumValueName, service]) => [\n                enumValueName,\n                { value: service },\n            ])),\n        }),\n    };\n}\nfunction getJoinFieldDirective(JoinGraphEnum) {\n    return new graphql_1.GraphQLDirective({\n        name: 'join__field',\n        locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n        args: {\n            graph: {\n                type: JoinGraphEnum,\n            },\n            requires: {\n                type: FieldSetScalar,\n            },\n            provides: {\n                type: FieldSetScalar,\n            },\n        },\n    });\n}\nfunction getJoinOwnerDirective(JoinGraphEnum) {\n    return new graphql_1.GraphQLDirective({\n        name: 'join__owner',\n        locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n        args: {\n            graph: {\n                type: new graphql_1.GraphQLNonNull(JoinGraphEnum),\n            },\n        },\n    });\n}\nfunction getJoinDefinitions(serviceList) {\n    const { graphNameToEnumValueName, JoinGraphEnum } = getJoinGraphEnum(serviceList);\n    const JoinFieldDirective = getJoinFieldDirective(JoinGraphEnum);\n    const JoinOwnerDirective = getJoinOwnerDirective(JoinGraphEnum);\n    const JoinTypeDirective = new graphql_1.GraphQLDirective({\n        name: 'join__type',\n        locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n        isRepeatable: true,\n        args: {\n            graph: {\n                type: new graphql_1.GraphQLNonNull(JoinGraphEnum),\n            },\n            key: {\n                type: FieldSetScalar,\n            },\n        },\n    });\n    return {\n        graphNameToEnumValueName,\n        FieldSetScalar,\n        JoinTypeDirective,\n        JoinFieldDirective,\n        JoinOwnerDirective,\n        JoinGraphEnum,\n        JoinGraphDirective,\n    };\n}\nexports.getJoinDefinitions = getJoinDefinitions;\n//# sourceMappingURL=joinSpec.js.map"]},"metadata":{},"sourceType":"script"}