{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nimport { isArrayBuffer } from \"./Utils\";\n/** @private */\n\nexport class HandshakeProtocol {\n  // Handshake request is always JSON\n  writeHandshakeRequest(handshakeRequest) {\n    return TextMessageFormat.write(JSON.stringify(handshakeRequest));\n  }\n\n  parseHandshakeResponse(data) {\n    let messageData;\n    let remainingData;\n\n    if (isArrayBuffer(data)) {\n      // Format is binary but still need to read JSON text from handshake response\n      const binaryData = new Uint8Array(data);\n      const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      const responseLength = separatorIndex + 1;\n      messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\n      remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n    } else {\n      const textData = data;\n      const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      const responseLength = separatorIndex + 1;\n      messageData = textData.substring(0, responseLength);\n      remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n    } // At this point we should have just the single handshake message\n\n\n    const messages = TextMessageFormat.parse(messageData);\n    const response = JSON.parse(messages[0]);\n\n    if (response.type) {\n      throw new Error(\"Expected a handshake response from the server.\");\n    }\n\n    const responseMessage = response; // multiple messages could have arrived with handshake\n    // return additional data to be parsed as usual, or null if all parsed\n\n    return [remainingData, responseMessage];\n  }\n\n}","map":{"version":3,"sources":["../../src/HandshakeProtocol.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,aAAT,QAA8B,SAA9B;AAcA;;AACA,OAAM,MAAO,iBAAP,CAAwB;AAC1B;AACO,EAAA,qBAAqB,CAAC,gBAAD,EAA0C;AAClE,WAAO,iBAAiB,CAAC,KAAlB,CAAwB,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAxB,CAAP;AACH;;AAEM,EAAA,sBAAsB,CAAC,IAAD,EAAU;AACnC,QAAI,WAAJ;AACA,QAAI,aAAJ;;AAEA,QAAI,aAAa,CAAC,IAAD,CAAjB,EAAyB;AACrB;AACA,YAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAnB;AACA,YAAM,cAAc,GAAG,UAAU,CAAC,OAAX,CAAmB,iBAAiB,CAAC,mBAArC,CAAvB;;AACA,UAAI,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACvB,cAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACH,OANoB,CAQrB;AACA;;;AACA,YAAM,cAAc,GAAG,cAAc,GAAG,CAAxC;AACA,MAAA,WAAW,GAAG,MAAM,CAAC,YAAP,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,cAApB,CAA3B,CAAhC,CAAd;AACA,MAAA,aAAa,GAAI,UAAU,CAAC,UAAX,GAAwB,cAAzB,GAA2C,UAAU,CAAC,KAAX,CAAiB,cAAjB,EAAiC,MAA5E,GAAqF,IAArG;AACH,KAbD,MAaO;AACH,YAAM,QAAQ,GAAW,IAAzB;AACA,YAAM,cAAc,GAAG,QAAQ,CAAC,OAAT,CAAiB,iBAAiB,CAAC,eAAnC,CAAvB;;AACA,UAAI,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACvB,cAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACH,OALE,CAOH;AACA;;;AACA,YAAM,cAAc,GAAG,cAAc,GAAG,CAAxC;AACA,MAAA,WAAW,GAAG,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,cAAtB,CAAd;AACA,MAAA,aAAa,GAAI,QAAQ,CAAC,MAAT,GAAkB,cAAnB,GAAqC,QAAQ,CAAC,SAAT,CAAmB,cAAnB,CAArC,GAA0E,IAA1F;AACH,KA7BkC,CA+BnC;;;AACA,UAAM,QAAQ,GAAG,iBAAiB,CAAC,KAAlB,CAAwB,WAAxB,CAAjB;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,CAAD,CAAnB,CAAjB;;AACA,QAAI,QAAQ,CAAC,IAAb,EAAmB;AACf,YAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,UAAM,eAAe,GAA6B,QAAlD,CArCmC,CAuCnC;AACA;;AACA,WAAO,CAAC,aAAD,EAAgB,eAAhB,CAAP;AACH;;AAhDyB","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}