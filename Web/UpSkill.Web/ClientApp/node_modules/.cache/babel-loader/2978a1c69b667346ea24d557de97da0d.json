{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyFieldsMissingOnBase = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst keyFieldsMissingOnBase = ({\n  schema,\n  serviceList\n}) => {\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n    const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n\n    if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.keys) {\n      const allFieldsInType = namedType.getFields();\n\n      for (const [serviceName, selectionSets = []] of Object.entries(typeFederationMetadata.keys)) {\n        for (const selectionSet of selectionSets) {\n          for (const field of selectionSet) {\n            const name = field.name.value;\n            const matchingField = allFieldsInType[name];\n\n            if (matchingField) {\n              const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n              const selectionSetNode = !utils_1.isDirectiveDefinitionNode(typeNode) ? utils_1.findSelectionSetOnNode(typeNode, 'key', utils_1.printFieldSet(selectionSet)) : undefined;\n              const fieldFederationMetadata = utils_1.getFederationMetadata(matchingField);\n\n              if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName) {\n                errors.push(utils_1.errorWithCode('KEY_FIELDS_MISSING_ON_BASE', utils_1.logServiceAndType(serviceName, typeName) + `A @key selects ${name}, but ${typeName}.${name} was either created or overwritten by ${fieldFederationMetadata.serviceName}, not ${serviceName}`, selectionSetNode));\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexports.keyFieldsMissingOnBase = keyFieldsMissingOnBase;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/keyFieldsMissingOnBase.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAMO,MAAM,sBAAsB,GAA6B,CAAC;AAC/D,EAAA,MAD+D;AAE/D,EAAA;AAF+D,CAAD,KAG3D;AACH,QAAM,MAAM,GAAmB,EAA/B;AAEA,QAAM,KAAK,GAAG,MAAM,CAAC,UAAP,EAAd;;AACA,OAAK,MAAM,CAAC,QAAD,EAAW,SAAX,CAAX,IAAoC,MAAM,CAAC,OAAP,CAAe,KAAf,CAApC,EAA2D;AACzD,QAAI,CAAC,SAAA,CAAA,YAAA,CAAa,SAAb,CAAL,EAA8B;AAE9B,UAAM,sBAAsB,GAAG,OAAA,CAAA,qBAAA,CAAsB,SAAtB,CAA/B;;AACA,QAAI,sBAAsB,KAAA,IAAtB,IAAA,sBAAsB,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAA,sBAAsB,CAAE,IAA5B,EAAkC;AAChC,YAAM,eAAe,GAAG,SAAS,CAAC,SAAV,EAAxB;;AACA,WAAK,MAAM,CAAC,WAAD,EAAc,aAAa,GAAG,EAA9B,CAAX,IAAgD,MAAM,CAAC,OAAP,CAC9C,sBAAsB,CAAC,IADuB,CAAhD,EAEG;AACD,aAAK,MAAM,YAAX,IAA2B,aAA3B,EAA0C;AACxC,eAAK,MAAM,KAAX,IAAoB,YAApB,EAAiD;AAC/C,kBAAM,IAAI,GAAG,KAAK,CAAC,IAAN,CAAW,KAAxB;AAGA,kBAAM,aAAa,GAAG,eAAe,CAAC,IAAD,CAArC;;AAIA,gBAAI,aAAJ,EAAmB;AACjB,oBAAM,QAAQ,GAAG,OAAA,CAAA,yBAAA,CAA0B,QAA1B,EAAoC,WAApC,EAAiD,WAAjD,CAAjB;AACA,oBAAM,gBAAgB,GAAG,CAAC,OAAA,CAAA,yBAAA,CAA0B,QAA1B,CAAD,GACvB,OAAA,CAAA,sBAAA,CAAuB,QAAvB,EAAiC,KAAjC,EAAwC,OAAA,CAAA,aAAA,CAAc,YAAd,CAAxC,CADuB,GACgD,SADzE;AAGA,oBAAM,uBAAuB,GAAG,OAAA,CAAA,qBAAA,CAAsB,aAAtB,CAAhC;;AAEA,kBAAI,uBAAuB,KAAA,IAAvB,IAAA,uBAAuB,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAA,uBAAuB,CAAE,WAA7B,EAA0C;AACxC,gBAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,4BADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,IACE,kBAAkB,IAAI,SAAS,QAAQ,IAAI,IAAI,yCAAyC,uBAAuB,CAAC,WAAW,SAAS,WAAW,EAHnJ,EAIE,gBAJF,CADF;AAQD;AACF;AACF;AACF;AACF;AACF;AACF;;AAED,SAAO,MAAP;AACD,CAlDM;;AAAM,OAAA,CAAA,sBAAA,GAAsB,sBAAtB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keyFieldsMissingOnBase = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst keyFieldsMissingOnBase = ({ schema, serviceList, }) => {\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n        if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.keys) {\n            const allFieldsInType = namedType.getFields();\n            for (const [serviceName, selectionSets = []] of Object.entries(typeFederationMetadata.keys)) {\n                for (const selectionSet of selectionSets) {\n                    for (const field of selectionSet) {\n                        const name = field.name.value;\n                        const matchingField = allFieldsInType[name];\n                        if (matchingField) {\n                            const typeNode = utils_1.findTypeNodeInServiceList(typeName, serviceName, serviceList);\n                            const selectionSetNode = !utils_1.isDirectiveDefinitionNode(typeNode) ?\n                                utils_1.findSelectionSetOnNode(typeNode, 'key', utils_1.printFieldSet(selectionSet)) : undefined;\n                            const fieldFederationMetadata = utils_1.getFederationMetadata(matchingField);\n                            if (fieldFederationMetadata === null || fieldFederationMetadata === void 0 ? void 0 : fieldFederationMetadata.serviceName) {\n                                errors.push(utils_1.errorWithCode('KEY_FIELDS_MISSING_ON_BASE', utils_1.logServiceAndType(serviceName, typeName) +\n                                    `A @key selects ${name}, but ${typeName}.${name} was either created or overwritten by ${fieldFederationMetadata.serviceName}, not ${serviceName}`, selectionSetNode));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\nexports.keyFieldsMissingOnBase = keyFieldsMissingOnBase;\n//# sourceMappingURL=keyFieldsMissingOnBase.js.map"]},"metadata":{},"sourceType":"script"}