{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst command_1 = require(\"@oclif/command\");\n\nconst screen_1 = require(\"@oclif/screen\");\n\nconst chalk_1 = tslib_1.__importDefault(require(\"chalk\"));\n\nconst capitalize_1 = tslib_1.__importDefault(require(\"lodash/capitalize\"));\n\nconst sumBy_1 = tslib_1.__importDefault(require(\"lodash/sumBy\"));\n\nconst js_yaml_1 = require(\"js-yaml\");\n\nconst util_1 = require(\"util\");\n\nconst sw = require('string-width');\n\nconst {\n  orderBy\n} = require('natural-orderby');\n\nclass Table {\n  constructor(data, columns, options = {}) {\n    this.data = data; // assign columns\n\n    this.columns = Object.keys(columns).map(key => {\n      const col = columns[key];\n      const extended = col.extended || false;\n\n      const get = col.get || (row => row[key]);\n\n      const header = typeof col.header === 'string' ? col.header : capitalize_1.default(key.replace(/_/g, ' '));\n      const minWidth = Math.max(col.minWidth || 0, sw(header) + 1);\n      return {\n        extended,\n        get,\n        header,\n        key,\n        minWidth\n      };\n    }); // assign options\n\n    const {\n      columns: cols,\n      filter,\n      csv,\n      output,\n      extended,\n      sort,\n      title,\n      printLine\n    } = options;\n    this.options = {\n      columns: cols,\n      output: csv ? 'csv' : output,\n      extended,\n      filter,\n      'no-header': options['no-header'] || false,\n      'no-truncate': options['no-truncate'] || false,\n      printLine: printLine || (s => process.stdout.write(s + '\\n')),\n      rowStart: ' ',\n      sort,\n      title\n    };\n  }\n\n  display() {\n    // build table rows from input array data\n    let rows = this.data.map(d => {\n      const row = {};\n\n      for (const col of this.columns) {\n        let val = col.get(d);\n        if (typeof val !== 'string') val = util_1.inspect(val, {\n          breakLength: Infinity\n        });\n        row[col.key] = val;\n      }\n\n      return row;\n    }); // filter rows\n\n    if (this.options.filter) {\n      /* eslint-disable-next-line prefer-const */\n      let [header, regex] = this.options.filter.split('=');\n      const isNot = header[0] === '-';\n      if (isNot) header = header.substr(1);\n      const col = this.findColumnFromHeader(header);\n      if (!col || !regex) throw new Error('Filter flag has an invalid value');\n      rows = rows.filter(d => {\n        const re = new RegExp(regex);\n        const val = d[col.key];\n        const match = val.match(re);\n        return isNot ? !match : match;\n      });\n    } // sort rows\n\n\n    if (this.options.sort) {\n      const sorters = this.options.sort.split(',');\n      const sortHeaders = sorters.map(k => k[0] === '-' ? k.substr(1) : k);\n      const sortKeys = this.filterColumnsFromHeaders(sortHeaders).map(c => {\n        return v => v[c.key];\n      });\n      const sortKeysOrder = sorters.map(k => k[0] === '-' ? 'desc' : 'asc');\n      rows = orderBy(rows, sortKeys, sortKeysOrder);\n    } // and filter columns\n\n\n    if (this.options.columns) {\n      const filters = this.options.columns.split(',');\n      this.columns = this.filterColumnsFromHeaders(filters);\n    } else if (!this.options.extended) {\n      // show extented columns/properties\n      this.columns = this.columns.filter(c => !c.extended);\n    }\n\n    this.data = rows;\n\n    switch (this.options.output) {\n      case 'csv':\n        this.outputCSV();\n        break;\n\n      case 'json':\n        this.outputJSON();\n        break;\n\n      case 'yaml':\n        this.outputYAML();\n        break;\n\n      default:\n        this.outputTable();\n    }\n  }\n\n  findColumnFromHeader(header) {\n    return this.columns.find(c => c.header.toLowerCase() === header.toLowerCase());\n  }\n\n  filterColumnsFromHeaders(filters) {\n    // unique\n    filters = [...new Set(filters)];\n    const cols = [];\n    filters.forEach(f => {\n      const c = this.columns.find(c => c.header.toLowerCase() === f.toLowerCase());\n      if (c) cols.push(c);\n    });\n    return cols;\n  }\n\n  getCSVRow(d) {\n    const values = this.columns.map(col => d[col.key] || '');\n\n    const needToBeEscapedForCsv = e => {\n      // CSV entries containing line breaks, comma or double quotes\n      // as specified in https://tools.ietf.org/html/rfc4180#section-2\n      return e.includes('\"') || e.includes('\\n') || e.includes('\\r\\n') || e.includes('\\r') || e.includes(',');\n    };\n\n    const lineToBeEscaped = values.find(needToBeEscapedForCsv);\n    return values.map(e => lineToBeEscaped ? `\"${e.replace('\"', '\"\"')}\"` : e);\n  }\n\n  resolveColumnsToObjectArray() {\n    // tslint:disable-next-line:no-this-assignment\n    const {\n      data,\n      columns\n    } = this;\n    return data.map(d => {\n      return columns.reduce((obj, col) => {\n        return Object.assign(Object.assign({}, obj), {\n          [col.key]: d[col.key] || ''\n        });\n      }, {});\n    });\n  }\n\n  outputJSON() {\n    this.options.printLine(JSON.stringify(this.resolveColumnsToObjectArray(), undefined, 2));\n  }\n\n  outputYAML() {\n    this.options.printLine(js_yaml_1.safeDump(this.resolveColumnsToObjectArray()));\n  }\n\n  outputCSV() {\n    // tslint:disable-next-line:no-this-assignment\n    const {\n      data,\n      columns,\n      options\n    } = this;\n\n    if (!options['no-header']) {\n      options.printLine(columns.map(c => c.header).join(','));\n    }\n\n    data.forEach(d => {\n      const row = this.getCSVRow(d);\n      options.printLine(row.join(','));\n    });\n  }\n\n  outputTable() {\n    // tslint:disable-next-line:no-this-assignment\n    const {\n      data,\n      columns,\n      options\n    } = this; // column truncation\n    //\n    // find max width for each column\n\n    for (const col of columns) {\n      // convert multi-line cell to single longest line\n      // for width calculations\n      const widthData = data.map(row => {\n        const d = row[col.key];\n        const manyLines = d.split('\\n');\n\n        if (manyLines.length > 1) {\n          return '*'.repeat(Math.max(...manyLines.map(r => sw(r))));\n        }\n\n        return d;\n      });\n      const widths = ['.'.padEnd(col.minWidth - 1), col.header, ...widthData.map(row => row)].map(r => sw(r));\n      col.maxWidth = Math.max(...widths) + 1;\n      col.width = col.maxWidth;\n    } // terminal width\n\n\n    const maxWidth = screen_1.stdtermwidth - 2; // truncation logic\n\n    const shouldShorten = () => {\n      // don't shorten if full mode\n      if (options['no-truncate'] || !process.stdout.isTTY && !process.env.CLI_UX_SKIP_TTY_CHECK) return; // don't shorten if there is enough screen width\n\n      const dataMaxWidth = sumBy_1.default(columns, c => c.width);\n      const overWidth = dataMaxWidth - maxWidth;\n      if (overWidth <= 0) return; // not enough room, short all columns to minWidth\n\n      for (const col of columns) {\n        col.width = col.minWidth;\n      } // if sum(minWidth's) is greater than term width\n      // nothing can be done so\n      // display all as minWidth\n\n\n      const dataMinWidth = sumBy_1.default(columns, c => c.minWidth);\n      if (dataMinWidth >= maxWidth) return; // some wiggle room left, add it back to \"needy\" columns\n\n      let wiggleRoom = maxWidth - dataMinWidth;\n      const needyCols = columns.map(c => ({\n        key: c.key,\n        needs: c.maxWidth - c.width\n      })).sort((a, b) => a.needs - b.needs);\n\n      for (const {\n        key,\n        needs\n      } of needyCols) {\n        if (!needs) continue;\n        const col = columns.find(c => key === c.key);\n        if (!col) continue;\n\n        if (wiggleRoom > needs) {\n          col.width = col.width + needs;\n          wiggleRoom -= needs;\n        } else if (wiggleRoom) {\n          col.width = col.width + wiggleRoom;\n          wiggleRoom = 0;\n        }\n      }\n    };\n\n    shouldShorten(); // print table title\n\n    if (options.title) {\n      options.printLine(options.title); // print title divider\n\n      options.printLine(''.padEnd(columns.reduce((sum, col) => sum + col.width, 1), '='));\n      options.rowStart = '| ';\n    } // print headers\n\n\n    if (!options['no-header']) {\n      let headers = options.rowStart;\n\n      for (const col of columns) {\n        const header = col.header;\n        headers += header.padEnd(col.width);\n      }\n\n      options.printLine(chalk_1.default.bold(headers)); // print header dividers\n\n      let dividers = options.rowStart;\n\n      for (const col of columns) {\n        const divider = ''.padEnd(col.width - 1, '─') + ' ';\n        dividers += divider.padEnd(col.width);\n      }\n\n      options.printLine(chalk_1.default.bold(dividers));\n    } // print rows\n\n\n    for (const row of data) {\n      // find max number of lines\n      // for all cells in a row\n      // with multi-line strings\n      let numOfLines = 1;\n\n      for (const col of columns) {\n        const d = row[col.key];\n        const lines = d.split('\\n').length;\n        if (lines > numOfLines) numOfLines = lines;\n      }\n\n      const linesIndexess = [...new Array(numOfLines).keys()]; // print row\n      // including multi-lines\n\n      linesIndexess.forEach(i => {\n        let l = options.rowStart;\n\n        for (const col of columns) {\n          const width = col.width;\n          let d = row[col.key];\n          d = d.split('\\n')[i] || '';\n          const visualWidth = sw(d);\n          const colorWidth = d.length - visualWidth;\n          let cell = d.padEnd(width + colorWidth);\n\n          if (cell.length - colorWidth > width || visualWidth === width) {\n            cell = cell.slice(0, width - 2) + '… ';\n          }\n\n          l += cell;\n        }\n\n        options.printLine(l);\n      });\n    }\n  }\n\n}\n\nfunction table(data, columns, options = {}) {\n  new Table(data, columns, options).display();\n}\n\nexports.table = table;\n\n(function (table) {\n  table.Flags = {\n    columns: command_1.flags.string({\n      exclusive: ['extended'],\n      description: 'only show provided columns (comma-separated)'\n    }),\n    sort: command_1.flags.string({\n      description: 'property to sort by (prepend \\'-\\' for descending)'\n    }),\n    filter: command_1.flags.string({\n      description: 'filter property by partial string matching, ex: name=foo'\n    }),\n    csv: command_1.flags.boolean({\n      exclusive: ['no-truncate'],\n      description: 'output is csv format [alias: --output=csv]'\n    }),\n    output: command_1.flags.string({\n      exclusive: ['no-truncate', 'csv'],\n      description: 'output in a more machine friendly format',\n      options: ['csv', 'json', 'yaml']\n    }),\n    extended: command_1.flags.boolean({\n      exclusive: ['columns'],\n      char: 'x',\n      description: 'show extra columns'\n    }),\n    'no-truncate': command_1.flags.boolean({\n      exclusive: ['csv'],\n      description: 'do not truncate output to fit screen'\n    }),\n    'no-header': command_1.flags.boolean({\n      exclusive: ['csv'],\n      description: 'hide table header from output'\n    })\n  }; // eslint-disable-next-line no-inner-declarations\n\n  function flags(opts) {\n    if (opts) {\n      const f = {};\n      const o = (opts.only && typeof opts.only === 'string' ? [opts.only] : opts.only) || Object.keys(table.Flags);\n      const e = (opts.except && typeof opts.except === 'string' ? [opts.except] : opts.except) || [];\n      o.forEach(key => {\n        if (e.includes(key)) return;\n        f[key] = table.Flags[key];\n      });\n      return f;\n    }\n\n    return table.Flags;\n  }\n\n  table.flags = flags;\n})(table = exports.table || (exports.table = {}));","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/cli-ux/lib/styled/table.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","command_1","screen_1","chalk_1","__importDefault","capitalize_1","sumBy_1","js_yaml_1","util_1","sw","orderBy","Table","constructor","data","columns","options","keys","map","key","col","extended","get","row","header","default","replace","minWidth","Math","max","cols","filter","csv","output","sort","title","printLine","s","process","stdout","write","rowStart","display","rows","d","val","inspect","breakLength","Infinity","regex","split","isNot","substr","findColumnFromHeader","Error","re","RegExp","match","sorters","sortHeaders","k","sortKeys","filterColumnsFromHeaders","c","v","sortKeysOrder","filters","outputCSV","outputJSON","outputYAML","outputTable","find","toLowerCase","Set","forEach","f","push","getCSVRow","values","needToBeEscapedForCsv","e","includes","lineToBeEscaped","resolveColumnsToObjectArray","reduce","obj","assign","JSON","stringify","undefined","safeDump","join","widthData","manyLines","length","repeat","r","widths","padEnd","maxWidth","width","stdtermwidth","shouldShorten","isTTY","env","CLI_UX_SKIP_TTY_CHECK","dataMaxWidth","overWidth","dataMinWidth","wiggleRoom","needyCols","needs","a","b","sum","headers","bold","dividers","divider","numOfLines","lines","linesIndexess","Array","i","l","visualWidth","colorWidth","cell","slice","table","Flags","flags","string","exclusive","description","boolean","char","opts","o","only","except"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst command_1 = require(\"@oclif/command\");\nconst screen_1 = require(\"@oclif/screen\");\nconst chalk_1 = tslib_1.__importDefault(require(\"chalk\"));\nconst capitalize_1 = tslib_1.__importDefault(require(\"lodash/capitalize\"));\nconst sumBy_1 = tslib_1.__importDefault(require(\"lodash/sumBy\"));\nconst js_yaml_1 = require(\"js-yaml\");\nconst util_1 = require(\"util\");\nconst sw = require('string-width');\nconst { orderBy } = require('natural-orderby');\nclass Table {\n    constructor(data, columns, options = {}) {\n        this.data = data;\n        // assign columns\n        this.columns = Object.keys(columns).map((key) => {\n            const col = columns[key];\n            const extended = col.extended || false;\n            const get = col.get || ((row) => row[key]);\n            const header = typeof col.header === 'string' ? col.header : capitalize_1.default(key.replace(/_/g, ' '));\n            const minWidth = Math.max(col.minWidth || 0, sw(header) + 1);\n            return {\n                extended,\n                get,\n                header,\n                key,\n                minWidth,\n            };\n        });\n        // assign options\n        const { columns: cols, filter, csv, output, extended, sort, title, printLine } = options;\n        this.options = {\n            columns: cols,\n            output: csv ? 'csv' : output,\n            extended,\n            filter,\n            'no-header': options['no-header'] || false,\n            'no-truncate': options['no-truncate'] || false,\n            printLine: printLine || ((s) => process.stdout.write(s + '\\n')),\n            rowStart: ' ',\n            sort,\n            title,\n        };\n    }\n    display() {\n        // build table rows from input array data\n        let rows = this.data.map(d => {\n            const row = {};\n            for (const col of this.columns) {\n                let val = col.get(d);\n                if (typeof val !== 'string')\n                    val = util_1.inspect(val, { breakLength: Infinity });\n                row[col.key] = val;\n            }\n            return row;\n        });\n        // filter rows\n        if (this.options.filter) {\n            /* eslint-disable-next-line prefer-const */\n            let [header, regex] = this.options.filter.split('=');\n            const isNot = header[0] === '-';\n            if (isNot)\n                header = header.substr(1);\n            const col = this.findColumnFromHeader(header);\n            if (!col || !regex)\n                throw new Error('Filter flag has an invalid value');\n            rows = rows.filter((d) => {\n                const re = new RegExp(regex);\n                const val = d[col.key];\n                const match = val.match(re);\n                return isNot ? !match : match;\n            });\n        }\n        // sort rows\n        if (this.options.sort) {\n            const sorters = this.options.sort.split(',');\n            const sortHeaders = sorters.map(k => k[0] === '-' ? k.substr(1) : k);\n            const sortKeys = this.filterColumnsFromHeaders(sortHeaders).map(c => {\n                return ((v) => v[c.key]);\n            });\n            const sortKeysOrder = sorters.map(k => k[0] === '-' ? 'desc' : 'asc');\n            rows = orderBy(rows, sortKeys, sortKeysOrder);\n        }\n        // and filter columns\n        if (this.options.columns) {\n            const filters = this.options.columns.split(',');\n            this.columns = this.filterColumnsFromHeaders(filters);\n        }\n        else if (!this.options.extended) {\n            // show extented columns/properties\n            this.columns = this.columns.filter(c => !c.extended);\n        }\n        this.data = rows;\n        switch (this.options.output) {\n            case 'csv':\n                this.outputCSV();\n                break;\n            case 'json':\n                this.outputJSON();\n                break;\n            case 'yaml':\n                this.outputYAML();\n                break;\n            default:\n                this.outputTable();\n        }\n    }\n    findColumnFromHeader(header) {\n        return this.columns.find(c => c.header.toLowerCase() === header.toLowerCase());\n    }\n    filterColumnsFromHeaders(filters) {\n        // unique\n        filters = [...(new Set(filters))];\n        const cols = [];\n        filters.forEach(f => {\n            const c = this.columns.find(c => c.header.toLowerCase() === f.toLowerCase());\n            if (c)\n                cols.push(c);\n        });\n        return cols;\n    }\n    getCSVRow(d) {\n        const values = this.columns.map(col => d[col.key] || '');\n        const needToBeEscapedForCsv = (e) => {\n            // CSV entries containing line breaks, comma or double quotes\n            // as specified in https://tools.ietf.org/html/rfc4180#section-2\n            return e.includes('\"') || e.includes('\\n') || e.includes('\\r\\n') || e.includes('\\r') || e.includes(',');\n        };\n        const lineToBeEscaped = values.find(needToBeEscapedForCsv);\n        return values.map(e => lineToBeEscaped ? `\"${e.replace('\"', '\"\"')}\"` : e);\n    }\n    resolveColumnsToObjectArray() {\n        // tslint:disable-next-line:no-this-assignment\n        const { data, columns } = this;\n        return data.map((d) => {\n            return columns.reduce((obj, col) => {\n                return Object.assign(Object.assign({}, obj), { [col.key]: d[col.key] || '' });\n            }, {});\n        });\n    }\n    outputJSON() {\n        this.options.printLine(JSON.stringify(this.resolveColumnsToObjectArray(), undefined, 2));\n    }\n    outputYAML() {\n        this.options.printLine(js_yaml_1.safeDump(this.resolveColumnsToObjectArray()));\n    }\n    outputCSV() {\n        // tslint:disable-next-line:no-this-assignment\n        const { data, columns, options } = this;\n        if (!options['no-header']) {\n            options.printLine(columns.map(c => c.header).join(','));\n        }\n        data.forEach((d) => {\n            const row = this.getCSVRow(d);\n            options.printLine(row.join(','));\n        });\n    }\n    outputTable() {\n        // tslint:disable-next-line:no-this-assignment\n        const { data, columns, options } = this;\n        // column truncation\n        //\n        // find max width for each column\n        for (const col of columns) {\n            // convert multi-line cell to single longest line\n            // for width calculations\n            const widthData = data.map((row) => {\n                const d = row[col.key];\n                const manyLines = d.split('\\n');\n                if (manyLines.length > 1) {\n                    return '*'.repeat(Math.max(...manyLines.map((r) => sw(r))));\n                }\n                return d;\n            });\n            const widths = ['.'.padEnd(col.minWidth - 1), col.header, ...widthData.map((row) => row)].map(r => sw(r));\n            col.maxWidth = Math.max(...widths) + 1;\n            col.width = col.maxWidth;\n        }\n        // terminal width\n        const maxWidth = screen_1.stdtermwidth - 2;\n        // truncation logic\n        const shouldShorten = () => {\n            // don't shorten if full mode\n            if (options['no-truncate'] || (!process.stdout.isTTY && !process.env.CLI_UX_SKIP_TTY_CHECK))\n                return;\n            // don't shorten if there is enough screen width\n            const dataMaxWidth = sumBy_1.default(columns, c => c.width);\n            const overWidth = dataMaxWidth - maxWidth;\n            if (overWidth <= 0)\n                return;\n            // not enough room, short all columns to minWidth\n            for (const col of columns) {\n                col.width = col.minWidth;\n            }\n            // if sum(minWidth's) is greater than term width\n            // nothing can be done so\n            // display all as minWidth\n            const dataMinWidth = sumBy_1.default(columns, c => c.minWidth);\n            if (dataMinWidth >= maxWidth)\n                return;\n            // some wiggle room left, add it back to \"needy\" columns\n            let wiggleRoom = maxWidth - dataMinWidth;\n            const needyCols = columns.map(c => ({ key: c.key, needs: c.maxWidth - c.width })).sort((a, b) => a.needs - b.needs);\n            for (const { key, needs } of needyCols) {\n                if (!needs)\n                    continue;\n                const col = columns.find(c => key === c.key);\n                if (!col)\n                    continue;\n                if (wiggleRoom > needs) {\n                    col.width = col.width + needs;\n                    wiggleRoom -= needs;\n                }\n                else if (wiggleRoom) {\n                    col.width = col.width + wiggleRoom;\n                    wiggleRoom = 0;\n                }\n            }\n        };\n        shouldShorten();\n        // print table title\n        if (options.title) {\n            options.printLine(options.title);\n            // print title divider\n            options.printLine(''.padEnd(columns.reduce((sum, col) => sum + col.width, 1), '='));\n            options.rowStart = '| ';\n        }\n        // print headers\n        if (!options['no-header']) {\n            let headers = options.rowStart;\n            for (const col of columns) {\n                const header = col.header;\n                headers += header.padEnd(col.width);\n            }\n            options.printLine(chalk_1.default.bold(headers));\n            // print header dividers\n            let dividers = options.rowStart;\n            for (const col of columns) {\n                const divider = ''.padEnd(col.width - 1, '─') + ' ';\n                dividers += divider.padEnd(col.width);\n            }\n            options.printLine(chalk_1.default.bold(dividers));\n        }\n        // print rows\n        for (const row of data) {\n            // find max number of lines\n            // for all cells in a row\n            // with multi-line strings\n            let numOfLines = 1;\n            for (const col of columns) {\n                const d = row[col.key];\n                const lines = d.split('\\n').length;\n                if (lines > numOfLines)\n                    numOfLines = lines;\n            }\n            const linesIndexess = [...new Array(numOfLines).keys()];\n            // print row\n            // including multi-lines\n            linesIndexess.forEach((i) => {\n                let l = options.rowStart;\n                for (const col of columns) {\n                    const width = col.width;\n                    let d = row[col.key];\n                    d = d.split('\\n')[i] || '';\n                    const visualWidth = sw(d);\n                    const colorWidth = (d.length - visualWidth);\n                    let cell = d.padEnd(width + colorWidth);\n                    if ((cell.length - colorWidth) > width || visualWidth === width) {\n                        cell = cell.slice(0, width - 2) + '… ';\n                    }\n                    l += cell;\n                }\n                options.printLine(l);\n            });\n        }\n    }\n}\nfunction table(data, columns, options = {}) {\n    new Table(data, columns, options).display();\n}\nexports.table = table;\n(function (table) {\n    table.Flags = {\n        columns: command_1.flags.string({ exclusive: ['extended'], description: 'only show provided columns (comma-separated)' }),\n        sort: command_1.flags.string({ description: 'property to sort by (prepend \\'-\\' for descending)' }),\n        filter: command_1.flags.string({ description: 'filter property by partial string matching, ex: name=foo' }),\n        csv: command_1.flags.boolean({ exclusive: ['no-truncate'], description: 'output is csv format [alias: --output=csv]' }),\n        output: command_1.flags.string({\n            exclusive: ['no-truncate', 'csv'],\n            description: 'output in a more machine friendly format',\n            options: ['csv', 'json', 'yaml'],\n        }),\n        extended: command_1.flags.boolean({ exclusive: ['columns'], char: 'x', description: 'show extra columns' }),\n        'no-truncate': command_1.flags.boolean({ exclusive: ['csv'], description: 'do not truncate output to fit screen' }),\n        'no-header': command_1.flags.boolean({ exclusive: ['csv'], description: 'hide table header from output' }),\n    };\n    // eslint-disable-next-line no-inner-declarations\n    function flags(opts) {\n        if (opts) {\n            const f = {};\n            const o = (opts.only && typeof opts.only === 'string' ? [opts.only] : opts.only) || Object.keys(table.Flags);\n            const e = (opts.except && typeof opts.except === 'string' ? [opts.except] : opts.except) || [];\n            o.forEach((key) => {\n                if (e.includes(key))\n                    return;\n                f[key] = table.Flags[key];\n            });\n            return f;\n        }\n        return table.Flags;\n    }\n    table.flags = flags;\n})(table = exports.table || (exports.table = {}));\n"]},"metadata":{},"sourceType":"script"}