{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// Not exported from index\n\n/** @private */\nexport class TextMessageFormat {\n  static write(output) {\n    return `${output}${TextMessageFormat.RecordSeparator}`;\n  }\n\n  static parse(input) {\n    if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\n      throw new Error(\"Message is incomplete.\");\n    }\n\n    const messages = input.split(TextMessageFormat.RecordSeparator);\n    messages.pop();\n    return messages;\n  }\n\n}\nTextMessageFormat.RecordSeparatorCode = 0x1e;\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);","map":{"version":3,"sources":["../../src/TextMessageFormat.ts"],"names":[],"mappings":"AAAA;AACA;AAEA;;AACA;AACA,OAAM,MAAO,iBAAP,CAAwB;AAIP,SAAL,KAAK,CAAC,MAAD,EAAe;AAC9B,WAAO,GAAG,MAAM,GAAG,iBAAiB,CAAC,eAAe,EAApD;AACH;;AAEkB,SAAL,KAAK,CAAC,KAAD,EAAc;AAC7B,QAAI,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAL,KAA4B,iBAAiB,CAAC,eAAlD,EAAmE;AAC/D,YAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACH;;AAED,UAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,iBAAiB,CAAC,eAA9B,CAAjB;AACA,IAAA,QAAQ,CAAC,GAAT;AACA,WAAO,QAAP;AACH;;AAhByB;AACZ,iBAAA,CAAA,mBAAA,GAAsB,IAAtB;AACA,iBAAA,CAAA,eAAA,GAAkB,MAAM,CAAC,YAAP,CAAoB,iBAAiB,CAAC,mBAAtC,CAAlB","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}