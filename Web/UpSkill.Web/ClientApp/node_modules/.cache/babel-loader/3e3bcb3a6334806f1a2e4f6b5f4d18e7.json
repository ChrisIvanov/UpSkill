{"ast":null,"code":"const process = require('process');\n\nconst git = require('./services/git.js');\n\nconst services = {\n  appveyor: require('./services/appveyor.js'),\n  bamboo: require('./services/bamboo.js'),\n  bitbucket: require('./services/bitbucket.js'),\n  bitrise: require('./services/bitrise.js'),\n  buddy: require('./services/buddy.js'),\n  buildkite: require('./services/buildkite.js'),\n  circleci: require('./services/circleci.js'),\n  cirrus: require('./services/cirrus.js'),\n  cloudflarePages: require('./services/cloudflare-pages.js'),\n  codebuild: require('./services/codebuild.js'),\n  codefresh: require('./services/codefresh.js'),\n  codeship: require('./services/codeship.js'),\n  drone: require('./services/drone.js'),\n  github: require('./services/github.js'),\n  gitlab: require('./services/gitlab.js'),\n  jenkins: require('./services/jenkins.js'),\n  netlify: require('./services/netlify.js'),\n  puppet: require('./services/puppet.js'),\n  sail: require('./services/sail.js'),\n  scrutinizer: require('./services/scrutinizer.js'),\n  semaphore: require('./services/semaphore.js'),\n  shippable: require('./services/shippable.js'),\n  teamcity: require('./services/teamcity.js'),\n  travis: require('./services/travis.js'),\n  vercel: require('./services/vercel.js'),\n  vsts: require('./services/vsts.js'),\n  wercker: require('./services/wercker.js')\n};\n\nmodule.exports = ({\n  env = process.env,\n  cwd = process.cwd()\n} = {}) => {\n  for (const name of Object.keys(services)) {\n    if (services[name].detect({\n      env,\n      cwd\n    })) {\n      return {\n        isCi: true,\n        ...services[name].configuration({\n          env,\n          cwd\n        })\n      };\n    }\n  }\n\n  return {\n    isCi: Boolean(env.CI),\n    ...git.configuration({\n      env,\n      cwd\n    })\n  };\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/env-ci/index.js"],"names":["process","require","git","services","appveyor","bamboo","bitbucket","bitrise","buddy","buildkite","circleci","cirrus","cloudflarePages","codebuild","codefresh","codeship","drone","github","gitlab","jenkins","netlify","puppet","sail","scrutinizer","semaphore","shippable","teamcity","travis","vercel","vsts","wercker","module","exports","env","cwd","name","Object","keys","detect","isCi","configuration","Boolean","CI"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,mBAAD,CAAnB;;AAEA,MAAME,QAAQ,GAAG;AACfC,EAAAA,QAAQ,EAAEH,OAAO,CAAC,wBAAD,CADF;AAEfI,EAAAA,MAAM,EAAEJ,OAAO,CAAC,sBAAD,CAFA;AAGfK,EAAAA,SAAS,EAAEL,OAAO,CAAC,yBAAD,CAHH;AAIfM,EAAAA,OAAO,EAAEN,OAAO,CAAC,uBAAD,CAJD;AAKfO,EAAAA,KAAK,EAAEP,OAAO,CAAC,qBAAD,CALC;AAMfQ,EAAAA,SAAS,EAAER,OAAO,CAAC,yBAAD,CANH;AAOfS,EAAAA,QAAQ,EAAET,OAAO,CAAC,wBAAD,CAPF;AAQfU,EAAAA,MAAM,EAAEV,OAAO,CAAC,sBAAD,CARA;AASfW,EAAAA,eAAe,EAAEX,OAAO,CAAC,gCAAD,CATT;AAUfY,EAAAA,SAAS,EAAEZ,OAAO,CAAC,yBAAD,CAVH;AAWfa,EAAAA,SAAS,EAAEb,OAAO,CAAC,yBAAD,CAXH;AAYfc,EAAAA,QAAQ,EAAEd,OAAO,CAAC,wBAAD,CAZF;AAafe,EAAAA,KAAK,EAAEf,OAAO,CAAC,qBAAD,CAbC;AAcfgB,EAAAA,MAAM,EAAEhB,OAAO,CAAC,sBAAD,CAdA;AAefiB,EAAAA,MAAM,EAAEjB,OAAO,CAAC,sBAAD,CAfA;AAgBfkB,EAAAA,OAAO,EAAElB,OAAO,CAAC,uBAAD,CAhBD;AAiBfmB,EAAAA,OAAO,EAAEnB,OAAO,CAAC,uBAAD,CAjBD;AAkBfoB,EAAAA,MAAM,EAAEpB,OAAO,CAAC,sBAAD,CAlBA;AAmBfqB,EAAAA,IAAI,EAAErB,OAAO,CAAC,oBAAD,CAnBE;AAoBfsB,EAAAA,WAAW,EAAEtB,OAAO,CAAC,2BAAD,CApBL;AAqBfuB,EAAAA,SAAS,EAAEvB,OAAO,CAAC,yBAAD,CArBH;AAsBfwB,EAAAA,SAAS,EAAExB,OAAO,CAAC,yBAAD,CAtBH;AAuBfyB,EAAAA,QAAQ,EAAEzB,OAAO,CAAC,wBAAD,CAvBF;AAwBf0B,EAAAA,MAAM,EAAE1B,OAAO,CAAC,sBAAD,CAxBA;AAyBf2B,EAAAA,MAAM,EAAE3B,OAAO,CAAC,sBAAD,CAzBA;AA0Bf4B,EAAAA,IAAI,EAAE5B,OAAO,CAAC,oBAAD,CA1BE;AA2Bf6B,EAAAA,OAAO,EAAE7B,OAAO,CAAC,uBAAD;AA3BD,CAAjB;;AA8BA8B,MAAM,CAACC,OAAP,GAAiB,CAAC;AAACC,EAAAA,GAAG,GAAGjC,OAAO,CAACiC,GAAf;AAAoBC,EAAAA,GAAG,GAAGlC,OAAO,CAACkC,GAAR;AAA1B,IAA2C,EAA5C,KAAmD;AAClE,OAAK,MAAMC,IAAX,IAAmBC,MAAM,CAACC,IAAP,CAAYlC,QAAZ,CAAnB,EAA0C;AACxC,QAAIA,QAAQ,CAACgC,IAAD,CAAR,CAAeG,MAAf,CAAsB;AAACL,MAAAA,GAAD;AAAMC,MAAAA;AAAN,KAAtB,CAAJ,EAAuC;AACrC,aAAO;AAACK,QAAAA,IAAI,EAAE,IAAP;AAAa,WAAGpC,QAAQ,CAACgC,IAAD,CAAR,CAAeK,aAAf,CAA6B;AAACP,UAAAA,GAAD;AAAMC,UAAAA;AAAN,SAA7B;AAAhB,OAAP;AACD;AACF;;AAED,SAAO;AAACK,IAAAA,IAAI,EAAEE,OAAO,CAACR,GAAG,CAACS,EAAL,CAAd;AAAwB,OAAGxC,GAAG,CAACsC,aAAJ,CAAkB;AAACP,MAAAA,GAAD;AAAMC,MAAAA;AAAN,KAAlB;AAA3B,GAAP;AACD,CARD","sourcesContent":["const process = require('process');\nconst git = require('./services/git.js');\n\nconst services = {\n  appveyor: require('./services/appveyor.js'),\n  bamboo: require('./services/bamboo.js'),\n  bitbucket: require('./services/bitbucket.js'),\n  bitrise: require('./services/bitrise.js'),\n  buddy: require('./services/buddy.js'),\n  buildkite: require('./services/buildkite.js'),\n  circleci: require('./services/circleci.js'),\n  cirrus: require('./services/cirrus.js'),\n  cloudflarePages: require('./services/cloudflare-pages.js'),\n  codebuild: require('./services/codebuild.js'),\n  codefresh: require('./services/codefresh.js'),\n  codeship: require('./services/codeship.js'),\n  drone: require('./services/drone.js'),\n  github: require('./services/github.js'),\n  gitlab: require('./services/gitlab.js'),\n  jenkins: require('./services/jenkins.js'),\n  netlify: require('./services/netlify.js'),\n  puppet: require('./services/puppet.js'),\n  sail: require('./services/sail.js'),\n  scrutinizer: require('./services/scrutinizer.js'),\n  semaphore: require('./services/semaphore.js'),\n  shippable: require('./services/shippable.js'),\n  teamcity: require('./services/teamcity.js'),\n  travis: require('./services/travis.js'),\n  vercel: require('./services/vercel.js'),\n  vsts: require('./services/vsts.js'),\n  wercker: require('./services/wercker.js'),\n};\n\nmodule.exports = ({env = process.env, cwd = process.cwd()} = {}) => {\n  for (const name of Object.keys(services)) {\n    if (services[name].detect({env, cwd})) {\n      return {isCi: true, ...services[name].configuration({env, cwd})};\n    }\n  }\n\n  return {isCi: Boolean(env.CI), ...git.configuration({env, cwd})};\n};\n"]},"metadata":{},"sourceType":"script"}