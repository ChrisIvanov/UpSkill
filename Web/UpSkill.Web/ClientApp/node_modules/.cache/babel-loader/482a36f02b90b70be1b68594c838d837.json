{"ast":null,"code":"var _jsxFileName = \"H:\\\\Programming Repositories\\\\Titans\\\\Web\\\\UpSkill.Web\\\\ClientApp\\\\src\\\\components\\\\Chat\\\\SignalRHubClient.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport ChatContext from \"../../Context/ChatContext\";\nimport notificationContext from \"../../Context/NotificationContext\";\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { Base_URL } from \"../../utils/baseUrlConstant\"; // This is not part of the project: TEST SERVICE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SignalRHubClient(props) {\n  _s();\n\n  const [connection, setConnection] = useState();\n  const [messages, setMessages] = useState([]);\n  const [username, setUserName] = useState('');\n  const [notification, setNotification] = useContext(notificationContext);\n\n  const joinRoom = async name => {\n    try {\n      const connection = new HubConnectionBuilder().withUrl(`${Base_URL}chat`).configureLogging(LogLevel.Information).build();\n      connection.on(\"ReceiveMessage\", receiveMessage);\n      connection.onclose(e => {\n        setConnection();\n        setMessages([]);\n      });\n      setUserName(name || 'Anonymous');\n      await connection.start();\n      await connection.invoke(\"JoinRoom\", {\n        name\n      });\n      let lastMessages = await connection.invoke(\"GetLastMessages\");\n      await Array.prototype.reverse.call(lastMessages).forEach(m => {\n        receiveMessage(m.name, m.message, m.currentTime, name);\n      });\n      setConnection(connection);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const closeConnection = async () => {\n    try {\n      if (!connection) return;\n      await connection.stop();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const receiveMessage = async (messageName, message, currentTime, name) => {\n    try {\n      if (messageName === \"Chat Bot\") {\n        setNotification({\n          type: 'LOGIN_SUCCESS',\n          payload: `${name} has joined the chat!`\n        });\n      } else {\n        setMessages(messages => [...messages, {\n          name: messageName,\n          message,\n          currentTime,\n          isMine: name === messageName\n        }]);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const sendMessage = async message => {\n    try {\n      await connection.invoke(\"Send\", message, username);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n      value: [joinRoom, sendMessage, closeConnection, messages, setMessages, connection],\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SignalRHubClient, \"8640SK6C+6q3GEnmtHxhQBTu0Dw=\");\n\n_c = SignalRHubClient;\nexport default SignalRHubClient;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignalRHubClient\");","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/components/Chat/SignalRHubClient.js"],"names":["React","useState","useContext","ChatContext","notificationContext","HubConnectionBuilder","LogLevel","Base_URL","SignalRHubClient","props","connection","setConnection","messages","setMessages","username","setUserName","notification","setNotification","joinRoom","name","withUrl","configureLogging","Information","build","on","receiveMessage","onclose","e","start","invoke","lastMessages","Array","prototype","reverse","call","forEach","m","message","currentTime","console","log","closeConnection","stop","messageName","type","payload","isMine","sendMessage","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AAEA,SAASC,oBAAT,EAA+BC,QAA/B,QAA+C,oBAA/C;AACA,SAASC,QAAT,QAAyB,6BAAzB,C,CAEA;;;;AACA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAC7B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,EAA5C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkCf,UAAU,CAACE,mBAAD,CAAlD;;AAEA,QAAMc,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC/B,QAAI;AACF,YAAMT,UAAU,GAAG,IAAIL,oBAAJ,GAChBe,OADgB,CACP,GAAEb,QAAS,MADJ,EAEhBc,gBAFgB,CAECf,QAAQ,CAACgB,WAFV,EAGhBC,KAHgB,EAAnB;AAKAb,MAAAA,UAAU,CAACc,EAAX,CAAc,gBAAd,EAAgCC,cAAhC;AAEAf,MAAAA,UAAU,CAACgB,OAAX,CAAmBC,CAAC,IAAI;AACtBhB,QAAAA,aAAa;AACbE,QAAAA,WAAW,CAAC,EAAD,CAAX;AACD,OAHD;AAKAE,MAAAA,WAAW,CAACI,IAAI,IAAI,WAAT,CAAX;AACA,YAAMT,UAAU,CAACkB,KAAX,EAAN;AACA,YAAMlB,UAAU,CAACmB,MAAX,CAAkB,UAAlB,EAA8B;AAAEV,QAAAA;AAAF,OAA9B,CAAN;AACA,UAAIW,YAAY,GAAG,MAAMpB,UAAU,CAACmB,MAAX,CAAkB,iBAAlB,CAAzB;AAEA,YAAME,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BJ,YAA7B,EAA2CK,OAA3C,CAAmDC,CAAC,IAAI;AAC5DX,QAAAA,cAAc,CAACW,CAAC,CAACjB,IAAH,EAAQiB,CAAC,CAACC,OAAV,EAAkBD,CAAC,CAACE,WAApB,EAAiCnB,IAAjC,CAAd;AACD,OAFK,CAAN;AAIAR,MAAAA,aAAa,CAACD,UAAD,CAAb;AACD,KAvBD,CAuBE,OAAOiB,CAAP,EAAU;AACVY,MAAAA,OAAO,CAACC,GAAR,CAAYb,CAAZ;AACD;AACF,GA3BD;;AA6BA,QAAMc,eAAe,GAAG,YAAY;AAClC,QAAI;AACF,UAAI,CAAC/B,UAAL,EAAiB;AACjB,YAAMA,UAAU,CAACgC,IAAX,EAAN;AACD,KAHD,CAGE,OAAOf,CAAP,EAAU;AACVY,MAAAA,OAAO,CAACC,GAAR,CAAYb,CAAZ;AACD;AACF,GAPD;;AASA,QAAMF,cAAc,GAAG,OAAOkB,WAAP,EAAoBN,OAApB,EAA6BC,WAA7B,EAA0CnB,IAA1C,KAAmD;AACtE,QAAI;AACF,UAAGwB,WAAW,KAAK,UAAnB,EAA8B;AAC5B1B,QAAAA,eAAe,CAAC;AAAC2B,UAAAA,IAAI,EAAC,eAAN;AAAuBC,UAAAA,OAAO,EAAG,GAAE1B,IAAK;AAAxC,SAAD,CAAf;AACD,OAFD,MAEM;AACAN,QAAAA,WAAW,CAACD,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAc;AAClCO,UAAAA,IAAI,EAAEwB,WAD4B;AAElCN,UAAAA,OAFkC;AAGlCC,UAAAA,WAHkC;AAIlCQ,UAAAA,MAAM,EAAE3B,IAAI,KAAKwB;AAJiB,SAAd,CAAb,CAAX;AAML;AACH,KAXA,CAWC,OAAOhB,CAAP,EAAU;AACXY,MAAAA,OAAO,CAACC,GAAR,CAAYb,CAAZ;AACD;AACF,GAfD;;AAkBE,QAAMoB,WAAW,GAAG,MAAOV,OAAP,IAAmB;AACvC,QAAI;AACA,YAAM3B,UAAU,CAACmB,MAAX,CAAkB,MAAlB,EAA0BQ,OAA1B,EAAmCvB,QAAnC,CAAN;AACH,KAFD,CAEE,OAAOa,CAAP,EAAU;AACVY,MAAAA,OAAO,CAACC,GAAR,CAAYb,CAAZ;AACD;AACF,GANC;;AASF,sBACI;AAAA,2BACI,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,CAACT,QAAD,EAAW6B,WAAX,EAAwBN,eAAxB,EAAyC7B,QAAzC,EAAmDC,WAAnD,EAAgEH,UAAhE,CAA7B;AAAA,gBACCD,KAAK,CAACuC;AADP;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA9EQxC,gB;;KAAAA,gB;AAgFT,eAAeA,gBAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport ChatContext from \"../../Context/ChatContext\";\r\nimport notificationContext from \"../../Context/NotificationContext\";\r\n\r\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { Base_URL } from \"../../utils/baseUrlConstant\";\r\n\r\n// This is not part of the project: TEST SERVICE\r\nfunction SignalRHubClient(props) {\r\n    const [connection, setConnection] = useState();\r\n    const [messages, setMessages] = useState([]);\r\n    const [username, setUserName] = useState('');\r\n    const [notification, setNotification] = useContext(notificationContext);\r\n  \r\n    const joinRoom = async (name) => {\r\n      try {\r\n        const connection = new HubConnectionBuilder()\r\n          .withUrl(`${Base_URL}chat`)\r\n          .configureLogging(LogLevel.Information)                \r\n          .build();\r\n  \r\n        connection.on(\"ReceiveMessage\", receiveMessage)\r\n        \r\n        connection.onclose(e => {\r\n          setConnection();\r\n          setMessages([]);\r\n        })\r\n  \r\n        setUserName(name || 'Anonymous');\r\n        await connection.start();\r\n        await connection.invoke(\"JoinRoom\", { name });\r\n        let lastMessages = await connection.invoke(\"GetLastMessages\");\r\n  \r\n        await Array.prototype.reverse.call(lastMessages).forEach(m => {\r\n          receiveMessage(m.name,m.message,m.currentTime, name);        \r\n        });\r\n  \r\n        setConnection(connection);  \r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  \r\n    const closeConnection = async () => {\r\n      try {\r\n        if (!connection) return;\r\n        await connection.stop();\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  \r\n    const receiveMessage = async (messageName, message, currentTime, name) => {\r\n        try {\r\n          if(messageName === \"Chat Bot\"){\r\n            setNotification({type:'LOGIN_SUCCESS', payload: `${name} has joined the chat!`})\r\n          } else{\r\n                setMessages(messages => [...messages, {\r\n                    name: messageName,\r\n                    message,\r\n                    currentTime,\r\n                    isMine: name === messageName,\r\n                }]);\r\n          }\r\n       } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  \r\n  \r\n      const sendMessage = async (message) => {\r\n      try {\r\n          await connection.invoke(\"Send\", message, username);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  \r\n    \r\n    return (\r\n        <div>\r\n            <ChatContext.Provider value={[joinRoom, sendMessage, closeConnection, messages, setMessages, connection]} >\r\n            {props.children}\r\n        </ChatContext.Provider >\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignalRHubClient;\r\n"]},"metadata":{},"sourceType":"module"}