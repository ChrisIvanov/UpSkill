{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.externalTypeMismatch = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst externalTypeMismatch = ({\n  schema\n}) => {\n  const errors = [];\n  const types = schema.getTypeMap();\n\n  for (const [typeName, namedType] of Object.entries(types)) {\n    if (!graphql_1.isObjectType(namedType)) continue;\n    const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n\n    if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.externals) {\n      for (const [serviceName, externalFieldsForService] of Object.entries(typeFederationMetadata.externals)) {\n        for (const {\n          field: externalField\n        } of externalFieldsForService) {\n          const externalFieldName = externalField.name.value;\n          const allFields = namedType.getFields();\n          const matchingBaseField = allFields[externalFieldName];\n          const externalFieldType = graphql_1.typeFromAST(schema, externalField.type);\n\n          if (!externalFieldType) {\n            errors.push(utils_1.errorWithCode('EXTERNAL_TYPE_MISMATCH', utils_1.logServiceAndType(serviceName, typeName, externalFieldName) + `the type of the @external field does not exist in the resulting composed schema`, externalField.type));\n          } else if (matchingBaseField && !graphql_1.isEqualType(matchingBaseField.type, externalFieldType)) {\n            errors.push(utils_1.errorWithCode('EXTERNAL_TYPE_MISMATCH', utils_1.logServiceAndType(serviceName, typeName, externalFieldName) + `Type \\`${externalFieldType}\\` does not match the type of the original field in ${typeFederationMetadata.serviceName} (\\`${matchingBaseField.type}\\`)`, externalField.type));\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexports.externalTypeMismatch = externalTypeMismatch;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/externalTypeMismatch.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAOO,MAAM,oBAAoB,GAA6B,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe;AAC3E,QAAM,MAAM,GAAmB,EAA/B;AAEA,QAAM,KAAK,GAAG,MAAM,CAAC,UAAP,EAAd;;AACA,OAAK,MAAM,CAAC,QAAD,EAAW,SAAX,CAAX,IAAoC,MAAM,CAAC,OAAP,CAAe,KAAf,CAApC,EAA2D;AAEzD,QAAI,CAAC,SAAA,CAAA,YAAA,CAAa,SAAb,CAAL,EAA8B;AAI9B,UAAM,sBAAsB,GAAG,OAAA,CAAA,qBAAA,CAAsB,SAAtB,CAA/B;;AACA,QAAI,sBAAsB,KAAA,IAAtB,IAAA,sBAAsB,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAA,sBAAsB,CAAE,SAA5B,EAAuC;AAErC,WAAK,MAAM,CAAC,WAAD,EAAc,wBAAd,CAAX,IAAsD,MAAM,CAAC,OAAP,CACpD,sBAAsB,CAAC,SAD6B,CAAtD,EAEG;AAED,aAAK,MAAM;AAAE,UAAA,KAAK,EAAE;AAAT,SAAX,IAAuC,wBAAvC,EAAiE;AAC/D,gBAAM,iBAAiB,GAAG,aAAa,CAAC,IAAd,CAAmB,KAA7C;AACA,gBAAM,SAAS,GAAG,SAAS,CAAC,SAAV,EAAlB;AACA,gBAAM,iBAAiB,GAAG,SAAS,CAAC,iBAAD,CAAnC;AAKA,gBAAM,iBAAiB,GAAG,SAAA,CAAA,WAAA,CACxB,MADwB,EAExB,aAAa,CAAC,IAFU,CAA1B;;AAKA,cAAI,CAAC,iBAAL,EAAwB;AACtB,YAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,wBADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,EAAyC,iBAAzC,IACE,iFAHJ,EAIE,aAAa,CAAC,IAJhB,CADF;AAQD,WATD,MASO,IACL,iBAAiB,IACjB,CAAC,SAAA,CAAA,WAAA,CAAY,iBAAiB,CAAC,IAA9B,EAAoC,iBAApC,CAFI,EAGL;AACA,YAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,wBADF,EAEE,OAAA,CAAA,iBAAA,CAAkB,WAAlB,EAA+B,QAA/B,EAAyC,iBAAzC,IACE,UAAU,iBAAiB,uDAAuD,sBAAsB,CAAC,WAAW,OAAO,iBAAiB,CAAC,IAAI,KAHrJ,EAIE,aAAa,CAAC,IAJhB,CADF;AAQD;AACF;AACF;AACF;AACF;;AAED,SAAO,MAAP;AACD,CA1DM;;AAAM,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.externalTypeMismatch = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst externalTypeMismatch = ({ schema }) => {\n    const errors = [];\n    const types = schema.getTypeMap();\n    for (const [typeName, namedType] of Object.entries(types)) {\n        if (!graphql_1.isObjectType(namedType))\n            continue;\n        const typeFederationMetadata = utils_1.getFederationMetadata(namedType);\n        if (typeFederationMetadata === null || typeFederationMetadata === void 0 ? void 0 : typeFederationMetadata.externals) {\n            for (const [serviceName, externalFieldsForService] of Object.entries(typeFederationMetadata.externals)) {\n                for (const { field: externalField } of externalFieldsForService) {\n                    const externalFieldName = externalField.name.value;\n                    const allFields = namedType.getFields();\n                    const matchingBaseField = allFields[externalFieldName];\n                    const externalFieldType = graphql_1.typeFromAST(schema, externalField.type);\n                    if (!externalFieldType) {\n                        errors.push(utils_1.errorWithCode('EXTERNAL_TYPE_MISMATCH', utils_1.logServiceAndType(serviceName, typeName, externalFieldName) +\n                            `the type of the @external field does not exist in the resulting composed schema`, externalField.type));\n                    }\n                    else if (matchingBaseField &&\n                        !graphql_1.isEqualType(matchingBaseField.type, externalFieldType)) {\n                        errors.push(utils_1.errorWithCode('EXTERNAL_TYPE_MISMATCH', utils_1.logServiceAndType(serviceName, typeName, externalFieldName) +\n                            `Type \\`${externalFieldType}\\` does not match the type of the original field in ${typeFederationMetadata.serviceName} (\\`${matchingBaseField.type}\\`)`, externalField.type));\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\nexports.externalTypeMismatch = externalTypeMismatch;\n//# sourceMappingURL=externalTypeMismatch.js.map"]},"metadata":{},"sourceType":"script"}