{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\n/** @private */\n\nexport class ServerSentEventsTransport {\n  constructor(httpClient, accessTokenFactory, logger, options) {\n    this._httpClient = httpClient;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logger = logger;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n    this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\"); // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\n\n\n    this._url = url;\n\n    if (this._accessTokenFactory) {\n      const token = await this._accessTokenFactory();\n\n      if (token) {\n        url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      let opened = false;\n\n      if (transferFormat !== TransferFormat.Text) {\n        reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\n        return;\n      }\n\n      let eventSource;\n\n      if (Platform.isBrowser || Platform.isWebWorker) {\n        eventSource = new this._options.EventSource(url, {\n          withCredentials: this._options.withCredentials\n        });\n      } else {\n        // Non-browser passes cookies via the dictionary\n        const cookies = this._httpClient.getCookieString(url);\n\n        const headers = {};\n        headers.Cookie = cookies;\n        const [name, value] = getUserAgentHeader();\n        headers[name] = value;\n        eventSource = new this._options.EventSource(url, {\n          withCredentials: this._options.withCredentials,\n          headers: { ...headers,\n            ...this._options.headers\n          }\n        });\n      }\n\n      try {\n        eventSource.onmessage = e => {\n          if (this.onreceive) {\n            try {\n              this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\n\n              this.onreceive(e.data);\n            } catch (error) {\n              this._close(error);\n\n              return;\n            }\n          }\n        }; // @ts-ignore: not using event on purpose\n\n\n        eventSource.onerror = e => {\n          // EventSource doesn't give any useful information about server side closes.\n          if (opened) {\n            this._close();\n          } else {\n            reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\" + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\" + \" If you have multiple servers check that sticky sessions are enabled.\"));\n          }\n        };\n\n        eventSource.onopen = () => {\n          this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\n\n          this._eventSource = eventSource;\n          opened = true;\n          resolve();\n        };\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  }\n\n  async send(data) {\n    if (!this._eventSource) {\n      return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n    }\n\n    return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\n  }\n\n  stop() {\n    this._close();\n\n    return Promise.resolve();\n  }\n\n  _close(e) {\n    if (this._eventSource) {\n      this._eventSource.close();\n\n      this._eventSource = undefined;\n\n      if (this.onclose) {\n        this.onclose(e);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/ServerSentEventsTransport.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent!)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    } else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}