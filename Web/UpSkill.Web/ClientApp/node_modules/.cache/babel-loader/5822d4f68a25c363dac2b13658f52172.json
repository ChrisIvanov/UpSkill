{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\"); // this code is largely taken from opn\n\n\nconst childProcess = tslib_1.__importStar(require(\"child_process\"));\n\nconst isWsl = require('is-wsl');\n\nfunction open(target, opts = {}) {\n  // opts = {wait: true, ...opts}\n  let cmd;\n  let appArgs = [];\n  let args = [];\n  const cpOpts = {};\n\n  if (Array.isArray(opts.app)) {\n    appArgs = opts.app.slice(1);\n    opts.app = opts.app[0];\n  }\n\n  if (process.platform === 'darwin') {\n    cmd = 'open'; // if (opts.wait) {\n    //   args.push('-W')\n    // }\n\n    if (opts.app) {\n      args.push('-a', opts.app);\n    }\n  } else if (process.platform === 'win32' || isWsl) {\n    cmd = 'cmd' + (isWsl ? '.exe' : '');\n    args.push('/c', 'start', '\"\"', '/b');\n    target = target.replace(/&/g, '^&'); // if (opts.wait) {\n    //   args.push('/wait')\n    // }\n\n    if (opts.app) {\n      args.push(opts.app);\n    }\n\n    if (appArgs.length > 0) {\n      args = args.concat(appArgs);\n    }\n  } else {\n    if (opts.app) {\n      cmd = opts.app;\n    } else {\n      // try local xdg-open\n      cmd = 'xdg-open';\n    }\n\n    if (appArgs.length > 0) {\n      args = args.concat(appArgs);\n    } // if (!opts.wait) {\n    // `xdg-open` will block the process unless\n    // stdio is ignored and it's detached from the parent\n    // even if it's unref'd\n\n\n    cpOpts.stdio = 'ignore';\n    cpOpts.detached = true; // }\n  }\n\n  args.push(target);\n\n  if (process.platform === 'darwin' && appArgs.length > 0) {\n    args.push('--args');\n    args = args.concat(appArgs);\n  }\n\n  const cp = childProcess.spawn(cmd, args, cpOpts);\n  return new Promise((resolve, reject) => {\n    cp.once('error', reject);\n    cp.once('close', code => {\n      if (code > 0) {\n        reject(new Error('Exited with code ' + code));\n        return;\n      }\n\n      resolve(cp);\n    });\n  });\n}\n\nexports.default = open;","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/cli-ux/lib/open.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","childProcess","__importStar","isWsl","open","target","opts","cmd","appArgs","args","cpOpts","Array","isArray","app","slice","process","platform","push","replace","length","concat","stdio","detached","cp","spawn","Promise","resolve","reject","once","code","Error","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\n// this code is largely taken from opn\nconst childProcess = tslib_1.__importStar(require(\"child_process\"));\nconst isWsl = require('is-wsl');\nfunction open(target, opts = {}) {\n    // opts = {wait: true, ...opts}\n    let cmd;\n    let appArgs = [];\n    let args = [];\n    const cpOpts = {};\n    if (Array.isArray(opts.app)) {\n        appArgs = opts.app.slice(1);\n        opts.app = opts.app[0];\n    }\n    if (process.platform === 'darwin') {\n        cmd = 'open';\n        // if (opts.wait) {\n        //   args.push('-W')\n        // }\n        if (opts.app) {\n            args.push('-a', opts.app);\n        }\n    }\n    else if (process.platform === 'win32' || isWsl) {\n        cmd = 'cmd' + (isWsl ? '.exe' : '');\n        args.push('/c', 'start', '\"\"', '/b');\n        target = target.replace(/&/g, '^&');\n        // if (opts.wait) {\n        //   args.push('/wait')\n        // }\n        if (opts.app) {\n            args.push(opts.app);\n        }\n        if (appArgs.length > 0) {\n            args = args.concat(appArgs);\n        }\n    }\n    else {\n        if (opts.app) {\n            cmd = opts.app;\n        }\n        else {\n            // try local xdg-open\n            cmd = 'xdg-open';\n        }\n        if (appArgs.length > 0) {\n            args = args.concat(appArgs);\n        }\n        // if (!opts.wait) {\n        // `xdg-open` will block the process unless\n        // stdio is ignored and it's detached from the parent\n        // even if it's unref'd\n        cpOpts.stdio = 'ignore';\n        cpOpts.detached = true;\n        // }\n    }\n    args.push(target);\n    if (process.platform === 'darwin' && appArgs.length > 0) {\n        args.push('--args');\n        args = args.concat(appArgs);\n    }\n    const cp = childProcess.spawn(cmd, args, cpOpts);\n    return new Promise((resolve, reject) => {\n        cp.once('error', reject);\n        cp.once('close', code => {\n            if (code > 0) {\n                reject(new Error('Exited with code ' + code));\n                return;\n            }\n            resolve(cp);\n        });\n    });\n}\nexports.default = open;\n"]},"metadata":{},"sourceType":"script"}