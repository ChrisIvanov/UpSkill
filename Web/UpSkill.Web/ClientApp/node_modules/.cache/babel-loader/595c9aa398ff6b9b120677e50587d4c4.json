{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { SubjectSubscription } from \"./Utils\";\n/** Stream implementation to stream items to the server. */\n\nexport class Subject {\n  constructor() {\n    this.observers = [];\n  }\n\n  next(item) {\n    for (const observer of this.observers) {\n      observer.next(item);\n    }\n  }\n\n  error(err) {\n    for (const observer of this.observers) {\n      if (observer.error) {\n        observer.error(err);\n      }\n    }\n  }\n\n  complete() {\n    for (const observer of this.observers) {\n      if (observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  subscribe(observer) {\n    this.observers.push(observer);\n    return new SubjectSubscription(this, observer);\n  }\n\n}","map":{"version":3,"sources":["../../src/Subject.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,mBAAT,QAAoC,SAApC;AAEA;;AACA,OAAM,MAAO,OAAP,CAAc;AAOhB,EAAA,WAAA,GAAA;AACI,SAAK,SAAL,GAAiB,EAAjB;AACH;;AAEM,EAAA,IAAI,CAAC,IAAD,EAAQ;AACf,SAAK,MAAM,QAAX,IAAuB,KAAK,SAA5B,EAAuC;AACnC,MAAA,QAAQ,CAAC,IAAT,CAAc,IAAd;AACH;AACJ;;AAEM,EAAA,KAAK,CAAC,GAAD,EAAS;AACjB,SAAK,MAAM,QAAX,IAAuB,KAAK,SAA5B,EAAuC;AACnC,UAAI,QAAQ,CAAC,KAAb,EAAoB;AAChB,QAAA,QAAQ,CAAC,KAAT,CAAe,GAAf;AACH;AACJ;AACJ;;AAEM,EAAA,QAAQ,GAAA;AACX,SAAK,MAAM,QAAX,IAAuB,KAAK,SAA5B,EAAuC;AACnC,UAAI,QAAQ,CAAC,QAAb,EAAuB;AACnB,QAAA,QAAQ,CAAC,QAAT;AACH;AACJ;AACJ;;AAEM,EAAA,SAAS,CAAC,QAAD,EAA+B;AAC3C,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACA,WAAO,IAAI,mBAAJ,CAAwB,IAAxB,EAA8B,QAA9B,CAAP;AACH;;AApCe","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}