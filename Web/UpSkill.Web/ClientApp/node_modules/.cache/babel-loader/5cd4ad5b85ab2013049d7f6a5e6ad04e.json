{"ast":null,"code":"import axios from 'axios';\nimport { Base_URL } from '../utils/baseUrlConstant';\nconst OWN_API_URL = Base_URL + 'Owner/Courses/';\nconst token = localStorage.getItem('token');\nconst numberCoursesToShow = 3;\nconst coursesCompanyOwnerMock = [{\n  id: '8',\n  name: 'August',\n  courses: [{\n    name: 'Python',\n    enrolled: 6\n  }, {\n    name: 'Ruby',\n    enrolled: 5\n  }, {\n    name: 'C++',\n    enrolled: 18\n  }, {\n    name: 'C#',\n    enrolled: 5\n  }, {\n    name: 'Java',\n    enrolled: 3\n  }]\n}, {\n  id: '9',\n  name: 'September',\n  courses: [{\n    name: 'HTML',\n    enrolled: 4\n  }, {\n    name: 'CSS',\n    enrolled: 7\n  }, {\n    name: 'JS',\n    enrolled: 13\n  }, {\n    name: 'C#',\n    enrolled: 8\n  }]\n}, {\n  id: '10',\n  name: 'October',\n  courses: [{\n    name: 'TypeScript',\n    enrolled: 9\n  }, {\n    name: 'Java',\n    enrolled: 1\n  }, {\n    name: 'JS',\n    enrolled: 3\n  }]\n}];\nlet courses = [];\nexport const getAllCourses = async course => {\n  return axios.get(OWN_API_URL + 'getAll', {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }, {\n    course\n  }).then(response => {\n    courses = [];\n    response.data.map(x => courses.push(x));\n    return courses;\n  });\n};\nexport const getActiveCoursesCompanyOwner = async uId => {\n  getAllCourses();\n  return courses.length;\n};\nexport const getCoursesForCompanyOwner = async (uId, currentPage, currentMonth) => {\n  let month = coursesCompanyOwnerMock.filter(m => m.id == currentMonth)[0];\n  let arr = month.courses.slice(0, currentPage * numberCoursesToShow + numberCoursesToShow);\n  return [month.name, arr];\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/services/courseSevice.js"],"names":["axios","Base_URL","OWN_API_URL","token","localStorage","getItem","numberCoursesToShow","coursesCompanyOwnerMock","id","name","courses","enrolled","getAllCourses","course","get","headers","Authorization","then","response","data","map","x","push","getActiveCoursesCompanyOwner","uId","length","getCoursesForCompanyOwner","currentPage","currentMonth","month","filter","m","arr","slice"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { Base_URL } from '../utils/baseUrlConstant';\r\n\r\nconst OWN_API_URL = Base_URL + 'Owner/Courses/';\r\n\r\nconst token = localStorage.getItem('token');\r\n\r\nconst numberCoursesToShow = 3;\r\n\r\nconst coursesCompanyOwnerMock = [\r\n  {\r\n    id: '8',\r\n    name: 'August',\r\n    courses: [\r\n      { name: 'Python', enrolled: 6 },\r\n      { name: 'Ruby', enrolled: 5 },\r\n      { name: 'C++', enrolled: 18 },\r\n      { name: 'C#', enrolled: 5 },\r\n      { name: 'Java', enrolled: 3 },\r\n    ],\r\n  },\r\n  {\r\n    id: '9',\r\n    name: 'September',\r\n    courses: [\r\n      { name: 'HTML', enrolled: 4 },\r\n      { name: 'CSS', enrolled: 7 },\r\n      { name: 'JS', enrolled: 13 },\r\n      { name: 'C#', enrolled: 8 },\r\n    ],\r\n  },\r\n  {\r\n    id: '10',\r\n    name: 'October',\r\n    courses: [\r\n      { name: 'TypeScript', enrolled: 9 },\r\n      { name: 'Java', enrolled: 1 },\r\n      { name: 'JS', enrolled: 3 },\r\n    ],\r\n  },\r\n];\r\n\r\nlet courses = [];\r\n\r\nexport const getAllCourses = async (course) => {\r\n  return axios\r\n    .get(\r\n      OWN_API_URL + 'getAll',\r\n      { headers: { Authorization: `Bearer ${token}` } },\r\n      { course }\r\n    )\r\n    .then((response) => {\r\n      courses = [];\r\n      response.data.map((x) => courses.push(x));\r\n      return courses;\r\n    });\r\n};\r\n\r\nexport const getActiveCoursesCompanyOwner = async (uId) => {\r\n  getAllCourses();\r\n  return courses.length;\r\n};\r\n\r\nexport const getCoursesForCompanyOwner = async (\r\n  uId,\r\n  currentPage,\r\n  currentMonth\r\n) => {\r\n  let month = coursesCompanyOwnerMock.filter((m) => m.id == currentMonth)[0];\r\n  let arr = month.courses.slice(\r\n    0,\r\n    currentPage * numberCoursesToShow + numberCoursesToShow\r\n  );\r\n\r\n  return [month.name, arr];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}