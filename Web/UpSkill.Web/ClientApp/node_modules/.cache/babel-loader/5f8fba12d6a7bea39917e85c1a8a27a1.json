{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _detectNode = _interopRequireDefault(require(\"detect-node\"));\n\nvar _globalthis = _interopRequireDefault(require(\"globalthis\"));\n\nvar _jsonStringifySafe = _interopRequireDefault(require(\"json-stringify-safe\"));\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst globalThis = (0, _globalthis.default)();\nlet domain;\n\nif (_detectNode.default) {\n  // eslint-disable-next-line global-require\n  domain = require('domain');\n}\n\nconst getParentDomainContext = () => {\n  if (!domain) {\n    return {};\n  }\n\n  const parentRoarrContexts = [];\n  let currentDomain = process.domain; // $FlowFixMe\n\n  if (!currentDomain || !currentDomain.parentDomain) {\n    return {};\n  }\n\n  while (currentDomain && currentDomain.parentDomain) {\n    currentDomain = currentDomain.parentDomain;\n\n    if (currentDomain.roarr && currentDomain.roarr.context) {\n      parentRoarrContexts.push(currentDomain.roarr.context);\n    }\n  }\n\n  let domainContext = {};\n\n  for (const parentRoarrContext of parentRoarrContexts) {\n    domainContext = _objectSpread(_objectSpread({}, domainContext), parentRoarrContext);\n  }\n\n  return domainContext;\n};\n\nconst getFirstParentDomainContext = () => {\n  if (!domain) {\n    return {};\n  }\n\n  let currentDomain = process.domain; // $FlowFixMe\n\n  if (currentDomain && currentDomain.roarr && currentDomain.roarr.context) {\n    return currentDomain.roarr.context;\n  } // $FlowFixMe\n\n\n  if (!currentDomain || !currentDomain.parentDomain) {\n    return {};\n  }\n\n  while (currentDomain && currentDomain.parentDomain) {\n    currentDomain = currentDomain.parentDomain;\n\n    if (currentDomain.roarr && currentDomain.roarr.context) {\n      return currentDomain.roarr.context;\n    }\n  }\n\n  return {};\n};\n\nconst createLogger = (onMessage, parentContext) => {\n  // eslint-disable-next-line id-length, unicorn/prevent-abbreviations\n  const log = (a, b, c, d, e, f, g, h, i, k) => {\n    const time = Date.now();\n    const sequence = globalThis.ROARR.sequence++;\n    let context;\n    let message;\n\n    if (typeof a === 'string') {\n      context = _objectSpread(_objectSpread({}, getFirstParentDomainContext()), parentContext || {}); // eslint-disable-next-line id-length, object-property-newline\n\n      const args = _extends({}, {\n        a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        k\n      });\n\n      const values = Object.keys(args).map(key => {\n        return args[key];\n      }); // eslint-disable-next-line unicorn/no-reduce\n\n      const hasOnlyOneParameterValued = 1 === values.reduce((accumulator, value) => {\n        // eslint-disable-next-line no-return-assign, no-param-reassign\n        return accumulator += typeof value === 'undefined' ? 0 : 1;\n      }, 0);\n      message = hasOnlyOneParameterValued ? (0, _sprintfJs.sprintf)('%s', a) : (0, _sprintfJs.sprintf)(a, b, c, d, e, f, g, h, i, k);\n    } else {\n      if (typeof b !== 'string') {\n        throw new TypeError('Message must be a string.');\n      }\n\n      context = JSON.parse((0, _jsonStringifySafe.default)(_objectSpread(_objectSpread(_objectSpread({}, getFirstParentDomainContext()), parentContext || {}), a)));\n      message = (0, _sprintfJs.sprintf)(b, c, d, e, f, g, h, i, k);\n    }\n\n    onMessage({\n      context,\n      message,\n      sequence,\n      time,\n      version: '1.0.0'\n    });\n  };\n\n  log.child = context => {\n    if (typeof context === 'function') {\n      return createLogger(message => {\n        if (typeof context !== 'function') {\n          throw new TypeError('Unexpected state.');\n        }\n\n        onMessage(context(message));\n      }, parentContext);\n    }\n\n    return createLogger(onMessage, _objectSpread(_objectSpread(_objectSpread({}, getFirstParentDomainContext()), parentContext), context));\n  };\n\n  log.getContext = () => {\n    return _objectSpread(_objectSpread({}, getFirstParentDomainContext()), parentContext || {});\n  };\n\n  log.adopt = async (routine, context) => {\n    if (!domain) {\n      return routine();\n    }\n\n    const adoptedDomain = domain.create();\n    return adoptedDomain.run(() => {\n      // $FlowFixMe\n      adoptedDomain.roarr = {\n        context: _objectSpread(_objectSpread({}, getParentDomainContext()), context)\n      };\n      return routine();\n    });\n  };\n\n  for (const logLevel of Object.keys(_constants.logLevels)) {\n    // eslint-disable-next-line id-length, unicorn/prevent-abbreviations\n    log[logLevel] = (a, b, c, d, e, f, g, h, i, k) => {\n      return log.child({\n        logLevel: _constants.logLevels[logLevel]\n      })(a, b, c, d, e, f, g, h, i, k);\n    };\n  } // @see https://github.com/facebook/flow/issues/6705\n  // $FlowFixMe\n\n\n  return log;\n};\n\nvar _default = createLogger;\nexports.default = _default;","map":{"version":3,"sources":["../../src/factories/createLogger.js"],"names":["globalThis","environmentIsNode","domain","require","getParentDomainContext","parentRoarrContexts","currentDomain","process","domainContext","getFirstParentDomainContext","createLogger","log","time","Date","sequence","context","parentContext","args","k","values","key","hasOnlyOneParameterValued","accumulator","message","JSON","onMessage","version","routine","adoptedDomain","Object","logLevels","logLevel"],"mappings":"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","sourcesContent":["// @flow\n\nimport environmentIsNode from 'detect-node';\nimport createGlobalThis from 'globalthis';\nimport stringify from 'json-stringify-safe';\nimport {\n  sprintf,\n} from 'sprintf-js';\nimport {\n  logLevels,\n} from '../constants';\nimport type {\n  LoggerType,\n  MessageContextType,\n  MessageEventHandlerType,\n  TranslateMessageFunctionType,\n} from '../types';\n\nconst globalThis = createGlobalThis();\n\nlet domain;\n\nif (environmentIsNode) {\n  // eslint-disable-next-line global-require\n  domain = require('domain');\n}\n\nconst getParentDomainContext = () => {\n  if (!domain) {\n    return {};\n  }\n\n  const parentRoarrContexts = [];\n\n  let currentDomain = process.domain;\n\n  // $FlowFixMe\n  if (!currentDomain || !currentDomain.parentDomain) {\n    return {};\n  }\n\n  while (currentDomain && currentDomain.parentDomain) {\n    currentDomain = currentDomain.parentDomain;\n\n    if (currentDomain.roarr && currentDomain.roarr.context) {\n      parentRoarrContexts.push(currentDomain.roarr.context);\n    }\n  }\n\n  let domainContext = {};\n\n  for (const parentRoarrContext of parentRoarrContexts) {\n    domainContext = {\n      ...domainContext,\n      ...parentRoarrContext,\n    };\n  }\n\n  return domainContext;\n};\n\nconst getFirstParentDomainContext = () => {\n  if (!domain) {\n    return {};\n  }\n\n  let currentDomain = process.domain;\n\n  // $FlowFixMe\n  if (currentDomain && currentDomain.roarr && currentDomain.roarr.context) {\n    return currentDomain.roarr.context;\n  }\n\n  // $FlowFixMe\n  if (!currentDomain || !currentDomain.parentDomain) {\n    return {};\n  }\n\n  while (currentDomain && currentDomain.parentDomain) {\n    currentDomain = currentDomain.parentDomain;\n\n    if (currentDomain.roarr && currentDomain.roarr.context) {\n      return currentDomain.roarr.context;\n    }\n  }\n\n  return {};\n};\n\nconst createLogger = (onMessage: MessageEventHandlerType, parentContext?: MessageContextType): LoggerType => {\n  // eslint-disable-next-line id-length, unicorn/prevent-abbreviations\n  const log = (a, b, c, d, e, f, g, h, i, k) => {\n    const time = Date.now();\n    const sequence = globalThis.ROARR.sequence++;\n\n    let context;\n    let message;\n\n    if (typeof a === 'string') {\n      context = {\n        ...getFirstParentDomainContext(),\n        ...parentContext || {},\n      };\n      // eslint-disable-next-line id-length, object-property-newline\n      const {...args} = {a, b, c, d, e, f, g, h, i, k};\n      const values = Object.keys(args).map((key) => {\n        return args[key];\n      });\n      // eslint-disable-next-line unicorn/no-reduce\n      const hasOnlyOneParameterValued = 1 === values.reduce((accumulator, value) => {\n        // eslint-disable-next-line no-return-assign, no-param-reassign\n        return accumulator += typeof value === 'undefined' ? 0 : 1;\n      }, 0);\n      message = hasOnlyOneParameterValued ? sprintf('%s', a) : sprintf(a, b, c, d, e, f, g, h, i, k);\n    } else {\n      if (typeof b !== 'string') {\n        throw new TypeError('Message must be a string.');\n      }\n\n      context = JSON.parse(stringify({\n        ...getFirstParentDomainContext(),\n        ...parentContext || {},\n        ...a,\n      }));\n\n      message = sprintf(b, c, d, e, f, g, h, i, k);\n    }\n\n    onMessage({\n      context,\n      message,\n      sequence,\n      time,\n      version: '1.0.0',\n    });\n  };\n\n  log.child = (context: TranslateMessageFunctionType | MessageContextType): LoggerType => {\n    if (typeof context === 'function') {\n      return createLogger((message) => {\n        if (typeof context !== 'function') {\n          throw new TypeError('Unexpected state.');\n        }\n        onMessage(context(message));\n      }, parentContext);\n    }\n\n    return createLogger(onMessage, {\n      ...getFirstParentDomainContext(),\n      ...parentContext,\n      ...context,\n    });\n  };\n\n  log.getContext = (): MessageContextType => {\n    return {\n      ...getFirstParentDomainContext(),\n      ...parentContext || {},\n    };\n  };\n\n  log.adopt = async (routine, context) => {\n    if (!domain) {\n      return routine();\n    }\n\n    const adoptedDomain = domain.create();\n\n    return adoptedDomain\n      .run(() => {\n        // $FlowFixMe\n        adoptedDomain.roarr = {\n          context: {\n            ...getParentDomainContext(),\n            ...context,\n          },\n        };\n\n        return routine();\n      });\n  };\n\n  for (const logLevel of Object.keys(logLevels)) {\n    // eslint-disable-next-line id-length, unicorn/prevent-abbreviations\n    log[logLevel] = (a, b, c, d, e, f, g, h, i, k) => {\n      return log.child({\n        logLevel: logLevels[logLevel],\n      })(a, b, c, d, e, f, g, h, i, k);\n    };\n  }\n\n  // @see https://github.com/facebook/flow/issues/6705\n  // $FlowFixMe\n  return log;\n};\n\nexport default createLogger;\n"]},"metadata":{},"sourceType":"script"}