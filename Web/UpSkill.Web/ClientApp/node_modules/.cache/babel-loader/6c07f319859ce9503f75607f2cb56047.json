{"ast":null,"code":"// import axios from \"axios\";\n//import TokenService from \"./tokenService\";\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient, createNetworkInterface } from 'react-apollo';\nimport { Base_URL } from \"../utils/baseUrlConstant\";\nimport { logout } from \"../actions/auth\"; // const instance = axios.create({\n//   baseURL: Base_URL,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\nconst networkInterface = createNetworkInterface({\n  uri: Base_URL\n}); // instance.interceptors.request.use(\n//   (config) => {\n//     const token = TokenService.getLocalAccessToken();\n//     if (token) {\n//       config.headers[\"www-authenticate\"] = token;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\nnetworkInterface.use([{\n  applyMiddleware(req, next) {\n    if (!req.options.headers) {\n      req.options.headers = {};\n    }\n\n    req.options.headers['x-token'] = localStorage.getItem('token');\n    req.options.headers['x-refresh-token'] = localStorage.getItem('refreshToken');\n    next();\n  }\n\n}]);\nnetworkInterface.use([{\n  applyMiddleware({\n    response\n  }, next) {\n    if (response.status === 401) {\n      logout();\n    }\n\n    next();\n  }\n\n}]); // instance.interceptors.response.use(\n//   (res) => {\n//     return res;\n//   },\n//   async (err) => {\n//     const originalConfig = err.config;\n// if (originalConfig.url !== \"Identity/login\" && err.response) {\n//   // Access Token was expired\n//   if (err.response.status === 401 && !originalConfig._retry) {\n//     originalConfig._retry = true;\n//     try {\n//       const rs = await instance.post(\"Identity/refreshToken\", {\n//         refreshToken: TokenService.getLocalRefreshToken(),\n//       });\n//       const { accessToken } = rs.data;\n//       TokenService.updateLocalAccessToken(accessToken);\n//       return instance(originalConfig);\n//     } catch (_error) {\n//       return Promise.reject(_error);\n//     }\n//   }\n// }\n//   return Promise.reject(err);\n// }\n//);\n\nconst client = new ApolloClient({\n  networkInterface: networkInterface\n});\nexport default client;","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/services/instance.js"],"names":["ApolloProvider","ApolloClient","createNetworkInterface","Base_URL","logout","networkInterface","uri","use","applyMiddleware","req","next","options","headers","localStorage","getItem","response","status","client"],"mappings":"AAAA;AACA;AACA,SAASA,cAAT,QAA+B,cAA/B;AACA,SAASC,YAAT,EAAuBC,sBAAvB,QAAqD,cAArD;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,MAAT,QAAuB,iBAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAGH,sBAAsB,CAAC;AAC9CI,EAAAA,GAAG,EAAEH;AADyC,CAAD,CAA/C,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,gBAAgB,CAACE,GAAjB,CAAqB,CAAC;AACpBC,EAAAA,eAAe,CAACC,GAAD,EAAMC,IAAN,EAAY;AACzB,QAAK,CAACD,GAAG,CAACE,OAAJ,CAAYC,OAAlB,EAA0B;AACxBH,MAAAA,GAAG,CAACE,OAAJ,CAAYC,OAAZ,GAAsB,EAAtB;AACD;;AACDH,IAAAA,GAAG,CAACE,OAAJ,CAAYC,OAAZ,CAAoB,SAApB,IAAiCC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAjC;AACAL,IAAAA,GAAG,CAACE,OAAJ,CAAYC,OAAZ,CAAoB,iBAApB,IAAyCC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAzC;AACAJ,IAAAA,IAAI;AACL;;AARmB,CAAD,CAArB;AAWEL,gBAAgB,CAACE,GAAjB,CAAqB,CAAC;AACpBC,EAAAA,eAAe,CAAC;AAAEO,IAAAA;AAAF,GAAD,EAAeL,IAAf,EAAqB;AAClC,QAAKK,QAAQ,CAACC,MAAT,KAAoB,GAAzB,EAA8B;AAC5BZ,MAAAA,MAAM;AACP;;AACDM,IAAAA,IAAI;AACL;;AANmB,CAAD,CAArB,E,CASA;AACA;AACA;AACA;AACA;AACA;AAGE;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACF;;AAEA,MAAMO,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9BI,EAAAA,gBAAgB,EAAEA;AADY,CAAjB,CAAf;AAIA,eAAeY,MAAf","sourcesContent":["// import axios from \"axios\";\r\n//import TokenService from \"./tokenService\";\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient, createNetworkInterface } from 'react-apollo'\r\n\r\nimport { Base_URL } from \"../utils/baseUrlConstant\";\r\nimport { logout } from \"../actions/auth\";\r\n\r\n// const instance = axios.create({\r\n//   baseURL: Base_URL,\r\n//   headers: {\r\n//     \"Content-Type\": \"application/json\",\r\n//   },\r\n// });\r\n\r\nconst networkInterface = createNetworkInterface({\r\n  uri: Base_URL,\r\n});\r\n\r\n// instance.interceptors.request.use(\r\n//   (config) => {\r\n//     const token = TokenService.getLocalAccessToken();\r\n//     if (token) {\r\n//       config.headers[\"www-authenticate\"] = token;\r\n//     }\r\n//     return config;\r\n//   },\r\n//   (error) => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\nnetworkInterface.use([{\r\n  applyMiddleware(req, next) {\r\n    if  (!req.options.headers){\r\n      req.options.headers = {};\r\n    } \r\n    req.options.headers['x-token'] = localStorage.getItem('token');\r\n    req.options.headers['x-refresh-token'] = localStorage.getItem('refreshToken');\r\n    next();\r\n  }\r\n}]);\r\n\r\n  networkInterface.use([{\r\n    applyMiddleware({ response }, next) {\r\n      if  (response.status === 401) {\r\n        logout();\r\n      }\r\n      next();\r\n    }\r\n  }])\r\n\r\n  // instance.interceptors.response.use(\r\n  //   (res) => {\r\n  //     return res;\r\n  //   },\r\n  //   async (err) => {\r\n  //     const originalConfig = err.config;\r\n\r\n    \r\n    // if (originalConfig.url !== \"Identity/login\" && err.response) {\r\n    //   // Access Token was expired\r\n    //   if (err.response.status === 401 && !originalConfig._retry) {\r\n    //     originalConfig._retry = true;\r\n\r\n    //     try {\r\n    //       const rs = await instance.post(\"Identity/refreshToken\", {\r\n    //         refreshToken: TokenService.getLocalRefreshToken(),\r\n    //       });\r\n\r\n    //       const { accessToken } = rs.data;\r\n    //       TokenService.updateLocalAccessToken(accessToken);\r\n\r\n    //       return instance(originalConfig);\r\n    //     } catch (_error) {\r\n    //       return Promise.reject(_error);\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n  //   return Promise.reject(err);\r\n  // }\r\n//);\r\n\r\nconst client = new ApolloClient({\r\n  networkInterface: networkInterface\r\n});\r\n\r\nexport default client;"]},"metadata":{},"sourceType":"module"}