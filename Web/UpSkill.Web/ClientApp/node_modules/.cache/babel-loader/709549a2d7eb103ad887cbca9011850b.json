{"ast":null,"code":"import jwt from 'jwt-decode';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE, CHECK_CURRENT_STATE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (firstName, lastName, companyName, email, password, confirmPassword) => dispatch => {\n  return AuthService.register(firstName, lastName, companyName, email, password, confirmPassword).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: jwt(data.token)\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = async () => await AuthService.logout();","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/actions/auth.js"],"names":["jwt","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","CHECK_CURRENT_STATE","AuthService","register","firstName","lastName","companyName","email","password","confirmPassword","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","token","logout"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AAEA,SACEC,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,WANF,EAOEC,mBAPF,QAQO,SARP;AAUA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,WAAtB,EAAmCC,KAAnC,EAA0CC,QAA1C,EAAoDC,eAApD,KAAyEC,QAAD,IAAc;AAC5G,SAAOR,WAAW,CAACC,QAAZ,CAAqBC,SAArB,EAAgCC,QAAhC,EAA0CC,WAA1C,EAAuDC,KAAvD,EAA8DC,QAA9D,EAAwEC,eAAxE,EAAyFE,IAAzF,CACJC,QAAD,IAAc;AACZF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAElB;AADC,KAAD,CAAR;AAIAe,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb,WADC;AAEPc,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFhB,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAZI,EAaJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEjB;AADC,KAAD,CAAR;AAIAc,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb,WADC;AAEPc,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACD,GA/BI,CAAP;AAiCD,CAlCM;AAoCP,OAAO,MAAMC,KAAK,GAAG,CAACf,KAAD,EAAQC,QAAR,KAAsBE,QAAD,IAAc;AACtD,SAAOR,WAAW,CAACoB,KAAZ,CAAkBf,KAAlB,EAAyBC,QAAzB,EAAmCG,IAAnC,CACJI,IAAD,IAAU;AACRL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEhB,aADC;AAEPiB,MAAAA,OAAO,EAAE;AAAES,QAAAA,IAAI,EAAE7B,GAAG,CAACqB,IAAI,CAACS,KAAN;AAAX;AAFF,KAAD,CAAR;AAKA,WAAOP,OAAO,CAACC,OAAR,EAAP;AACD,GARI,EASJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR;AAIAY,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb,WADC;AAEPc,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACD,GA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMI,MAAM,GAAG,YAAa,MAAMvB,WAAW,CAACuB,MAAZ,EAAlC","sourcesContent":["import jwt from 'jwt-decode'\r\n\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  SET_MESSAGE,\r\n  CHECK_CURRENT_STATE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const register = (firstName, lastName, companyName, email, password, confirmPassword) => (dispatch) => {\r\n  return AuthService.register(firstName, lastName, companyName, email, password, confirmPassword).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (email, password) => (dispatch) => {\r\n  return AuthService.login(email, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: jwt(data.token) },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = async () =>  await AuthService.logout(); \r\n"]},"metadata":{},"sourceType":"module"}