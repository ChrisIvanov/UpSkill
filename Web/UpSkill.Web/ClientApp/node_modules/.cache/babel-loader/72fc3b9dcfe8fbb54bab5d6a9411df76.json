{"ast":null,"code":"\"use strict\"; // eslint-disable-next-line no-console\n\nconst assert = console.assert;\n\nconst buildCtx = opts => {\n  const ctx = {\n    joined: true,\n    spacerNoNeighbour: '   ',\n    spacerNeighbour: '│  ',\n    keyNoNeighbour: '└─ ',\n    keyNeighbour: '├─ ',\n    sortFn: null,\n    ...opts\n  };\n  assert(Object.keys(ctx).length === 6, 'Unexpected Option(s) provided');\n  assert(typeof ctx.joined === 'boolean', 'Option \"joined\" has invalid format');\n  assert(typeof ctx.spacerNoNeighbour === 'string', 'Option \"spacerNoNeighbour\" has invalid format');\n  assert(typeof ctx.spacerNeighbour === 'string', 'Option \"spacerNeighbour\" has invalid format');\n  assert(typeof ctx.keyNoNeighbour === 'string', 'Option \"keyNoNeighbour\" has invalid format');\n  assert(typeof ctx.keyNeighbour === 'string', 'Option \"keyNeighbour\" has invalid format');\n  assert(typeof ctx.sortFn === 'function' || ctx.sortFn === null, 'Option \"sortFn\" has invalid format');\n  return ctx;\n};\n\nmodule.exports = (tree, opts = {}) => {\n  const ctx = buildCtx(opts);\n  const result = [];\n\n  const sort = input => ctx.sortFn === null ? input.reverse() : input.sort((a, b) => ctx.sortFn(b, a));\n\n  const neighbours = [];\n  const keys = sort(Object.keys(tree)).map(k => [k]);\n  const lookup = [tree];\n\n  while (keys.length !== 0) {\n    const key = keys.pop();\n    const node = lookup[key.length - 1][key[key.length - 1]];\n    neighbours[key.length - 1] = keys.length !== 0 && keys[keys.length - 1].length === key.length;\n    result.push([neighbours.slice(0, key.length - 1).map(n => n ? ctx.spacerNeighbour : ctx.spacerNoNeighbour).join(''), neighbours[key.length - 1] ? ctx.keyNeighbour : ctx.keyNoNeighbour, key[key.length - 1], ['boolean', 'string', 'number'].includes(typeof node) ? `: ${node}` : ''].join(''));\n\n    if (node instanceof Object && !Array.isArray(node)) {\n      keys.push(...sort(Object.keys(node)).map(k => key.concat(k)));\n      lookup[key.length] = node;\n    }\n  }\n\n  return ctx.joined === true ? result.join('\\n') : result;\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/object-treeify/lib/index.js"],"names":["assert","console","buildCtx","opts","ctx","joined","spacerNoNeighbour","spacerNeighbour","keyNoNeighbour","keyNeighbour","sortFn","Object","keys","length","module","exports","tree","result","sort","input","reverse","a","b","neighbours","map","k","lookup","key","pop","node","push","slice","n","join","includes","Array","isArray","concat"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// eslint-disable-next-line no-console\nconst assert = console.assert;\n\nconst buildCtx = opts => {\n  const ctx = {\n    joined: true,\n    spacerNoNeighbour: '   ',\n    spacerNeighbour: '│  ',\n    keyNoNeighbour: '└─ ',\n    keyNeighbour: '├─ ',\n    sortFn: null,\n    ...opts\n  };\n  assert(Object.keys(ctx).length === 6, 'Unexpected Option(s) provided');\n  assert(typeof ctx.joined === 'boolean', 'Option \"joined\" has invalid format');\n  assert(typeof ctx.spacerNoNeighbour === 'string', 'Option \"spacerNoNeighbour\" has invalid format');\n  assert(typeof ctx.spacerNeighbour === 'string', 'Option \"spacerNeighbour\" has invalid format');\n  assert(typeof ctx.keyNoNeighbour === 'string', 'Option \"keyNoNeighbour\" has invalid format');\n  assert(typeof ctx.keyNeighbour === 'string', 'Option \"keyNeighbour\" has invalid format');\n  assert(typeof ctx.sortFn === 'function' || ctx.sortFn === null, 'Option \"sortFn\" has invalid format');\n  return ctx;\n};\n\nmodule.exports = (tree, opts = {}) => {\n  const ctx = buildCtx(opts);\n  const result = [];\n\n  const sort = input => ctx.sortFn === null ? input.reverse() : input.sort((a, b) => ctx.sortFn(b, a));\n\n  const neighbours = [];\n  const keys = sort(Object.keys(tree)).map(k => [k]);\n  const lookup = [tree];\n\n  while (keys.length !== 0) {\n    const key = keys.pop();\n    const node = lookup[key.length - 1][key[key.length - 1]];\n    neighbours[key.length - 1] = keys.length !== 0 && keys[keys.length - 1].length === key.length;\n    result.push([neighbours.slice(0, key.length - 1).map(n => n ? ctx.spacerNeighbour : ctx.spacerNoNeighbour).join(''), neighbours[key.length - 1] ? ctx.keyNeighbour : ctx.keyNoNeighbour, key[key.length - 1], ['boolean', 'string', 'number'].includes(typeof node) ? `: ${node}` : ''].join(''));\n\n    if (node instanceof Object && !Array.isArray(node)) {\n      keys.push(...sort(Object.keys(node)).map(k => key.concat(k)));\n      lookup[key.length] = node;\n    }\n  }\n\n  return ctx.joined === true ? result.join('\\n') : result;\n};"]},"metadata":{},"sourceType":"script"}