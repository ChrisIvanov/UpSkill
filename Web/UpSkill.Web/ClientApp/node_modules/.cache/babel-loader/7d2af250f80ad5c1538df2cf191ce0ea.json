{"ast":null,"code":"var _jsxFileName = \"H:\\\\Programming Repositories\\\\Titans\\\\Web\\\\UpSkill.Web\\\\ClientApp\\\\src\\\\components\\\\Zoom\\\\ZoomHubClient.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport notificationContext from \"../../Context/NotificationContext\";\nimport ZoomContext from \"../../Context/ZoomContext\";\nimport { createRoom } from \"../../services/coachService\";\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { Base_URL } from \"../../utils/baseUrlConstant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ZoomHubClient(props) {\n  _s();\n\n  const [connection, setConnection] = useState();\n  const [notification, setNotification] = useContext(notificationContext);\n  const systemLog = \"SYSTEM\";\n\n  const joinCourses = async () => {\n    try {\n      let token = localStorage.getItem(\"token\");\n      const connection = new HubConnectionBuilder().withUrl(`${Base_URL}zoom?token=${token}`).configureLogging(LogLevel.Information).build();\n      connection.on(\"ReceiveMessage\", receiveMessage);\n      connection.on(\"ReceiveInviteMessage\", receiveInviteMessage);\n      connection.onclose(e => {\n        setConnection();\n      });\n      await connection.start();\n      await connection.invoke(\"JoinCourses\");\n      setConnection(connection);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const startRoom = async e => {\n    e.preventDefault();\n    let courseId = e.target[0].value;\n    if (!courseId) return;\n    let user = await getCurrentUserConnection();\n    let hostUrl = await createRoom(courseId, user);\n    let messageHost = \"You have created a room, please join it at:\";\n    receiveHostMessage(messageHost, hostUrl);\n    return hostUrl;\n  };\n\n  const closeConnection = async () => {\n    try {\n      if (!connection) return;\n      await connection.stop();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const receiveMessage = async (messageName, message) => {\n    try {\n      if (messageName === systemLog) {\n        setNotification({\n          type: 'LOGIN_SUCCESS',\n          payload: message\n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const sendJoinMessage = async courseId => {\n    try {\n      await connection.invoke(\"SendJoinMessage\", courseId);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const receiveInviteMessage = async (message, joinUrl) => {\n    try {\n      setNotification({\n        type: 'SET_WARNING_MESSAGE',\n        payload: {\n          message,\n          link: joinUrl\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const receiveHostMessage = async (message, hostUrl) => {\n    try {\n      setNotification({\n        type: 'SET_WARNING_MESSAGE',\n        payload: {\n          message,\n          link: hostUrl\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getCurrentUserConnection = () => {\n    try {\n      return connection.connection.connectionId;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ZoomContext.Provider, {\n      value: [joinCourses, sendJoinMessage, startRoom, receiveInviteMessage, receiveMessage, closeConnection, connection],\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ZoomHubClient, \"EK7n86qLVp0ZhpewEKVFR5eIEOg=\");\n\n_c = ZoomHubClient;\n\nvar _c;\n\n$RefreshReg$(_c, \"ZoomHubClient\");","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/components/Zoom/ZoomHubClient.js"],"names":["React","useState","useContext","notificationContext","ZoomContext","createRoom","HubConnectionBuilder","LogLevel","Base_URL","ZoomHubClient","props","connection","setConnection","notification","setNotification","systemLog","joinCourses","token","localStorage","getItem","withUrl","configureLogging","Information","build","on","receiveMessage","receiveInviteMessage","onclose","e","start","invoke","console","log","startRoom","preventDefault","courseId","target","value","user","getCurrentUserConnection","hostUrl","messageHost","receiveHostMessage","closeConnection","stop","messageName","message","type","payload","sendJoinMessage","joinUrl","link","connectionId","children"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport notificationContext from \"../../Context/NotificationContext\";\r\nimport ZoomContext from \"../../Context/ZoomContext\";\r\n\r\nimport { createRoom } from \"../../services/coachService\";\r\n\r\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { Base_URL } from \"../../utils/baseUrlConstant\";\r\n\r\nexport default function ZoomHubClient(props) {\r\n    const [connection, setConnection] = useState();\r\n    const [notification, setNotification] = useContext(notificationContext);\r\n\r\n    const systemLog = \"SYSTEM\";\r\n\r\n    const joinCourses = async () => {\r\n      try {\r\n        let token = localStorage.getItem(\"token\");\r\n\r\n        const connection = new HubConnectionBuilder()\r\n          .withUrl(`${Base_URL}zoom?token=${token}`)\r\n          .configureLogging(LogLevel.Information)                \r\n          .build();\r\n  \r\n        connection.on(\"ReceiveMessage\", receiveMessage)\r\n        connection.on(\"ReceiveInviteMessage\", receiveInviteMessage)\r\n        \r\n        connection.onclose(e => {\r\n          setConnection();\r\n        })\r\n  \r\n        await connection.start();       \r\n        await connection.invoke(\"JoinCourses\");                \r\n\r\n        setConnection(connection);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    \r\n    const startRoom = async (e) =>\r\n      {\r\n        e.preventDefault();\r\n\r\n        let courseId = e.target[0].value;\r\n        if(!courseId) return;\r\n\r\n        let user =  await getCurrentUserConnection();\r\n        let hostUrl = await createRoom(courseId, user);\r\n        let messageHost = \"You have created a room, please join it at:\";\r\n\r\n        receiveHostMessage(messageHost, hostUrl);\r\n\r\n        return hostUrl;\r\n      };\r\n  \r\n    const closeConnection = async () => {\r\n      try {\r\n        if (!connection) return;\r\n        await connection.stop();\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  \r\n    const receiveMessage = async (messageName, message) => {\r\n        try {\r\n          if(messageName === systemLog){\r\n            setNotification({type:'LOGIN_SUCCESS', payload: message})\r\n          } \r\n       } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  \r\n      const sendJoinMessage = async (courseId) => {\r\n      try {\r\n        await connection.invoke(\"SendJoinMessage\", courseId);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n\r\n    const receiveInviteMessage = async (message, joinUrl) => {\r\n      try {\r\n          setNotification({type:'SET_WARNING_MESSAGE', payload: {message, link:joinUrl}})\r\n     } catch (e) {\r\n      console.log(e);\r\n      }\r\n    }\r\n\r\n    const receiveHostMessage = async (message, hostUrl) => {\r\n        try {\r\n            setNotification({ type: 'SET_WARNING_MESSAGE', payload: { message, link: hostUrl } })\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    \r\n    const getCurrentUserConnection = () => {\r\n      try {\r\n          return connection.connection.connectionId;\r\n        } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ZoomContext.Provider value={[joinCourses, sendJoinMessage, startRoom, receiveInviteMessage, receiveMessage, closeConnection, connection]} >\r\n            {props.children}\r\n        </ZoomContext.Provider >\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}