{"ast":null,"code":"const execa = require('execa');\n\nfunction head(options) {\n  try {\n    return execa.sync('git', ['rev-parse', 'HEAD'], options).stdout;\n  } catch {\n    return undefined;\n  }\n}\n\nfunction branch(options) {\n  try {\n    const headRef = execa.sync('git', ['rev-parse', '--abbrev-ref', 'HEAD'], options).stdout;\n\n    if (headRef === 'HEAD') {\n      const branch = execa.sync('git', ['show', '-s', '--pretty=%d', 'HEAD'], options).stdout.replace(/^\\(|\\)$/g, '').split(', ').find(branch => branch.startsWith('origin/'));\n      return branch ? branch.match(/^origin\\/(?<branch>.+)/)[1] : undefined;\n    }\n\n    return headRef;\n  } catch {\n    return undefined;\n  }\n}\n\nmodule.exports = {\n  head,\n  branch\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/env-ci/lib/git.js"],"names":["execa","require","head","options","sync","stdout","undefined","branch","headRef","replace","split","find","startsWith","match","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACrB,MAAI;AACF,WAAOH,KAAK,CAACI,IAAN,CAAW,KAAX,EAAkB,CAAC,WAAD,EAAc,MAAd,CAAlB,EAAyCD,OAAzC,EAAkDE,MAAzD;AACD,GAFD,CAEE,MAAM;AACN,WAAOC,SAAP;AACD;AACF;;AAED,SAASC,MAAT,CAAgBJ,OAAhB,EAAyB;AACvB,MAAI;AACF,UAAMK,OAAO,GAAGR,KAAK,CAACI,IAAN,CAAW,KAAX,EAAkB,CAAC,WAAD,EAAc,cAAd,EAA8B,MAA9B,CAAlB,EAAyDD,OAAzD,EAAkEE,MAAlF;;AAEA,QAAIG,OAAO,KAAK,MAAhB,EAAwB;AACtB,YAAMD,MAAM,GAAGP,KAAK,CACjBI,IADY,CACP,KADO,EACA,CAAC,MAAD,EAAS,IAAT,EAAe,aAAf,EAA8B,MAA9B,CADA,EACuCD,OADvC,EAEZE,MAFY,CAELI,OAFK,CAEG,UAFH,EAEe,EAFf,EAGZC,KAHY,CAGN,IAHM,EAIZC,IAJY,CAINJ,MAAD,IAAYA,MAAM,CAACK,UAAP,CAAkB,SAAlB,CAJL,CAAf;AAKA,aAAOL,MAAM,GAAGA,MAAM,CAACM,KAAP,CAAa,wBAAb,EAAuC,CAAvC,CAAH,GAA+CP,SAA5D;AACD;;AAED,WAAOE,OAAP;AACD,GAbD,CAaE,MAAM;AACN,WAAOF,SAAP;AACD;AACF;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AAACb,EAAAA,IAAD;AAAOK,EAAAA;AAAP,CAAjB","sourcesContent":["const execa = require('execa');\n\nfunction head(options) {\n  try {\n    return execa.sync('git', ['rev-parse', 'HEAD'], options).stdout;\n  } catch {\n    return undefined;\n  }\n}\n\nfunction branch(options) {\n  try {\n    const headRef = execa.sync('git', ['rev-parse', '--abbrev-ref', 'HEAD'], options).stdout;\n\n    if (headRef === 'HEAD') {\n      const branch = execa\n        .sync('git', ['show', '-s', '--pretty=%d', 'HEAD'], options)\n        .stdout.replace(/^\\(|\\)$/g, '')\n        .split(', ')\n        .find((branch) => branch.startsWith('origin/'));\n      return branch ? branch.match(/^origin\\/(?<branch>.+)/)[1] : undefined;\n    }\n\n    return headRef;\n  } catch {\n    return undefined;\n  }\n}\n\nmodule.exports = {head, branch};\n"]},"metadata":{},"sourceType":"script"}