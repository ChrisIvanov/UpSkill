{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n/** Error thrown when an HTTP request fails. */\nexport class HttpError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n   *\r\n   * @param {string} errorMessage A descriptive error message.\r\n   * @param {number} statusCode The HTTP status code represented by this error.\r\n   */\n  constructor(errorMessage, statusCode) {\n    const trueProto = new.target.prototype;\n    super(`${errorMessage}: Status code '${statusCode}'`);\n    this.statusCode = statusCode; // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n\n    this.__proto__ = trueProto;\n  }\n\n}\n/** Error thrown when a timeout elapses. */\n\nexport class TimeoutError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n   *\r\n   * @param {string} errorMessage A descriptive error message.\r\n   */\n  constructor(errorMessage = \"A timeout occurred.\") {\n    const trueProto = new.target.prototype;\n    super(errorMessage); // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n\n    this.__proto__ = trueProto;\n  }\n\n}\n/** Error thrown when an action is aborted. */\n\nexport class AbortError extends Error {\n  /** Constructs a new instance of {@link AbortError}.\r\n   *\r\n   * @param {string} errorMessage A descriptive error message.\r\n   */\n  constructor(errorMessage = \"An abort occurred.\") {\n    const trueProto = new.target.prototype;\n    super(errorMessage); // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n\n    this.__proto__ = trueProto;\n  }\n\n}\n/** Error thrown when the selected transport is unsupported by the browser. */\n\n/** @private */\n\nexport class UnsupportedTransportError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n   */\n  constructor(message, transport) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.transport = transport;\n    this.errorType = 'UnsupportedTransportError'; // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n\n    this.__proto__ = trueProto;\n  }\n\n}\n/** Error thrown when the selected transport is disabled by the browser. */\n\n/** @private */\n\nexport class DisabledTransportError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n   */\n  constructor(message, transport) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.transport = transport;\n    this.errorType = 'DisabledTransportError'; // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n\n    this.__proto__ = trueProto;\n  }\n\n}\n/** Error thrown when the selected transport cannot be started. */\n\n/** @private */\n\nexport class FailedToStartTransportError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n   */\n  constructor(message, transport) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.transport = transport;\n    this.errorType = 'FailedToStartTransportError'; // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n\n    this.__proto__ = trueProto;\n  }\n\n}\n/** Error thrown when the negotiation with the server failed to complete. */\n\n/** @private */\n\nexport class FailedToNegotiateWithServerError extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   */\n  constructor(message) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.errorType = 'FailedToNegotiateWithServerError'; // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n\n    this.__proto__ = trueProto;\n  }\n\n}\n/** Error thrown when multiple errors have occured. */\n\n/** @private */\n\nexport class AggregateErrors extends Error {\n  /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n   *\r\n   * @param {string} message A descriptive error message.\r\n   * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n   */\n  constructor(message, innerErrors) {\n    const trueProto = new.target.prototype;\n    super(message);\n    this.innerErrors = innerErrors; // Workaround issue in Typescript compiler\n    // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\n\n    this.__proto__ = trueProto;\n  }\n\n}","map":{"version":3,"sources":["../../src/Errors.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpTransportType } from \"./ITransport\";\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message: string) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when multiple errors have occured. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The collection of errors this error is aggregating. */\r\n    public innerErrors: Error[];\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message: string, innerErrors: Error[]) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n\r\n        this.innerErrors = innerErrors;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}