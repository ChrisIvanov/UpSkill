{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _serializeError = require(\"serialize-error\");\n\nvar _boolean = require(\"boolean\");\n\nvar _Logger = _interopRequireDefault(require(\"../Logger\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst log = _Logger.default.child({\n  namespace: 'Agent'\n});\n\nlet requestId = 0;\n\nclass Agent {\n  constructor(isProxyConfigured, mustUrlUseProxy, getUrlProxy, fallbackAgent, socketConnectionTimeout) {\n    this.fallbackAgent = fallbackAgent;\n    this.isProxyConfigured = isProxyConfigured;\n    this.mustUrlUseProxy = mustUrlUseProxy;\n    this.getUrlProxy = getUrlProxy;\n    this.socketConnectionTimeout = socketConnectionTimeout;\n  }\n\n  addRequest(request, configuration) {\n    let requestUrl; // It is possible that addRequest was constructed for a proxied request already, e.g.\n    // \"request\" package does this when it detects that a proxy should be used\n    // https://github.com/request/request/blob/212570b6971a732b8dd9f3c73354bcdda158a737/request.js#L402\n    // https://gist.github.com/gajus/e2074cd3b747864ffeaabbd530d30218\n\n    if (request.path.startsWith('http://') || request.path.startsWith('https://')) {\n      requestUrl = request.path;\n    } else {\n      requestUrl = this.protocol + '//' + (configuration.hostname || configuration.host) + (configuration.port === 80 || configuration.port === 443 ? '' : ':' + configuration.port) + request.path;\n    }\n\n    if (!this.isProxyConfigured()) {\n      log.trace({\n        destination: requestUrl\n      }, 'not proxying request; GLOBAL_AGENT.HTTP_PROXY is not configured'); // $FlowFixMe It appears that Flow is missing the method description.\n\n      this.fallbackAgent.addRequest(request, configuration);\n      return;\n    }\n\n    if (!this.mustUrlUseProxy(requestUrl)) {\n      log.trace({\n        destination: requestUrl\n      }, 'not proxying request; url matches GLOBAL_AGENT.NO_PROXY'); // $FlowFixMe It appears that Flow is missing the method description.\n\n      this.fallbackAgent.addRequest(request, configuration);\n      return;\n    }\n\n    const currentRequestId = requestId++;\n    const proxy = this.getUrlProxy(requestUrl);\n\n    if (this.protocol === 'http:') {\n      request.path = requestUrl;\n\n      if (proxy.authorization) {\n        request.setHeader('proxy-authorization', 'Basic ' + Buffer.from(proxy.authorization).toString('base64'));\n      }\n    }\n\n    log.trace({\n      destination: requestUrl,\n      proxy: 'http://' + proxy.hostname + ':' + proxy.port,\n      requestId: currentRequestId\n    }, 'proxying request');\n    request.on('error', error => {\n      log.error({\n        error: (0, _serializeError.serializeError)(error)\n      }, 'request error');\n    });\n    request.once('response', response => {\n      log.trace({\n        headers: response.headers,\n        requestId: currentRequestId,\n        statusCode: response.statusCode\n      }, 'proxying response');\n    });\n    request.shouldKeepAlive = false;\n    const connectionConfiguration = {\n      host: configuration.hostname || configuration.host,\n      port: configuration.port || 80,\n      proxy,\n      tls: {}\n    }; // add optional tls options for https requests.\n    // @see https://nodejs.org/docs/latest-v12.x/api/https.html#https_https_request_url_options_callback :\n    // > The following additional options from tls.connect()\n    // >   - https://nodejs.org/docs/latest-v12.x/api/tls.html#tls_tls_connect_options_callback -\n    // > are also accepted:\n    // >   ca, cert, ciphers, clientCertEngine, crl, dhparam, ecdhCurve, honorCipherOrder,\n    // >   key, passphrase, pfx, rejectUnauthorized, secureOptions, secureProtocol, servername, sessionIdContext.\n\n    if (this.protocol === 'https:') {\n      connectionConfiguration.tls = {\n        ca: configuration.ca,\n        cert: configuration.cert,\n        ciphers: configuration.ciphers,\n        clientCertEngine: configuration.clientCertEngine,\n        crl: configuration.crl,\n        dhparam: configuration.dhparam,\n        ecdhCurve: configuration.ecdhCurve,\n        honorCipherOrder: configuration.honorCipherOrder,\n        key: configuration.key,\n        passphrase: configuration.passphrase,\n        pfx: configuration.pfx,\n        rejectUnauthorized: configuration.rejectUnauthorized,\n        secureOptions: configuration.secureOptions,\n        secureProtocol: configuration.secureProtocol,\n        servername: configuration.servername || connectionConfiguration.host,\n        sessionIdContext: configuration.sessionIdContext\n      }; // This is not ideal because there is no way to override this setting using `tls` configuration if `NODE_TLS_REJECT_UNAUTHORIZED=0`.\n      // However, popular HTTP clients (such as https://github.com/sindresorhus/got) come with pre-configured value for `rejectUnauthorized`,\n      // which makes it impossible to override that value globally and respect `rejectUnauthorized` for specific requests only.\n      //\n      // eslint-disable-next-line no-process-env\n\n      if (typeof process.env.NODE_TLS_REJECT_UNAUTHORIZED === 'string' && (0, _boolean.boolean)(process.env.NODE_TLS_REJECT_UNAUTHORIZED) === false) {\n        connectionConfiguration.tls.rejectUnauthorized = false;\n      }\n    } // $FlowFixMe It appears that Flow is missing the method description.\n\n\n    this.createConnection(connectionConfiguration, (error, socket) => {\n      log.trace({\n        target: connectionConfiguration\n      }, 'connecting'); // @see https://github.com/nodejs/node/issues/5757#issuecomment-305969057\n\n      if (socket) {\n        socket.setTimeout(this.socketConnectionTimeout, () => {\n          socket.destroy();\n        });\n        socket.once('connect', () => {\n          log.trace({\n            target: connectionConfiguration\n          }, 'connected');\n          socket.setTimeout(0);\n        });\n        socket.once('secureConnect', () => {\n          log.trace({\n            target: connectionConfiguration\n          }, 'connected (secure)');\n          socket.setTimeout(0);\n        });\n      }\n\n      if (error) {\n        request.emit('error', error);\n      } else {\n        log.debug('created socket');\n        socket.on('error', socketError => {\n          log.error({\n            error: (0, _serializeError.serializeError)(socketError)\n          }, 'socket error');\n        });\n        request.onSocket(socket);\n      }\n    });\n  }\n\n}\n\nvar _default = Agent;\nexports.default = _default;","map":{"version":3,"sources":["../../src/classes/Agent.js"],"names":["log","namespace","requestId","constructor","addRequest","request","requestUrl","configuration","destination","currentRequestId","proxy","Buffer","error","response","headers","statusCode","connectionConfiguration","host","port","tls","ca","cert","ciphers","clientCertEngine","crl","dhparam","ecdhCurve","honorCipherOrder","key","passphrase","pfx","rejectUnauthorized","secureOptions","secureProtocol","servername","sessionIdContext","process","target","socket","socketError","Agent"],"mappings":"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","sourcesContent":["// @flow\n\nimport {\n  serializeError,\n} from 'serialize-error';\nimport {\n  boolean,\n} from 'boolean';\nimport Logger from '../Logger';\nimport type {\n  AgentType,\n  GetUrlProxyMethodType,\n  IsProxyConfiguredMethodType,\n  MustUrlUseProxyMethodType,\n  ProtocolType,\n} from '../types';\n\nconst log = Logger.child({\n  namespace: 'Agent',\n});\n\nlet requestId = 0;\n\nclass Agent {\n  defaultPort: number;\n\n  protocol: ProtocolType;\n\n  fallbackAgent: AgentType;\n\n  isProxyConfigured: IsProxyConfiguredMethodType;\n\n  mustUrlUseProxy: MustUrlUseProxyMethodType;\n\n  getUrlProxy: GetUrlProxyMethodType;\n\n  socketConnectionTimeout: number;\n\n  constructor (\n    isProxyConfigured: IsProxyConfiguredMethodType,\n    mustUrlUseProxy: MustUrlUseProxyMethodType,\n    getUrlProxy: GetUrlProxyMethodType,\n    fallbackAgent: AgentType,\n    socketConnectionTimeout: number,\n  ) {\n    this.fallbackAgent = fallbackAgent;\n    this.isProxyConfigured = isProxyConfigured;\n    this.mustUrlUseProxy = mustUrlUseProxy;\n    this.getUrlProxy = getUrlProxy;\n    this.socketConnectionTimeout = socketConnectionTimeout;\n  }\n\n  addRequest (request: *, configuration: *) {\n    let requestUrl;\n\n    // It is possible that addRequest was constructed for a proxied request already, e.g.\n    // \"request\" package does this when it detects that a proxy should be used\n    // https://github.com/request/request/blob/212570b6971a732b8dd9f3c73354bcdda158a737/request.js#L402\n    // https://gist.github.com/gajus/e2074cd3b747864ffeaabbd530d30218\n    if (request.path.startsWith('http://') || request.path.startsWith('https://')) {\n      requestUrl = request.path;\n    } else {\n      requestUrl = this.protocol + '//' + (configuration.hostname || configuration.host) + (configuration.port === 80 || configuration.port === 443 ? '' : ':' + configuration.port) + request.path;\n    }\n\n    if (!this.isProxyConfigured()) {\n      log.trace({\n        destination: requestUrl,\n      }, 'not proxying request; GLOBAL_AGENT.HTTP_PROXY is not configured');\n\n      // $FlowFixMe It appears that Flow is missing the method description.\n      this.fallbackAgent.addRequest(request, configuration);\n\n      return;\n    }\n\n    if (!this.mustUrlUseProxy(requestUrl)) {\n      log.trace({\n        destination: requestUrl,\n      }, 'not proxying request; url matches GLOBAL_AGENT.NO_PROXY');\n\n      // $FlowFixMe It appears that Flow is missing the method description.\n      this.fallbackAgent.addRequest(request, configuration);\n\n      return;\n    }\n\n    const currentRequestId = requestId++;\n\n    const proxy = this.getUrlProxy(requestUrl);\n\n    if (this.protocol === 'http:') {\n      request.path = requestUrl;\n\n      if (proxy.authorization) {\n        request.setHeader('proxy-authorization', 'Basic ' + Buffer.from(proxy.authorization).toString('base64'));\n      }\n    }\n\n    log.trace({\n      destination: requestUrl,\n      proxy: 'http://' + proxy.hostname + ':' + proxy.port,\n      requestId: currentRequestId,\n    }, 'proxying request');\n\n    request.on('error', (error) => {\n      log.error({\n        error: serializeError(error),\n      }, 'request error');\n    });\n\n    request.once('response', (response) => {\n      log.trace({\n        headers: response.headers,\n        requestId: currentRequestId,\n        statusCode: response.statusCode,\n      }, 'proxying response');\n    });\n\n    request.shouldKeepAlive = false;\n\n    const connectionConfiguration = {\n      host: configuration.hostname || configuration.host,\n      port: configuration.port || 80,\n      proxy,\n      tls: {},\n    };\n\n    // add optional tls options for https requests.\n    // @see https://nodejs.org/docs/latest-v12.x/api/https.html#https_https_request_url_options_callback :\n    // > The following additional options from tls.connect()\n    // >   - https://nodejs.org/docs/latest-v12.x/api/tls.html#tls_tls_connect_options_callback -\n    // > are also accepted:\n    // >   ca, cert, ciphers, clientCertEngine, crl, dhparam, ecdhCurve, honorCipherOrder,\n    // >   key, passphrase, pfx, rejectUnauthorized, secureOptions, secureProtocol, servername, sessionIdContext.\n    if (this.protocol === 'https:') {\n      connectionConfiguration.tls = {\n        ca: configuration.ca,\n        cert: configuration.cert,\n        ciphers: configuration.ciphers,\n        clientCertEngine: configuration.clientCertEngine,\n        crl: configuration.crl,\n        dhparam: configuration.dhparam,\n        ecdhCurve: configuration.ecdhCurve,\n        honorCipherOrder: configuration.honorCipherOrder,\n        key: configuration.key,\n        passphrase: configuration.passphrase,\n        pfx: configuration.pfx,\n        rejectUnauthorized: configuration.rejectUnauthorized,\n        secureOptions: configuration.secureOptions,\n        secureProtocol: configuration.secureProtocol,\n        servername: configuration.servername || connectionConfiguration.host,\n        sessionIdContext: configuration.sessionIdContext,\n      };\n\n      // This is not ideal because there is no way to override this setting using `tls` configuration if `NODE_TLS_REJECT_UNAUTHORIZED=0`.\n      // However, popular HTTP clients (such as https://github.com/sindresorhus/got) come with pre-configured value for `rejectUnauthorized`,\n      // which makes it impossible to override that value globally and respect `rejectUnauthorized` for specific requests only.\n      //\n      // eslint-disable-next-line no-process-env\n      if (typeof process.env.NODE_TLS_REJECT_UNAUTHORIZED === 'string' && boolean(process.env.NODE_TLS_REJECT_UNAUTHORIZED) === false) {\n        connectionConfiguration.tls.rejectUnauthorized = false;\n      }\n    }\n\n    // $FlowFixMe It appears that Flow is missing the method description.\n    this.createConnection(connectionConfiguration, (error, socket) => {\n      log.trace({\n        target: connectionConfiguration,\n      }, 'connecting');\n\n      // @see https://github.com/nodejs/node/issues/5757#issuecomment-305969057\n      if (socket) {\n        socket.setTimeout(this.socketConnectionTimeout, () => {\n          socket.destroy();\n        });\n\n        socket.once('connect', () => {\n          log.trace({\n            target: connectionConfiguration,\n          }, 'connected');\n\n          socket.setTimeout(0);\n        });\n\n        socket.once('secureConnect', () => {\n          log.trace({\n            target: connectionConfiguration,\n          }, 'connected (secure)');\n\n          socket.setTimeout(0);\n        });\n      }\n\n      if (error) {\n        request.emit('error', error);\n      } else {\n        log.debug('created socket');\n\n        socket.on('error', (socketError) => {\n          log.error({\n            error: serializeError(socketError),\n          }, 'socket error');\n        });\n\n        request.onSocket(socket);\n      }\n    });\n  }\n}\n\nexport default Agent;\n"]},"metadata":{},"sourceType":"script"}