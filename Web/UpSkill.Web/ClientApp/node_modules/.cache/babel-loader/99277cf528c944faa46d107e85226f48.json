{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { NullLogger } from \"./Loggers\";\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */\n\nexport class JsonHubProtocol {\n  constructor() {\n    /** @inheritDoc */\n    this.name = JSON_HUB_PROTOCOL_NAME;\n    /** @inheritDoc */\n\n    this.version = 1;\n    /** @inheritDoc */\n\n    this.transferFormat = TransferFormat.Text;\n  }\n  /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n   *\r\n   * @param {string} input A string containing the serialized representation.\r\n   * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n   */\n\n\n  parseMessages(input, logger) {\n    // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n    if (typeof input !== \"string\") {\n      throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n    }\n\n    if (!input) {\n      return [];\n    }\n\n    if (logger === null) {\n      logger = NullLogger.instance;\n    } // Parse the messages\n\n\n    const messages = TextMessageFormat.parse(input);\n    const hubMessages = [];\n\n    for (const message of messages) {\n      const parsedMessage = JSON.parse(message);\n\n      if (typeof parsedMessage.type !== \"number\") {\n        throw new Error(\"Invalid payload.\");\n      }\n\n      switch (parsedMessage.type) {\n        case MessageType.Invocation:\n          this._isInvocationMessage(parsedMessage);\n\n          break;\n\n        case MessageType.StreamItem:\n          this._isStreamItemMessage(parsedMessage);\n\n          break;\n\n        case MessageType.Completion:\n          this._isCompletionMessage(parsedMessage);\n\n          break;\n\n        case MessageType.Ping:\n          // Single value, no need to validate\n          break;\n\n        case MessageType.Close:\n          // All optional values, no need to validate\n          break;\n\n        default:\n          // Future protocol changes can add message types, old clients can ignore them\n          logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n          continue;\n      }\n\n      hubMessages.push(parsedMessage);\n    }\n\n    return hubMessages;\n  }\n  /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n   *\r\n   * @param {HubMessage} message The message to write.\r\n   * @returns {string} A string containing the serialized representation of the message.\r\n   */\n\n\n  writeMessage(message) {\n    return TextMessageFormat.write(JSON.stringify(message));\n  }\n\n  _isInvocationMessage(message) {\n    this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n\n    if (message.invocationId !== undefined) {\n      this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n    }\n  }\n\n  _isStreamItemMessage(message) {\n    this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n\n    if (message.item === undefined) {\n      throw new Error(\"Invalid payload for StreamItem message.\");\n    }\n  }\n\n  _isCompletionMessage(message) {\n    if (message.result && message.error) {\n      throw new Error(\"Invalid payload for Completion message.\");\n    }\n\n    if (!message.result && message.error) {\n      this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n    }\n\n    this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n  }\n\n  _assertNotEmptyString(value, errorMessage) {\n    if (typeof value !== \"string\" || value === \"\") {\n      throw new Error(errorMessage);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/JsonHubProtocol.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAyE,WAAzE,QAA+G,gBAA/G;AACA,SAAkB,QAAlB,QAAkC,WAAlC;AACA,SAAS,cAAT,QAA+B,cAA/B;AACA,SAAS,UAAT,QAA2B,WAA3B;AACA,SAAS,iBAAT,QAAkC,qBAAlC;AAEA,MAAM,sBAAsB,GAAW,MAAvC;AAEA;;AACA,OAAM,MAAO,eAAP,CAAsB;AAA5B,EAAA,WAAA,GAAA;AAEI;AACgB,SAAA,IAAA,GAAe,sBAAf;AAChB;;AACgB,SAAA,OAAA,GAAkB,CAAlB;AAEhB;;AACgB,SAAA,cAAA,GAAiC,cAAc,CAAC,IAAhD;AAmGnB;AAjGG;;;;AAIG;;;AACI,EAAA,aAAa,CAAC,KAAD,EAAgB,MAAhB,EAA+B;AAC/C;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACH;;AAED,QAAI,CAAC,KAAL,EAAY;AACR,aAAO,EAAP;AACH;;AAED,QAAI,MAAM,KAAK,IAAf,EAAqB;AACjB,MAAA,MAAM,GAAG,UAAU,CAAC,QAApB;AACH,KAZ8C,CAc/C;;;AACA,UAAM,QAAQ,GAAG,iBAAiB,CAAC,KAAlB,CAAwB,KAAxB,CAAjB;AAEA,UAAM,WAAW,GAAG,EAApB;;AACA,SAAK,MAAM,OAAX,IAAsB,QAAtB,EAAgC;AAC5B,YAAM,aAAa,GAAG,IAAI,CAAC,KAAL,CAAW,OAAX,CAAtB;;AACA,UAAI,OAAO,aAAa,CAAC,IAArB,KAA8B,QAAlC,EAA4C;AACxC,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACH;;AACD,cAAQ,aAAa,CAAC,IAAtB;AACI,aAAK,WAAW,CAAC,UAAjB;AACI,eAAK,oBAAL,CAA0B,aAA1B;;AACA;;AACJ,aAAK,WAAW,CAAC,UAAjB;AACI,eAAK,oBAAL,CAA0B,aAA1B;;AACA;;AACJ,aAAK,WAAW,CAAC,UAAjB;AACI,eAAK,oBAAL,CAA0B,aAA1B;;AACA;;AACJ,aAAK,WAAW,CAAC,IAAjB;AACI;AACA;;AACJ,aAAK,WAAW,CAAC,KAAjB;AACI;AACA;;AACJ;AACI;AACA,UAAA,MAAM,CAAC,GAAP,CAAW,QAAQ,CAAC,WAApB,EAAiC,2BAA2B,aAAa,CAAC,IAAzC,GAAgD,YAAjF;AACA;AAnBR;;AAqBA,MAAA,WAAW,CAAC,IAAZ,CAAiB,aAAjB;AACH;;AAED,WAAO,WAAP;AACH;AAED;;;;AAIG;;;AACI,EAAA,YAAY,CAAC,OAAD,EAAoB;AACnC,WAAO,iBAAiB,CAAC,KAAlB,CAAwB,IAAI,CAAC,SAAL,CAAe,OAAf,CAAxB,CAAP;AACH;;AAEO,EAAA,oBAAoB,CAAC,OAAD,EAA2B;AACnD,SAAK,qBAAL,CAA2B,OAAO,CAAC,MAAnC,EAA2C,yCAA3C;;AAEA,QAAI,OAAO,CAAC,YAAR,KAAyB,SAA7B,EAAwC;AACpC,WAAK,qBAAL,CAA2B,OAAO,CAAC,YAAnC,EAAiD,yCAAjD;AACH;AACJ;;AAEO,EAAA,oBAAoB,CAAC,OAAD,EAA2B;AACnD,SAAK,qBAAL,CAA2B,OAAO,CAAC,YAAnC,EAAiD,yCAAjD;;AAEA,QAAI,OAAO,CAAC,IAAR,KAAiB,SAArB,EAAgC;AAC5B,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACH;AACJ;;AAEO,EAAA,oBAAoB,CAAC,OAAD,EAA2B;AACnD,QAAI,OAAO,CAAC,MAAR,IAAkB,OAAO,CAAC,KAA9B,EAAqC;AACjC,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,QAAI,CAAC,OAAO,CAAC,MAAT,IAAmB,OAAO,CAAC,KAA/B,EAAsC;AAClC,WAAK,qBAAL,CAA2B,OAAO,CAAC,KAAnC,EAA0C,yCAA1C;AACH;;AAED,SAAK,qBAAL,CAA2B,OAAO,CAAC,YAAnC,EAAiD,yCAAjD;AACH;;AAEO,EAAA,qBAAqB,CAAC,KAAD,EAAa,YAAb,EAAiC;AAC1D,QAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,KAAK,EAA3C,EAA+C;AAC3C,YAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACH;AACJ;;AA1GuB","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}