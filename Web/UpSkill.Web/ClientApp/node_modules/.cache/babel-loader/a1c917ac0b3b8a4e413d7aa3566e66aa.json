{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildFederatedSchema = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst apollo_graphql_1 = require(\"apollo-graphql\");\n\nconst directives_1 = require(\"../directives\");\n\nconst types_1 = require(\"../types\");\n\nconst printFederatedSchema_1 = require(\"./printFederatedSchema\");\n\nfunction buildFederatedSchema(modulesOrSDL) {\n  let shapedModulesOrSDL;\n\n  if ('typeDefs' in modulesOrSDL) {\n    const {\n      typeDefs,\n      resolvers\n    } = modulesOrSDL;\n    const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n    shapedModulesOrSDL = augmentedTypeDefs.map((typeDefs, i) => {\n      const module = {\n        typeDefs\n      };\n      if (i === 0 && resolvers) module.resolvers = resolvers;\n      return module;\n    });\n  } else {\n    shapedModulesOrSDL = modulesOrSDL;\n  }\n\n  const modules = apollo_graphql_1.modulesFromSDL(shapedModulesOrSDL);\n  let schema = apollo_graphql_1.buildSchemaFromSDL(modules, new graphql_1.GraphQLSchema({\n    query: undefined,\n    directives: [...graphql_1.specifiedDirectives, ...directives_1.federationDirectives]\n  }));\n  const sdl = printFederatedSchema_1.printSchema(schema);\n\n  if (!schema.getQueryType()) {\n    schema = new graphql_1.GraphQLSchema({ ...schema.toConfig(),\n      query: new graphql_1.GraphQLObjectType({\n        name: 'Query',\n        fields: {}\n      })\n    });\n  }\n\n  const entityTypes = Object.values(schema.getTypeMap()).filter(type => graphql_1.isObjectType(type) && directives_1.typeIncludesDirective(type, 'key'));\n  const hasEntities = entityTypes.length > 0;\n  schema = apollo_graphql_1.transformSchema(schema, type => {\n    if (graphql_1.isObjectType(type) && type === schema.getQueryType()) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLObjectType({ ...config,\n        fields: { ...(hasEntities && {\n            _entities: types_1.entitiesField\n          }),\n          _service: { ...types_1.serviceField,\n            resolve: () => ({\n              sdl\n            })\n          },\n          ...config.fields\n        }\n      });\n    }\n\n    return undefined;\n  });\n  schema = apollo_graphql_1.transformSchema(schema, type => {\n    if (hasEntities && graphql_1.isUnionType(type) && type.name === types_1.EntityType.name) {\n      return new graphql_1.GraphQLUnionType({ ...types_1.EntityType.toConfig(),\n        types: entityTypes.filter(graphql_1.isObjectType)\n      });\n    }\n\n    return undefined;\n  });\n\n  for (const module of modules) {\n    if (!module.resolvers) continue;\n    apollo_graphql_1.addResolversToSchema(schema, module.resolvers);\n  }\n\n  return schema;\n}\n\nexports.buildFederatedSchema = buildFederatedSchema;","map":{"version":3,"sources":["../../src/service/buildFederatedSchema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildFederatedSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nconst apollo_graphql_1 = require(\"apollo-graphql\");\nconst directives_1 = require(\"../directives\");\nconst types_1 = require(\"../types\");\nconst printFederatedSchema_1 = require(\"./printFederatedSchema\");\nfunction buildFederatedSchema(modulesOrSDL) {\n    let shapedModulesOrSDL;\n    if ('typeDefs' in modulesOrSDL) {\n        const { typeDefs, resolvers } = modulesOrSDL;\n        const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n        shapedModulesOrSDL = augmentedTypeDefs.map((typeDefs, i) => {\n            const module = { typeDefs };\n            if (i === 0 && resolvers)\n                module.resolvers = resolvers;\n            return module;\n        });\n    }\n    else {\n        shapedModulesOrSDL = modulesOrSDL;\n    }\n    const modules = apollo_graphql_1.modulesFromSDL(shapedModulesOrSDL);\n    let schema = apollo_graphql_1.buildSchemaFromSDL(modules, new graphql_1.GraphQLSchema({\n        query: undefined,\n        directives: [...graphql_1.specifiedDirectives, ...directives_1.federationDirectives],\n    }));\n    const sdl = printFederatedSchema_1.printSchema(schema);\n    if (!schema.getQueryType()) {\n        schema = new graphql_1.GraphQLSchema({\n            ...schema.toConfig(),\n            query: new graphql_1.GraphQLObjectType({\n                name: 'Query',\n                fields: {},\n            }),\n        });\n    }\n    const entityTypes = Object.values(schema.getTypeMap()).filter(type => graphql_1.isObjectType(type) && directives_1.typeIncludesDirective(type, 'key'));\n    const hasEntities = entityTypes.length > 0;\n    schema = apollo_graphql_1.transformSchema(schema, type => {\n        if (graphql_1.isObjectType(type) && type === schema.getQueryType()) {\n            const config = type.toConfig();\n            return new graphql_1.GraphQLObjectType({\n                ...config,\n                fields: {\n                    ...(hasEntities && { _entities: types_1.entitiesField }),\n                    _service: {\n                        ...types_1.serviceField,\n                        resolve: () => ({ sdl }),\n                    },\n                    ...config.fields,\n                },\n            });\n        }\n        return undefined;\n    });\n    schema = apollo_graphql_1.transformSchema(schema, type => {\n        if (hasEntities && graphql_1.isUnionType(type) && type.name === types_1.EntityType.name) {\n            return new graphql_1.GraphQLUnionType({\n                ...types_1.EntityType.toConfig(),\n                types: entityTypes.filter(graphql_1.isObjectType),\n            });\n        }\n        return undefined;\n    });\n    for (const module of modules) {\n        if (!module.resolvers)\n            continue;\n        apollo_graphql_1.addResolversToSchema(schema, module.resolvers);\n    }\n    return schema;\n}\nexports.buildFederatedSchema = buildFederatedSchema;\n//# sourceMappingURL=buildFederatedSchema.js.map"]},"metadata":{},"sourceType":"script"}