{"ast":null,"code":"\"use strict\";\n\nvar gitUp = require(\"git-up\");\n/**\n * gitUrlParse\n * Parses a Git url.\n *\n * @name gitUrlParse\n * @function\n * @param {String} url The Git url to parse.\n * @return {GitUrl} The `GitUrl` object containing:\n *\n *  - `protocols` (Array): An array with the url protocols (usually it has one element).\n *  - `port` (null|Number): The domain port.\n *  - `resource` (String): The url domain (including subdomains).\n *  - `user` (String): The authentication user (usually for ssh urls).\n *  - `pathname` (String): The url pathname.\n *  - `hash` (String): The url hash.\n *  - `search` (String): The url querystring value.\n *  - `href` (String): The input url.\n *  - `protocol` (String): The git url protocol.\n *  - `token` (String): The oauth token (could appear in the https urls).\n *  - `source` (String): The Git provider (e.g. `\"github.com\"`).\n *  - `owner` (String): The repository owner.\n *  - `name` (String): The repository name.\n *  - `ref` (String): The repository ref (e.g., \"master\" or \"dev\").\n *  - `filepath` (String): A filepath relative to the repository root.\n *  - `filepathtype` (String): The type of filepath in the url (\"blob\" or \"tree\").\n *  - `full_name` (String): The owner and name values in the `owner/name` format.\n *  - `toString` (Function): A function to stringify the parsed url into another url type.\n *  - `organization` (String): The organization the owner belongs to. This is CloudForge specific.\n *  - `git_suffix` (Boolean): Whether to add the `.git` suffix or not.\n *\n */\n\n\nfunction gitUrlParse(url) {\n  if (typeof url !== \"string\") {\n    throw new Error(\"The url must be a string.\");\n  }\n\n  var urlInfo = gitUp(url),\n      sourceParts = urlInfo.resource.split(\".\"),\n      splits = null;\n\n  urlInfo.toString = function (type) {\n    return gitUrlParse.stringify(this, type);\n  };\n\n  urlInfo.source = sourceParts.length > 2 ? sourceParts.slice(1 - sourceParts.length).join(\".\") : urlInfo.source = urlInfo.resource; // Note: Some hosting services (e.g. Visual Studio Team Services) allow whitespace characters\n  // in the repository and owner names so we decode the URL pieces to get the correct result\n\n  urlInfo.git_suffix = /\\.git$/.test(urlInfo.pathname);\n  urlInfo.name = decodeURIComponent(urlInfo.pathname.replace(/^\\//, '').replace(/\\.git$/, \"\"));\n  urlInfo.owner = decodeURIComponent(urlInfo.user);\n\n  switch (urlInfo.source) {\n    case \"git.cloudforge.com\":\n      urlInfo.owner = urlInfo.user;\n      urlInfo.organization = sourceParts[0];\n      urlInfo.source = \"cloudforge.com\";\n      break;\n\n    case \"visualstudio.com\":\n      // Handle VSTS SSH URLs\n      if (urlInfo.resource === 'vs-ssh.visualstudio.com') {\n        splits = urlInfo.name.split(\"/\");\n\n        if (splits.length === 4) {\n          urlInfo.organization = splits[1];\n          urlInfo.owner = splits[2];\n          urlInfo.name = splits[3];\n          urlInfo.full_name = splits[2] + '/' + splits[3];\n        }\n\n        break;\n      } else {\n        splits = urlInfo.name.split(\"/\");\n\n        if (splits.length === 2) {\n          urlInfo.owner = splits[1];\n          urlInfo.name = splits[1];\n          urlInfo.full_name = '_git/' + urlInfo.name;\n        } else if (splits.length === 3) {\n          urlInfo.name = splits[2];\n\n          if (splits[0] === 'DefaultCollection') {\n            urlInfo.owner = splits[2];\n            urlInfo.organization = splits[0];\n            urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;\n          } else {\n            urlInfo.owner = splits[0];\n            urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;\n          }\n        } else if (splits.length === 4) {\n          urlInfo.organization = splits[0];\n          urlInfo.owner = splits[1];\n          urlInfo.name = splits[3];\n          urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;\n        }\n\n        break;\n      }\n\n    // Azure DevOps (formerly Visual Studio Team Services)\n\n    case \"dev.azure.com\":\n    case \"azure.com\":\n      if (urlInfo.resource === 'ssh.dev.azure.com') {\n        splits = urlInfo.name.split(\"/\");\n\n        if (splits.length === 4) {\n          urlInfo.organization = splits[1];\n          urlInfo.owner = splits[2];\n          urlInfo.name = splits[3];\n        }\n\n        break;\n      } else {\n        splits = urlInfo.name.split(\"/\");\n\n        if (splits.length === 5) {\n          urlInfo.organization = splits[0];\n          urlInfo.owner = splits[1];\n          urlInfo.name = splits[4];\n          urlInfo.full_name = '_git/' + urlInfo.name;\n        } else if (splits.length === 3) {\n          urlInfo.name = splits[2];\n\n          if (splits[0] === 'DefaultCollection') {\n            urlInfo.owner = splits[2];\n            urlInfo.organization = splits[0];\n            urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;\n          } else {\n            urlInfo.owner = splits[0];\n            urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;\n          }\n        } else if (splits.length === 4) {\n          urlInfo.organization = splits[0];\n          urlInfo.owner = splits[1];\n          urlInfo.name = splits[3];\n          urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;\n        }\n\n        if (urlInfo.query && urlInfo.query['path']) {\n          urlInfo.filepath = urlInfo.query['path'].replace(/^\\/+/g, ''); // Strip leading slash (/)\n        }\n\n        if (urlInfo.query && urlInfo.query['version']) {\n          // version=GB<branch>\n          urlInfo.ref = urlInfo.query['version'].replace(/^GB/, ''); // remove GB\n        }\n\n        break;\n      }\n\n    default:\n      splits = urlInfo.name.split(\"/\");\n      var nameIndex = splits.length - 1;\n\n      if (splits.length >= 2) {\n        var dashIndex = splits.indexOf(\"-\", 2);\n        var blobIndex = splits.indexOf(\"blob\", 2);\n        var treeIndex = splits.indexOf(\"tree\", 2);\n        var commitIndex = splits.indexOf(\"commit\", 2);\n        var srcIndex = splits.indexOf(\"src\", 2);\n        var rawIndex = splits.indexOf(\"raw\", 2);\n        nameIndex = dashIndex > 0 ? dashIndex - 1 : blobIndex > 0 ? blobIndex - 1 : treeIndex > 0 ? treeIndex - 1 : commitIndex > 0 ? commitIndex - 1 : srcIndex > 0 ? srcIndex - 1 : rawIndex > 0 ? rawIndex - 1 : nameIndex;\n        urlInfo.owner = splits.slice(0, nameIndex).join('/');\n        urlInfo.name = splits[nameIndex];\n\n        if (commitIndex) {\n          urlInfo.commit = splits[nameIndex + 2];\n        }\n      }\n\n      urlInfo.ref = \"\";\n      urlInfo.filepathtype = \"\";\n      urlInfo.filepath = \"\";\n      var offsetNameIndex = splits.length > nameIndex && splits[nameIndex + 1] === \"-\" ? nameIndex + 1 : nameIndex;\n\n      if (splits.length > offsetNameIndex + 2 && [\"raw\", \"src\", \"blob\", \"tree\"].indexOf(splits[offsetNameIndex + 1]) >= 0) {\n        urlInfo.filepathtype = splits[offsetNameIndex + 1];\n        urlInfo.ref = splits[offsetNameIndex + 2];\n\n        if (splits.length > offsetNameIndex + 3) {\n          urlInfo.filepath = splits.slice(offsetNameIndex + 3).join('/');\n        }\n      }\n\n      urlInfo.organization = urlInfo.owner;\n      break;\n  }\n\n  if (!urlInfo.full_name) {\n    urlInfo.full_name = urlInfo.owner;\n\n    if (urlInfo.name) {\n      urlInfo.full_name && (urlInfo.full_name += \"/\");\n      urlInfo.full_name += urlInfo.name;\n    }\n  } // Bitbucket Server\n\n\n  if (urlInfo.owner.startsWith(\"scm/\")) {\n    urlInfo.source = \"bitbucket-server\";\n    urlInfo.owner = urlInfo.owner.replace(\"scm/\", \"\");\n    urlInfo.organization = urlInfo.owner;\n    urlInfo.full_name = urlInfo.owner + \"/\" + urlInfo.name;\n  }\n\n  var bitbucket = /(projects|users)\\/(.*?)\\/repos\\/(.*?)((\\/.*$)|$)/;\n  var matches = bitbucket.exec(urlInfo.pathname);\n\n  if (matches != null) {\n    urlInfo.source = \"bitbucket-server\";\n\n    if (matches[1] === \"users\") {\n      urlInfo.owner = \"~\" + matches[2];\n    } else {\n      urlInfo.owner = matches[2];\n    }\n\n    urlInfo.organization = urlInfo.owner;\n    urlInfo.name = matches[3];\n    splits = matches[4].split(\"/\");\n\n    if (splits.length > 1) {\n      if ([\"raw\", \"browse\"].indexOf(splits[1]) >= 0) {\n        urlInfo.filepathtype = splits[1];\n\n        if (splits.length > 2) {\n          urlInfo.filepath = splits[2];\n        }\n      } else if (splits[1] === \"commits\" && splits.length > 2) {\n        urlInfo.commit = splits[2];\n      }\n    }\n\n    urlInfo.full_name = urlInfo.owner + \"/\" + urlInfo.name;\n\n    if (urlInfo.query.at) {\n      urlInfo.ref = urlInfo.query.at;\n    } else {\n      urlInfo.ref = \"\";\n    }\n  }\n\n  return urlInfo;\n}\n/**\n * stringify\n * Stringifies a `GitUrl` object.\n *\n * @name stringify\n * @function\n * @param {GitUrl} obj The parsed Git url object.\n * @param {String} type The type of the stringified url (default `obj.protocol`).\n * @return {String} The stringified url.\n */\n\n\ngitUrlParse.stringify = function (obj, type) {\n  type = type || (obj.protocols && obj.protocols.length ? obj.protocols.join('+') : obj.protocol);\n  var port = obj.port ? \":\" + obj.port : '';\n  var user = obj.user || 'git';\n  var maybeGitSuffix = obj.git_suffix ? \".git\" : \"\";\n\n  switch (type) {\n    case \"ssh\":\n      if (port) return \"ssh://\" + user + \"@\" + obj.resource + port + \"/\" + obj.full_name + maybeGitSuffix;else return user + \"@\" + obj.resource + \":\" + obj.full_name + maybeGitSuffix;\n\n    case \"git+ssh\":\n    case \"ssh+git\":\n    case \"ftp\":\n    case \"ftps\":\n      return type + \"://\" + user + \"@\" + obj.resource + port + \"/\" + obj.full_name + maybeGitSuffix;\n\n    case \"http\":\n    case \"https\":\n      var auth = obj.token ? buildToken(obj) : obj.user && (obj.protocols.includes('http') || obj.protocols.includes('https')) ? obj.user + \"@\" : \"\";\n      return type + \"://\" + auth + obj.resource + port + \"/\" + buildPath(obj) + maybeGitSuffix;\n\n    default:\n      return obj.href;\n  }\n};\n/*!\n * buildToken\n * Builds OAuth token prefix (helper function)\n *\n * @name buildToken\n * @function\n * @param {GitUrl} obj The parsed Git url object.\n * @return {String} token prefix\n */\n\n\nfunction buildToken(obj) {\n  switch (obj.source) {\n    case \"bitbucket.org\":\n      return \"x-token-auth:\" + obj.token + \"@\";\n\n    default:\n      return obj.token + \"@\";\n  }\n}\n\nfunction buildPath(obj) {\n  switch (obj.source) {\n    case \"bitbucket-server\":\n      return \"scm/\" + obj.full_name;\n\n    default:\n      return \"\" + obj.full_name;\n  }\n}\n\nmodule.exports = gitUrlParse;","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/git-url-parse/lib/index.js"],"names":["gitUp","require","gitUrlParse","url","Error","urlInfo","sourceParts","resource","split","splits","toString","type","stringify","source","length","slice","join","git_suffix","test","pathname","name","decodeURIComponent","replace","owner","user","organization","full_name","query","filepath","ref","nameIndex","dashIndex","indexOf","blobIndex","treeIndex","commitIndex","srcIndex","rawIndex","commit","filepathtype","offsetNameIndex","startsWith","bitbucket","matches","exec","at","obj","protocols","protocol","port","maybeGitSuffix","auth","token","buildToken","includes","buildPath","href","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar gitUp = require(\"git-up\");\n\n/**\n * gitUrlParse\n * Parses a Git url.\n *\n * @name gitUrlParse\n * @function\n * @param {String} url The Git url to parse.\n * @return {GitUrl} The `GitUrl` object containing:\n *\n *  - `protocols` (Array): An array with the url protocols (usually it has one element).\n *  - `port` (null|Number): The domain port.\n *  - `resource` (String): The url domain (including subdomains).\n *  - `user` (String): The authentication user (usually for ssh urls).\n *  - `pathname` (String): The url pathname.\n *  - `hash` (String): The url hash.\n *  - `search` (String): The url querystring value.\n *  - `href` (String): The input url.\n *  - `protocol` (String): The git url protocol.\n *  - `token` (String): The oauth token (could appear in the https urls).\n *  - `source` (String): The Git provider (e.g. `\"github.com\"`).\n *  - `owner` (String): The repository owner.\n *  - `name` (String): The repository name.\n *  - `ref` (String): The repository ref (e.g., \"master\" or \"dev\").\n *  - `filepath` (String): A filepath relative to the repository root.\n *  - `filepathtype` (String): The type of filepath in the url (\"blob\" or \"tree\").\n *  - `full_name` (String): The owner and name values in the `owner/name` format.\n *  - `toString` (Function): A function to stringify the parsed url into another url type.\n *  - `organization` (String): The organization the owner belongs to. This is CloudForge specific.\n *  - `git_suffix` (Boolean): Whether to add the `.git` suffix or not.\n *\n */\nfunction gitUrlParse(url) {\n\n    if (typeof url !== \"string\") {\n        throw new Error(\"The url must be a string.\");\n    }\n\n    var urlInfo = gitUp(url),\n        sourceParts = urlInfo.resource.split(\".\"),\n        splits = null;\n\n    urlInfo.toString = function (type) {\n        return gitUrlParse.stringify(this, type);\n    };\n\n    urlInfo.source = sourceParts.length > 2 ? sourceParts.slice(1 - sourceParts.length).join(\".\") : urlInfo.source = urlInfo.resource;\n\n    // Note: Some hosting services (e.g. Visual Studio Team Services) allow whitespace characters\n    // in the repository and owner names so we decode the URL pieces to get the correct result\n    urlInfo.git_suffix = /\\.git$/.test(urlInfo.pathname);\n    urlInfo.name = decodeURIComponent(urlInfo.pathname.replace(/^\\//, '').replace(/\\.git$/, \"\"));\n    urlInfo.owner = decodeURIComponent(urlInfo.user);\n\n    switch (urlInfo.source) {\n        case \"git.cloudforge.com\":\n            urlInfo.owner = urlInfo.user;\n            urlInfo.organization = sourceParts[0];\n            urlInfo.source = \"cloudforge.com\";\n            break;\n        case \"visualstudio.com\":\n            // Handle VSTS SSH URLs\n            if (urlInfo.resource === 'vs-ssh.visualstudio.com') {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 4) {\n                    urlInfo.organization = splits[1];\n                    urlInfo.owner = splits[2];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = splits[2] + '/' + splits[3];\n                }\n                break;\n            } else {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 2) {\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[1];\n                    urlInfo.full_name = '_git/' + urlInfo.name;\n                } else if (splits.length === 3) {\n                    urlInfo.name = splits[2];\n                    if (splits[0] === 'DefaultCollection') {\n                        urlInfo.owner = splits[2];\n                        urlInfo.organization = splits[0];\n                        urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;\n                    } else {\n                        urlInfo.owner = splits[0];\n                        urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;\n                    }\n                } else if (splits.length === 4) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;\n                }\n                break;\n            }\n\n        // Azure DevOps (formerly Visual Studio Team Services)\n        case \"dev.azure.com\":\n        case \"azure.com\":\n            if (urlInfo.resource === 'ssh.dev.azure.com') {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 4) {\n                    urlInfo.organization = splits[1];\n                    urlInfo.owner = splits[2];\n                    urlInfo.name = splits[3];\n                }\n                break;\n            } else {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 5) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[4];\n                    urlInfo.full_name = '_git/' + urlInfo.name;\n                } else if (splits.length === 3) {\n                    urlInfo.name = splits[2];\n                    if (splits[0] === 'DefaultCollection') {\n                        urlInfo.owner = splits[2];\n                        urlInfo.organization = splits[0];\n                        urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;\n                    } else {\n                        urlInfo.owner = splits[0];\n                        urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;\n                    }\n                } else if (splits.length === 4) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;\n                }\n                if (urlInfo.query && urlInfo.query['path']) {\n                    urlInfo.filepath = urlInfo.query['path'].replace(/^\\/+/g, ''); // Strip leading slash (/)\n                }\n                if (urlInfo.query && urlInfo.query['version']) {\n                    // version=GB<branch>\n                    urlInfo.ref = urlInfo.query['version'].replace(/^GB/, ''); // remove GB\n                }\n                break;\n            }\n        default:\n            splits = urlInfo.name.split(\"/\");\n            var nameIndex = splits.length - 1;\n            if (splits.length >= 2) {\n                var dashIndex = splits.indexOf(\"-\", 2);\n                var blobIndex = splits.indexOf(\"blob\", 2);\n                var treeIndex = splits.indexOf(\"tree\", 2);\n                var commitIndex = splits.indexOf(\"commit\", 2);\n                var srcIndex = splits.indexOf(\"src\", 2);\n                var rawIndex = splits.indexOf(\"raw\", 2);\n                nameIndex = dashIndex > 0 ? dashIndex - 1 : blobIndex > 0 ? blobIndex - 1 : treeIndex > 0 ? treeIndex - 1 : commitIndex > 0 ? commitIndex - 1 : srcIndex > 0 ? srcIndex - 1 : rawIndex > 0 ? rawIndex - 1 : nameIndex;\n\n                urlInfo.owner = splits.slice(0, nameIndex).join('/');\n                urlInfo.name = splits[nameIndex];\n                if (commitIndex) {\n                    urlInfo.commit = splits[nameIndex + 2];\n                }\n            }\n\n            urlInfo.ref = \"\";\n            urlInfo.filepathtype = \"\";\n            urlInfo.filepath = \"\";\n            var offsetNameIndex = splits.length > nameIndex && splits[nameIndex + 1] === \"-\" ? nameIndex + 1 : nameIndex;\n            if (splits.length > offsetNameIndex + 2 && [\"raw\", \"src\", \"blob\", \"tree\"].indexOf(splits[offsetNameIndex + 1]) >= 0) {\n                urlInfo.filepathtype = splits[offsetNameIndex + 1];\n                urlInfo.ref = splits[offsetNameIndex + 2];\n                if (splits.length > offsetNameIndex + 3) {\n                    urlInfo.filepath = splits.slice(offsetNameIndex + 3).join('/');\n                }\n            }\n            urlInfo.organization = urlInfo.owner;\n            break;\n    }\n\n    if (!urlInfo.full_name) {\n        urlInfo.full_name = urlInfo.owner;\n        if (urlInfo.name) {\n            urlInfo.full_name && (urlInfo.full_name += \"/\");\n            urlInfo.full_name += urlInfo.name;\n        }\n    }\n    // Bitbucket Server\n    if (urlInfo.owner.startsWith(\"scm/\")) {\n        urlInfo.source = \"bitbucket-server\";\n        urlInfo.owner = urlInfo.owner.replace(\"scm/\", \"\");\n        urlInfo.organization = urlInfo.owner;\n        urlInfo.full_name = urlInfo.owner + \"/\" + urlInfo.name;\n    }\n\n    var bitbucket = /(projects|users)\\/(.*?)\\/repos\\/(.*?)((\\/.*$)|$)/;\n    var matches = bitbucket.exec(urlInfo.pathname);\n    if (matches != null) {\n        urlInfo.source = \"bitbucket-server\";\n        if (matches[1] === \"users\") {\n            urlInfo.owner = \"~\" + matches[2];\n        } else {\n            urlInfo.owner = matches[2];\n        }\n\n        urlInfo.organization = urlInfo.owner;\n        urlInfo.name = matches[3];\n\n        splits = matches[4].split(\"/\");\n        if (splits.length > 1) {\n            if ([\"raw\", \"browse\"].indexOf(splits[1]) >= 0) {\n                urlInfo.filepathtype = splits[1];\n                if (splits.length > 2) {\n                    urlInfo.filepath = splits[2];\n                }\n            } else if (splits[1] === \"commits\" && splits.length > 2) {\n                urlInfo.commit = splits[2];\n            }\n        }\n        urlInfo.full_name = urlInfo.owner + \"/\" + urlInfo.name;\n\n        if (urlInfo.query.at) {\n            urlInfo.ref = urlInfo.query.at;\n        } else {\n            urlInfo.ref = \"\";\n        }\n    }\n    return urlInfo;\n}\n\n/**\n * stringify\n * Stringifies a `GitUrl` object.\n *\n * @name stringify\n * @function\n * @param {GitUrl} obj The parsed Git url object.\n * @param {String} type The type of the stringified url (default `obj.protocol`).\n * @return {String} The stringified url.\n */\ngitUrlParse.stringify = function (obj, type) {\n    type = type || (obj.protocols && obj.protocols.length ? obj.protocols.join('+') : obj.protocol);\n    var port = obj.port ? \":\" + obj.port : '';\n    var user = obj.user || 'git';\n    var maybeGitSuffix = obj.git_suffix ? \".git\" : \"\";\n    switch (type) {\n        case \"ssh\":\n            if (port) return \"ssh://\" + user + \"@\" + obj.resource + port + \"/\" + obj.full_name + maybeGitSuffix;else return user + \"@\" + obj.resource + \":\" + obj.full_name + maybeGitSuffix;\n        case \"git+ssh\":\n        case \"ssh+git\":\n        case \"ftp\":\n        case \"ftps\":\n            return type + \"://\" + user + \"@\" + obj.resource + port + \"/\" + obj.full_name + maybeGitSuffix;\n        case \"http\":\n        case \"https\":\n            var auth = obj.token ? buildToken(obj) : obj.user && (obj.protocols.includes('http') || obj.protocols.includes('https')) ? obj.user + \"@\" : \"\";\n            return type + \"://\" + auth + obj.resource + port + \"/\" + buildPath(obj) + maybeGitSuffix;\n        default:\n            return obj.href;\n    }\n};\n\n/*!\n * buildToken\n * Builds OAuth token prefix (helper function)\n *\n * @name buildToken\n * @function\n * @param {GitUrl} obj The parsed Git url object.\n * @return {String} token prefix\n */\nfunction buildToken(obj) {\n    switch (obj.source) {\n        case \"bitbucket.org\":\n            return \"x-token-auth:\" + obj.token + \"@\";\n        default:\n            return obj.token + \"@\";\n    }\n}\n\nfunction buildPath(obj) {\n    switch (obj.source) {\n        case \"bitbucket-server\":\n            return \"scm/\" + obj.full_name;\n        default:\n            return \"\" + obj.full_name;\n\n    }\n}\n\nmodule.exports = gitUrlParse;"]},"metadata":{},"sourceType":"script"}