{"ast":null,"code":"const _GenericBar = require('./generic-bar');\n\nconst _options = require('./options'); // Progress-Bar constructor\n\n\nmodule.exports = class SingleBar extends _GenericBar {\n  constructor(options, preset) {\n    super(_options.parse(options, preset)); // the update timer\n\n    this.timer = null; // disable synchronous updates in notty mode\n\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.options.synchronousUpdate = false;\n    } // update interval\n\n\n    this.schedulingRate = this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule;\n  } // internal render function\n\n\n  render() {\n    // stop timer\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    } // run internal rendering\n\n\n    super.render(); // add new line in notty mode!\n\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.terminal.newline();\n    } // next update\n\n\n    this.timer = setTimeout(this.render.bind(this), this.schedulingRate);\n  }\n\n  update(current, payload) {\n    // timer inactive ?\n    if (!this.timer) {\n      return;\n    }\n\n    super.update(current, payload); // trigger synchronous update ?\n    // check for throttle time \n\n    if (this.options.synchronousUpdate && this.lastRedraw + this.options.throttleTime * 2 < Date.now()) {\n      // force update\n      this.render();\n    }\n  } // start the progress bar\n\n\n  start(total, startValue, payload) {\n    // progress updates are only visible in TTY mode!\n    if (this.options.noTTYOutput === false && this.terminal.isTTY() === false) {\n      return;\n    } // save current cursor settings\n\n\n    this.terminal.cursorSave(); // hide the cursor ?\n\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(false);\n    } // disable line wrapping ?\n\n\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(false);\n    } // initialize bar\n\n\n    super.start(total, startValue, payload); // redraw on start!\n\n    this.render();\n  } // stop the bar\n\n\n  stop() {\n    // timer inactive ?\n    if (!this.timer) {\n      return;\n    } // trigger final rendering\n\n\n    this.render(); // restore state\n\n    super.stop(); // stop timer\n\n    clearTimeout(this.timer);\n    this.timer = null; // cursor hidden ?\n\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(true);\n    } // re-enable line wrapping ?\n\n\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(true);\n    } // restore cursor on complete (position + settings)\n\n\n    this.terminal.cursorRestore(); // clear line on complete ?\n\n    if (this.options.clearOnComplete) {\n      this.terminal.cursorTo(0, null);\n      this.terminal.clearLine();\n    } else {\n      // new line on complete\n      this.terminal.newline();\n    }\n  }\n\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/cli-progress/lib/single-bar.js"],"names":["_GenericBar","require","_options","module","exports","SingleBar","constructor","options","preset","parse","timer","noTTYOutput","terminal","isTTY","synchronousUpdate","schedulingRate","throttleTime","notTTYSchedule","render","clearTimeout","newline","setTimeout","bind","update","current","payload","lastRedraw","Date","now","start","total","startValue","cursorSave","hideCursor","cursor","linewrap","lineWrapping","stop","cursorRestore","clearOnComplete","cursorTo","clearLine"],"mappings":"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","sourcesContent":["const _GenericBar = require('./generic-bar');\nconst _options = require('./options');\n\n// Progress-Bar constructor\nmodule.exports = class SingleBar extends _GenericBar{\n\n    constructor(options, preset){\n        super(_options.parse(options, preset));\n\n        // the update timer\n        this.timer = null;\n\n        // disable synchronous updates in notty mode\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.options.synchronousUpdate = false;\n        }\n\n        // update interval\n        this.schedulingRate = (this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule);\n    }\n\n    // internal render function\n    render(){\n        // stop timer\n        if (this.timer){\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n\n        // run internal rendering\n        super.render();\n\n        // add new line in notty mode!\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.terminal.newline();\n        }\n\n        // next update\n        this.timer = setTimeout(this.render.bind(this), this.schedulingRate);\n    }\n\n    update(current, payload){\n        // timer inactive ?\n        if (!this.timer) {\n            return;\n        }\n\n        super.update(current, payload);\n\n        // trigger synchronous update ?\n        // check for throttle time \n        if (this.options.synchronousUpdate && (this.lastRedraw + this.options.throttleTime*2) < Date.now()){\n            // force update\n            this.render();\n        }\n    }\n\n    // start the progress bar\n    start(total, startValue, payload){\n        // progress updates are only visible in TTY mode!\n        if (this.options.noTTYOutput === false && this.terminal.isTTY() === false){\n            return;\n        }\n\n        // save current cursor settings\n        this.terminal.cursorSave();\n\n        // hide the cursor ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(false);\n        }\n\n        // disable line wrapping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(false);\n        }\n\n        // initialize bar\n        super.start(total, startValue, payload);\n\n        // redraw on start!\n        this.render();\n    }\n\n    // stop the bar\n    stop(){\n        // timer inactive ?\n        if (!this.timer) {\n            return;\n        }\n\n        // trigger final rendering\n        this.render();\n\n        // restore state\n        super.stop();\n\n        // stop timer\n        clearTimeout(this.timer);\n        this.timer = null;\n\n        // cursor hidden ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(true);\n        }\n\n        // re-enable line wrapping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(true);\n        }\n\n        // restore cursor on complete (position + settings)\n        this.terminal.cursorRestore();\n\n        // clear line on complete ?\n        if (this.options.clearOnComplete){\n            this.terminal.cursorTo(0, null);\n            this.terminal.clearLine();\n        }else{\n            // new line on complete\n            this.terminal.newline();\n        }\n    }\n}"]},"metadata":{},"sourceType":"script"}