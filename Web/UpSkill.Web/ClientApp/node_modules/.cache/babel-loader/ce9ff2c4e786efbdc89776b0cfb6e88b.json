{"ast":null,"code":"import axios from \"axios\";\nimport TokenService from \"./tokenService\";\nimport { Base_URL } from \"../utils/baseUrlConstant\";\nimport { logout } from \"../actions/auth\";\nimport { refreshToken } from \"../actions/auth\";\nconst instance = axios.create({\n  baseURL: Base_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport const setup = store => {\n  instance.interceptors.request.use(config => {\n    const token = TokenService.getLocalAccessToken();\n\n    if (token) {\n      config.headers[\"www-authenticate\"] = 'Bearer ' + token;\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  const {\n    dispatch\n  } = store;\n  instance.interceptors.response.use(res => {\n    return res;\n  }, async err => {\n    if (originalConfig.url !== \"Identity/Login\" && err.response) {\n      // Access Token was expired\n      if (err.response.status === 401 && !originalConfig._retry) {\n        originalConfig._retry = true;\n\n        try {\n          const rs = await instance.post(\"Identity/refreshToken\", {\n            refreshToken: TokenService.getLocalRefreshToken()\n          });\n          const {\n            accessToken\n          } = rs.data;\n          dispatch(refreshToken(accessToken));\n          TokenService.updateLocalAccessToken(accessToken);\n          return instance(originalConfig);\n        } catch (_error) {\n          return Promise.reject(_error);\n        }\n      }\n\n      return Promise.reject(err);\n    }\n  });\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/services/instance.js"],"names":["axios","TokenService","Base_URL","logout","refreshToken","instance","create","baseURL","headers","setup","store","interceptors","request","use","config","token","getLocalAccessToken","error","Promise","reject","dispatch","response","res","err","originalConfig","url","status","_retry","rs","post","getLocalRefreshToken","accessToken","data","updateLocalAccessToken","_error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,MAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEL,QADmB;AAE5BM,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFmB,CAAb,CAAjB;AAQA,OAAO,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAC9BL,EAAAA,QAAQ,CAACM,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACGC,MAAD,IAAY;AACV,UAAMC,KAAK,GAAGd,YAAY,CAACe,mBAAb,EAAd;;AACA,QAAID,KAAJ,EAAW;AAETD,MAAAA,MAAM,CAACN,OAAP,CAAe,kBAAf,IAAqC,YAAYO,KAAjD;AACK;;AACP,WAAOD,MAAP;AACD,GARH,EASGG,KAAD,IAAW;AACT,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAXH;AAaA,QAAM;AAAEG,IAAAA;AAAF,MAAeV,KAArB;AACFL,EAAAA,QAAQ,CAACM,YAAT,CAAsBU,QAAtB,CAA+BR,GAA/B,CACGS,GAAD,IAAS;AACP,WAAOA,GAAP;AACD,GAHH,EAIE,MAAOC,GAAP,IAAe;AAGb,QAAIC,cAAc,CAACC,GAAf,KAAuB,gBAAvB,IAA2CF,GAAG,CAACF,QAAnD,EAA6D;AAC3D;AACA,UAAIE,GAAG,CAACF,QAAJ,CAAaK,MAAb,KAAwB,GAAxB,IAA+B,CAACF,cAAc,CAACG,MAAnD,EAA2D;AACzDH,QAAAA,cAAc,CAACG,MAAf,GAAwB,IAAxB;;AAEA,YAAI;AACF,gBAAMC,EAAE,GAAG,MAAMvB,QAAQ,CAACwB,IAAT,CAAc,uBAAd,EAAuC;AACtDzB,YAAAA,YAAY,EAAEH,YAAY,CAAC6B,oBAAb;AADwC,WAAvC,CAAjB;AAIA,gBAAM;AAAEC,YAAAA;AAAF,cAAkBH,EAAE,CAACI,IAA3B;AACAZ,UAAAA,QAAQ,CAAChB,YAAY,CAAC2B,WAAD,CAAb,CAAR;AACA9B,UAAAA,YAAY,CAACgC,sBAAb,CAAoCF,WAApC;AAEA,iBAAO1B,QAAQ,CAACmB,cAAD,CAAf;AACD,SAVD,CAUE,OAAOU,MAAP,EAAe;AACf,iBAAOhB,OAAO,CAACC,MAAR,CAAee,MAAf,CAAP;AACD;AACF;;AAEH,aAAOhB,OAAO,CAACC,MAAR,CAAeI,GAAf,CAAP;AACD;AACF,GA7BD;AA8BC,CA7CM","sourcesContent":["import axios from \"axios\";\r\nimport TokenService from \"./tokenService\";\r\n\r\nimport { Base_URL } from \"../utils/baseUrlConstant\";\r\nimport { logout } from \"../actions/auth\";\r\nimport { refreshToken } from \"../actions/auth\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: Base_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n\r\nexport const setup = (store) => {\r\n  instance.interceptors.request.use(\r\n    (config) => {\r\n      const token = TokenService.getLocalAccessToken();\r\n      if (token) {\r\n        \r\n        config.headers[\"www-authenticate\"] = 'Bearer ' + token; \r\n            }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  const { dispatch } = store;\r\ninstance.interceptors.response.use(\r\n  (res) => {\r\n    return res;\r\n  },\r\n  async (err) => {\r\n\r\n\r\n    if (originalConfig.url !== \"Identity/Login\" && err.response) {\r\n      // Access Token was expired\r\n      if (err.response.status === 401 && !originalConfig._retry) {\r\n        originalConfig._retry = true;\r\n\r\n        try {\r\n          const rs = await instance.post(\"Identity/refreshToken\", {\r\n            refreshToken: TokenService.getLocalRefreshToken(),\r\n          });\r\n\r\n          const { accessToken } = rs.data;\r\n          dispatch(refreshToken(accessToken));\r\n          TokenService.updateLocalAccessToken(accessToken);\r\n\r\n          return instance(originalConfig);\r\n        } catch (_error) {\r\n          return Promise.reject(_error);\r\n        }\r\n      }\r\n\r\n    return Promise.reject(err);\r\n  }\r\n})\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}