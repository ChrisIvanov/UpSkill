{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError } from \"./Errors\";\nimport { FetchHttpClient } from \"./FetchHttpClient\";\nimport { HttpClient } from \"./HttpClient\";\nimport { Platform } from \"./Utils\";\nimport { XhrHttpClient } from \"./XhrHttpClient\";\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\n\nexport class DefaultHttpClient extends HttpClient {\n  /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\n  constructor(logger) {\n    super();\n\n    if (typeof fetch !== \"undefined\" || Platform.isNode) {\n      this._httpClient = new FetchHttpClient(logger);\n    } else if (typeof XMLHttpRequest !== \"undefined\") {\n      this._httpClient = new XhrHttpClient(logger);\n    } else {\n      throw new Error(\"No usable HttpClient found.\");\n    }\n  }\n  /** @inheritDoc */\n\n\n  send(request) {\n    // Check that abort was not signaled before calling send\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n\n    return this._httpClient.send(request);\n  }\n\n  getCookieString(url) {\n    return this._httpClient.getCookieString(url);\n  }\n\n}","map":{"version":3,"sources":["../../src/DefaultHttpClient.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,UAAT,QAA2B,UAA3B;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,UAAT,QAAsD,cAAtD;AAEA,SAAS,QAAT,QAAyB,SAAzB;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAEA;;AACA,OAAM,MAAO,iBAAP,SAAiC,UAAjC,CAA2C;AAG7C;AACA,EAAA,WAAA,CAAmB,MAAnB,EAAkC;AAC9B;;AAEA,QAAI,OAAO,KAAP,KAAiB,WAAjB,IAAgC,QAAQ,CAAC,MAA7C,EAAqD;AACjD,WAAK,WAAL,GAAmB,IAAI,eAAJ,CAAoB,MAApB,CAAnB;AACH,KAFD,MAEO,IAAI,OAAO,cAAP,KAA0B,WAA9B,EAA2C;AAC9C,WAAK,WAAL,GAAmB,IAAI,aAAJ,CAAkB,MAAlB,CAAnB;AACH,KAFM,MAEA;AACH,YAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACH;AACJ;AAED;;;AACO,EAAA,IAAI,CAAC,OAAD,EAAqB;AAC5B;AACA,QAAI,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,WAAR,CAAoB,OAA/C,EAAwD;AACpD,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,UAAJ,EAAf,CAAP;AACH;;AAED,QAAI,CAAC,OAAO,CAAC,MAAb,EAAqB;AACjB,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,oBAAV,CAAf,CAAP;AACH;;AACD,QAAI,CAAC,OAAO,CAAC,GAAb,EAAkB;AACd,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,iBAAV,CAAf,CAAP;AACH;;AAED,WAAO,KAAK,WAAL,CAAiB,IAAjB,CAAsB,OAAtB,CAAP;AACH;;AAEM,EAAA,eAAe,CAAC,GAAD,EAAY;AAC9B,WAAO,KAAK,WAAL,CAAiB,eAAjB,CAAiC,GAAjC,CAAP;AACH;;AAnC4C","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}