{"ast":null,"code":"import axios from \"axios\";\nimport { Base_URL } from \"../utils/baseUrlConstant\";\nconst token = localStorage.getItem(\"token\");\nconst categoriesMock = [\"Art\", \"Design\", \"Marketing\", \"Leadership\", \"Data Science\", \"Personal Development\", \"Computer Science\"];\nconst categoriesMockForCourse = [{\n  label: \"Art\",\n  value: \"1\"\n}, {\n  label: \"Design\",\n  value: \"2\"\n}, {\n  label: \"Marketing\",\n  value: \"3\"\n}, {\n  label: \"Leadership\",\n  value: \"4\"\n}, {\n  label: \"Data Science\",\n  value: \"5\"\n}, {\n  label: \"Personal Development\",\n  value: \"6\"\n}, {\n  label: \"Computer Science\",\n  value: \"7\"\n}];\nexport const getCategories = async () => {\n  //      let res = await request(``, 'Get');\n  return categoriesMock;\n};\nexport const getCategoriesForCourses = async () => {\n  try {\n    const resp = await axios.get(Base_URL + \"Admin/Categories/getAll\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    let transformedResp = resp.data.map(c => {\n      return {\n        label: c.name,\n        value: c.id\n      };\n    });\n    return transformedResp;\n  } catch (error) {}\n};","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/services/categoryService.js"],"names":["axios","Base_URL","token","localStorage","getItem","categoriesMock","categoriesMockForCourse","label","value","getCategories","getCategoriesForCourses","resp","get","headers","Authorization","transformedResp","data","map","c","name","id","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AAEA,MAAMC,cAAc,GAAG,CACrB,KADqB,EAErB,QAFqB,EAGrB,WAHqB,EAIrB,YAJqB,EAKrB,cALqB,EAMrB,sBANqB,EAOrB,kBAPqB,CAAvB;AAUA,MAAMC,uBAAuB,GAAG,CAC9B;AAAEC,EAAAA,KAAK,EAAE,KAAT;AAAgBC,EAAAA,KAAK,EAAE;AAAvB,CAD8B,EAE9B;AAAED,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAF8B,EAG9B;AAAED,EAAAA,KAAK,EAAE,WAAT;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAH8B,EAI9B;AAAED,EAAAA,KAAK,EAAE,YAAT;AAAuBC,EAAAA,KAAK,EAAE;AAA9B,CAJ8B,EAK9B;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,KAAK,EAAE;AAAhC,CAL8B,EAM9B;AAAED,EAAAA,KAAK,EAAE,sBAAT;AAAiCC,EAAAA,KAAK,EAAE;AAAxC,CAN8B,EAO9B;AAAED,EAAAA,KAAK,EAAE,kBAAT;AAA6BC,EAAAA,KAAK,EAAE;AAApC,CAP8B,CAAhC;AAUA,OAAO,MAAMC,aAAa,GAAG,YAAY;AACvC;AAEA,SAAOJ,cAAP;AACD,CAJM;AAMP,OAAO,MAAMK,uBAAuB,GAAG,YAAY;AACjD,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUX,QAAQ,GAAG,yBAArB,EAAgD;AACjEY,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASZ,KAAM;AAAjC;AADwD,KAAhD,CAAnB;AAIA,QAAIa,eAAe,GAAGJ,IAAI,CAACK,IAAL,CAAUC,GAAV,CAAeC,CAAD,IAAO;AACzC,aAAO;AACLX,QAAAA,KAAK,EAAEW,CAAC,CAACC,IADJ;AAELX,QAAAA,KAAK,EAAEU,CAAC,CAACE;AAFJ,OAAP;AAID,KALqB,CAAtB;AAOA,WAAOL,eAAP;AACD,GAbD,CAaE,OAAOM,KAAP,EAAc,CAAE;AACnB,CAfM","sourcesContent":["import axios from \"axios\";\r\nimport { Base_URL } from \"../utils/baseUrlConstant\";\r\n\r\nconst token = localStorage.getItem(\"token\");\r\n\r\nconst categoriesMock = [\r\n  \"Art\",\r\n  \"Design\",\r\n  \"Marketing\",\r\n  \"Leadership\",\r\n  \"Data Science\",\r\n  \"Personal Development\",\r\n  \"Computer Science\",\r\n];\r\n\r\nconst categoriesMockForCourse = [\r\n  { label: \"Art\", value: \"1\" },\r\n  { label: \"Design\", value: \"2\" },\r\n  { label: \"Marketing\", value: \"3\" },\r\n  { label: \"Leadership\", value: \"4\" },\r\n  { label: \"Data Science\", value: \"5\" },\r\n  { label: \"Personal Development\", value: \"6\" },\r\n  { label: \"Computer Science\", value: \"7\" },\r\n];\r\n\r\nexport const getCategories = async () => {\r\n  //      let res = await request(``, 'Get');\r\n\r\n  return categoriesMock;\r\n};\r\n\r\nexport const getCategoriesForCourses = async () => {\r\n  try {\r\n    const resp = await axios.get(Base_URL + \"Admin/Categories/getAll\", {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n\r\n    let transformedResp = resp.data.map((c) => {\r\n      return {\r\n        label: c.name,\r\n        value: c.id,\r\n      };\r\n    });\r\n\r\n    return transformedResp;\r\n  } catch (error) {}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}