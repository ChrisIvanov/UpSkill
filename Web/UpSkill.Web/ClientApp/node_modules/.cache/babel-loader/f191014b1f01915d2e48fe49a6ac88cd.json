{"ast":null,"code":"const _readline = require('readline'); // low-level terminal interactions\n\n\nclass Terminal {\n  constructor(outputStream) {\n    this.stream = outputStream; // default: line wrapping enabled\n\n    this.linewrap = true; // current, relative y position\n\n    this.dy = 0;\n  } // save cursor position + settings\n\n\n  cursorSave() {\n    if (!this.stream.isTTY) {\n      return;\n    } // save position\n\n\n    this.stream.write('\\x1B7');\n  } // restore last cursor position + settings\n\n\n  cursorRestore() {\n    if (!this.stream.isTTY) {\n      return;\n    } // restore cursor\n\n\n    this.stream.write('\\x1B8');\n  } // show/hide cursor\n\n\n  cursor(enabled) {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    if (enabled) {\n      this.stream.write('\\x1B[?25h');\n    } else {\n      this.stream.write('\\x1B[?25l');\n    }\n  } // change cursor positionn\n\n\n  cursorTo(x = null, y = null) {\n    if (!this.stream.isTTY) {\n      return;\n    } // move cursor absolute\n\n\n    _readline.cursorTo(this.stream, x, y);\n  } // change relative cursor position\n\n\n  cursorRelative(dx = null, dy = null) {\n    if (!this.stream.isTTY) {\n      return;\n    } // store current position\n\n\n    this.dy = this.dy + dy; // move cursor relative\n\n    _readline.moveCursor(this.stream, dx, dy);\n  } // relative reset\n\n\n  cursorRelativeReset() {\n    if (!this.stream.isTTY) {\n      return;\n    } // move cursor to initial line\n\n\n    _readline.moveCursor(this.stream, 0, -this.dy); // first char\n\n\n    _readline.cursorTo(this.stream, 0, null); // reset counter\n\n\n    this.dy = 0;\n  } // clear to the right from cursor\n\n\n  clearRight() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    _readline.clearLine(this.stream, 1);\n  } // clear the full line\n\n\n  clearLine() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    _readline.clearLine(this.stream, 0);\n  } // clear everyting beyond the current line\n\n\n  clearBottom() {\n    if (!this.stream.isTTY) {\n      return;\n    }\n\n    _readline.clearScreenDown(this.stream);\n  } // add new line; increment counter\n\n\n  newline() {\n    this.stream.write('\\n');\n    this.dy++;\n  } // write content to output stream\n  // @TODO use string-width to strip length\n\n\n  write(s) {\n    // line wrapping enabled ? trim output\n    if (this.linewrap === true) {\n      this.stream.write(s.substr(0, this.getWidth()));\n    } else {\n      this.stream.write(s);\n    }\n  } // control line wrapping\n\n\n  lineWrapping(enabled) {\n    if (!this.stream.isTTY) {\n      return;\n    } // store state\n\n\n    this.linewrap = enabled;\n\n    if (enabled) {\n      this.stream.write('\\x1B[?7h');\n    } else {\n      this.stream.write('\\x1B[?7l');\n    }\n  } // tty environment ?\n\n\n  isTTY() {\n    return this.stream.isTTY === true;\n  } // get terminal width\n\n\n  getWidth() {\n    // set max width to 80 in tty-mode and 200 in notty-mode\n    return this.stream.columns || (this.stream.isTTY ? 80 : 200);\n  }\n\n}\n\nmodule.exports = Terminal;","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/cli-progress/lib/terminal.js"],"names":["_readline","require","Terminal","constructor","outputStream","stream","linewrap","dy","cursorSave","isTTY","write","cursorRestore","cursor","enabled","cursorTo","x","y","cursorRelative","dx","moveCursor","cursorRelativeReset","clearRight","clearLine","clearBottom","clearScreenDown","newline","s","substr","getWidth","lineWrapping","columns","module","exports"],"mappings":"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","sourcesContent":["const _readline = require('readline');\n\n// low-level terminal interactions\nclass Terminal{\n\n    constructor(outputStream){\n        this.stream = outputStream;\n\n        // default: line wrapping enabled\n        this.linewrap = true;\n\n        // current, relative y position\n        this.dy = 0;\n    }\n\n    // save cursor position + settings\n    cursorSave(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // save position\n        this.stream.write('\\x1B7');\n    }\n\n    // restore last cursor position + settings\n    cursorRestore(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // restore cursor\n        this.stream.write('\\x1B8');\n    }\n\n    // show/hide cursor\n    cursor(enabled){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        if (enabled){\n            this.stream.write('\\x1B[?25h');\n        }else{\n            this.stream.write('\\x1B[?25l');\n        }\n    }\n\n    // change cursor positionn\n    cursorTo(x=null, y=null){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // move cursor absolute\n        _readline.cursorTo(this.stream, x, y);\n    }\n\n    // change relative cursor position\n    cursorRelative(dx=null, dy=null){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // store current position\n        this.dy = this.dy + dy;\n        \n        // move cursor relative\n        _readline.moveCursor(this.stream, dx, dy);\n    }\n\n    // relative reset\n    cursorRelativeReset(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // move cursor to initial line\n        _readline.moveCursor(this.stream, 0, -this.dy);\n\n        // first char\n        _readline.cursorTo(this.stream, 0, null);\n\n        // reset counter\n        this.dy = 0;\n    }\n\n    // clear to the right from cursor\n    clearRight(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearLine(this.stream, 1);\n    }\n\n    // clear the full line\n    clearLine(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearLine(this.stream, 0);\n    }\n\n    // clear everyting beyond the current line\n    clearBottom(){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        _readline.clearScreenDown(this.stream);\n    }\n\n    // add new line; increment counter\n    newline(){\n        this.stream.write('\\n');\n        this.dy++;\n    }\n\n    // write content to output stream\n    // @TODO use string-width to strip length\n    write(s){\n        // line wrapping enabled ? trim output\n        if (this.linewrap === true){\n            this.stream.write(s.substr(0, this.getWidth()));\n        }else{\n            this.stream.write(s);\n        }\n    }\n\n    // control line wrapping\n    lineWrapping(enabled){\n        if (!this.stream.isTTY){\n            return;\n        }\n\n        // store state\n        this.linewrap = enabled;\n        if (enabled){\n            this.stream.write('\\x1B[?7h');\n        }else{\n            this.stream.write('\\x1B[?7l');\n        }\n    }\n\n    // tty environment ?\n    isTTY(){\n        return (this.stream.isTTY === true);\n    }\n\n    // get terminal width\n    getWidth(){\n        // set max width to 80 in tty-mode and 200 in notty-mode\n        return this.stream.columns || (this.stream.isTTY ? 80 : 200);\n    }\n}\n\nmodule.exports = Terminal;\n"]},"metadata":{},"sourceType":"script"}