{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst treeify = require('object-treeify');\n\nclass Tree {\n  constructor() {\n    this.nodes = {};\n  }\n\n  insert(child, value = new Tree()) {\n    this.nodes[child] = value;\n    return this;\n  }\n\n  search(key) {\n    for (const child of Object.keys(this.nodes)) {\n      if (child === key) {\n        return this.nodes[child];\n      }\n\n      const c = this.nodes[child].search(key);\n      if (c) return c;\n    }\n  } // tslint:disable-next-line:no-console\n\n\n  display(logger = console.log) {\n    const addNodes = function (nodes) {\n      const tree = {};\n\n      for (const p of Object.keys(nodes)) {\n        tree[p] = addNodes(nodes[p].nodes);\n      }\n\n      return tree;\n    };\n\n    const tree = addNodes(this.nodes);\n    logger(treeify(tree));\n  }\n\n}\n\nexports.Tree = Tree;\n\nfunction tree() {\n  return new Tree();\n}\n\nexports.default = tree;","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/node_modules/cli-ux/lib/styled/tree.js"],"names":["Object","defineProperty","exports","value","treeify","require","Tree","constructor","nodes","insert","child","search","key","keys","c","display","logger","console","log","addNodes","tree","p","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,EAAb;AACH;;AACDC,EAAAA,MAAM,CAACC,KAAD,EAAQP,KAAK,GAAG,IAAIG,IAAJ,EAAhB,EAA4B;AAC9B,SAAKE,KAAL,CAAWE,KAAX,IAAoBP,KAApB;AACA,WAAO,IAAP;AACH;;AACDQ,EAAAA,MAAM,CAACC,GAAD,EAAM;AACR,SAAK,MAAMF,KAAX,IAAoBV,MAAM,CAACa,IAAP,CAAY,KAAKL,KAAjB,CAApB,EAA6C;AACzC,UAAIE,KAAK,KAAKE,GAAd,EAAmB;AACf,eAAO,KAAKJ,KAAL,CAAWE,KAAX,CAAP;AACH;;AACD,YAAMI,CAAC,GAAG,KAAKN,KAAL,CAAWE,KAAX,EAAkBC,MAAlB,CAAyBC,GAAzB,CAAV;AACA,UAAIE,CAAJ,EACI,OAAOA,CAAP;AACP;AACJ,GAjBM,CAkBP;;;AACAC,EAAAA,OAAO,CAACC,MAAM,GAAGC,OAAO,CAACC,GAAlB,EAAuB;AAC1B,UAAMC,QAAQ,GAAG,UAAUX,KAAV,EAAiB;AAC9B,YAAMY,IAAI,GAAG,EAAb;;AACA,WAAK,MAAMC,CAAX,IAAgBrB,MAAM,CAACa,IAAP,CAAYL,KAAZ,CAAhB,EAAoC;AAChCY,QAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUF,QAAQ,CAACX,KAAK,CAACa,CAAD,CAAL,CAASb,KAAV,CAAlB;AACH;;AACD,aAAOY,IAAP;AACH,KAND;;AAOA,UAAMA,IAAI,GAAGD,QAAQ,CAAC,KAAKX,KAAN,CAArB;AACAQ,IAAAA,MAAM,CAACZ,OAAO,CAACgB,IAAD,CAAR,CAAN;AACH;;AA7BM;;AA+BXlB,OAAO,CAACI,IAAR,GAAeA,IAAf;;AACA,SAASc,IAAT,GAAgB;AACZ,SAAO,IAAId,IAAJ,EAAP;AACH;;AACDJ,OAAO,CAACoB,OAAR,GAAkBF,IAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst treeify = require('object-treeify');\nclass Tree {\n    constructor() {\n        this.nodes = {};\n    }\n    insert(child, value = new Tree()) {\n        this.nodes[child] = value;\n        return this;\n    }\n    search(key) {\n        for (const child of Object.keys(this.nodes)) {\n            if (child === key) {\n                return this.nodes[child];\n            }\n            const c = this.nodes[child].search(key);\n            if (c)\n                return c;\n        }\n    }\n    // tslint:disable-next-line:no-console\n    display(logger = console.log) {\n        const addNodes = function (nodes) {\n            const tree = {};\n            for (const p of Object.keys(nodes)) {\n                tree[p] = addNodes(nodes[p].nodes);\n            }\n            return tree;\n        };\n        const tree = addNodes(this.nodes);\n        logger(treeify(tree));\n    }\n}\nexports.Tree = Tree;\nfunction tree() {\n    return new Tree();\n}\nexports.default = tree;\n"]},"metadata":{},"sourceType":"script"}