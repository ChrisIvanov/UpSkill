{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executableDirectivesInAllServices = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst executableDirectivesInAllServices = ({\n  schema,\n  serviceList\n}) => {\n  const errors = [];\n  const customExecutableDirectives = schema.getDirectives().filter(x => !utils_1.isApolloTypeSystemDirective(x) && !graphql_1.isSpecifiedDirective(x));\n  customExecutableDirectives.forEach(directive => {\n    var _a;\n\n    const directiveFederationMetadata = utils_1.getFederationMetadata(directive);\n    if (!directiveFederationMetadata) return;\n    const allServiceNames = serviceList.map(({\n      name\n    }) => name);\n    const serviceNamesWithDirective = Object.keys(directiveFederationMetadata.directiveDefinitions);\n    const serviceNamesWithoutDirective = allServiceNames.reduce((without, serviceName) => {\n      if (!serviceNamesWithDirective.includes(serviceName)) {\n        without.push(serviceName);\n      }\n\n      return without;\n    }, []);\n\n    if (serviceNamesWithoutDirective.length > 0) {\n      errors.push(utils_1.errorWithCode('EXECUTABLE_DIRECTIVES_IN_ALL_SERVICES', utils_1.logDirective(directive.name) + `Custom directives must be implemented in every service. The following services do not implement the @${directive.name} directive: ${serviceNamesWithoutDirective.join(', ')}.`, (_a = directive.astNode) !== null && _a !== void 0 ? _a : undefined));\n    }\n  });\n  return errors;\n};\n\nexports.executableDirectivesInAllServices = executableDirectivesInAllServices;","map":{"version":3,"sources":["../../../../src/composition/validate/postComposition/executableDirectivesInAllServices.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAaO,MAAM,iCAAiC,GAA6B,CAAC;AAC1E,EAAA,MAD0E;AAE1E,EAAA;AAF0E,CAAD,KAGtE;AACH,QAAM,MAAM,GAAmB,EAA/B;AAEA,QAAM,0BAA0B,GAAG,MAAM,CACtC,aADgC,GAEhC,MAFgC,CAEzB,CAAC,IAAI,CAAC,OAAA,CAAA,2BAAA,CAA4B,CAA5B,CAAD,IAAmC,CAAC,SAAA,CAAA,oBAAA,CAAqB,CAArB,CAFhB,CAAnC;AAIA,EAAA,0BAA0B,CAAC,OAA3B,CAAmC,SAAS,IAAG;;;AAC7C,UAAM,2BAA2B,GAAG,OAAA,CAAA,qBAAA,CAAsB,SAAtB,CAApC;AAEA,QAAI,CAAC,2BAAL,EAAkC;AAElC,UAAM,eAAe,GAAG,WAAW,CAAC,GAAZ,CAAgB,CAAC;AAAE,MAAA;AAAF,KAAD,KAAc,IAA9B,CAAxB;AACA,UAAM,yBAAyB,GAAG,MAAM,CAAC,IAAP,CAChC,2BAA2B,CAAC,oBADI,CAAlC;AAIA,UAAM,4BAA4B,GAAG,eAAe,CAAC,MAAhB,CACnC,CAAC,OAAD,EAAU,WAAV,KAAyB;AACvB,UAAI,CAAC,yBAAyB,CAAC,QAA1B,CAAmC,WAAnC,CAAL,EAAsD;AACpD,QAAA,OAAO,CAAC,IAAR,CAAa,WAAb;AACD;;AACD,aAAO,OAAP;AACD,KANkC,EAOnC,EAPmC,CAArC;;AAUA,QAAI,4BAA4B,CAAC,MAA7B,GAAsC,CAA1C,EAA6C;AAC3C,MAAA,MAAM,CAAC,IAAP,CACE,OAAA,CAAA,aAAA,CACE,uCADF,EAEE,OAAA,CAAA,YAAA,CAAa,SAAS,CAAC,IAAvB,IACE,wGACE,SAAS,CAAC,IACZ,eAAe,4BAA4B,CAAC,IAA7B,CAAkC,IAAlC,CAAuC,GAL1D,EAQE,CAAA,EAAA,GAAA,SAAS,CAAC,OAAV,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,EAAjB,GAAqB,SARvB,CADF;AAYD;AACF,GAlCD;AAoCA,SAAO,MAAP;AACD,CA/CM;;AAAM,OAAA,CAAA,iCAAA,GAAiC,iCAAjC","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.executableDirectivesInAllServices = void 0;\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"../../utils\");\nconst executableDirectivesInAllServices = ({ schema, serviceList, }) => {\n    const errors = [];\n    const customExecutableDirectives = schema\n        .getDirectives()\n        .filter(x => !utils_1.isApolloTypeSystemDirective(x) && !graphql_1.isSpecifiedDirective(x));\n    customExecutableDirectives.forEach(directive => {\n        var _a;\n        const directiveFederationMetadata = utils_1.getFederationMetadata(directive);\n        if (!directiveFederationMetadata)\n            return;\n        const allServiceNames = serviceList.map(({ name }) => name);\n        const serviceNamesWithDirective = Object.keys(directiveFederationMetadata.directiveDefinitions);\n        const serviceNamesWithoutDirective = allServiceNames.reduce((without, serviceName) => {\n            if (!serviceNamesWithDirective.includes(serviceName)) {\n                without.push(serviceName);\n            }\n            return without;\n        }, []);\n        if (serviceNamesWithoutDirective.length > 0) {\n            errors.push(utils_1.errorWithCode('EXECUTABLE_DIRECTIVES_IN_ALL_SERVICES', utils_1.logDirective(directive.name) +\n                `Custom directives must be implemented in every service. The following services do not implement the @${directive.name} directive: ${serviceNamesWithoutDirective.join(', ')}.`, (_a = directive.astNode) !== null && _a !== void 0 ? _a : undefined));\n        }\n    });\n    return errors;\n};\nexports.executableDirectivesInAllServices = executableDirectivesInAllServices;\n//# sourceMappingURL=executableDirectivesInAllServices.js.map"]},"metadata":{},"sourceType":"script"}