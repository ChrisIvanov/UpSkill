{"ast":null,"code":"import axios from \"axios\";\nimport TokenService from \"./tokenService\";\nimport { Base_URL } from \"../utils/baseUrlConstant\";\nconst instance = axios.create({\n  baseURL: Base_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\ninstance.interceptors.request.use(config => {\n  const token = TokenService.getLocalAccessToken();\n\n  if (token) {\n    config.headers[\"www-authenticate\"] = token;\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(res => {\n  return res;\n}, async err => {\n  const originalConfig = err.config;\n\n  if (originalConfig.url !== \"/Identity/login\" && err.response) {\n    // Access Token was expired\n    if (err.response.status === 401 && !originalConfig._retry) {\n      originalConfig._retry = true;\n\n      try {\n        const rs = await instance.post(\"/Identity/refreshToken\", {\n          refreshToken: TokenService.getLocalRefreshToken()\n        });\n        const {\n          accessToken\n        } = rs.data;\n        TokenService.updateLocalAccessToken(accessToken);\n        return instance(originalConfig);\n      } catch (_error) {\n        return Promise.reject(_error);\n      }\n    }\n  }\n\n  return Promise.reject(err);\n});\nexport default instance;","map":{"version":3,"sources":["H:/Programming Repositories/Titans/Web/UpSkill.Web/ClientApp/src/services/instance.js"],"names":["axios","TokenService","Base_URL","instance","create","baseURL","headers","interceptors","request","use","config","token","getLocalAccessToken","error","Promise","reject","response","res","err","originalConfig","url","status","_retry","rs","post","refreshToken","getLocalRefreshToken","accessToken","data","updateLocalAccessToken","_error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEH,QADmB;AAE5BI,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFmB,CAAb,CAAjB;AAOAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACGC,MAAD,IAAY;AACV,QAAMC,KAAK,GAAGV,YAAY,CAACW,mBAAb,EAAd;;AACA,MAAID,KAAJ,EAAW;AACTD,IAAAA,MAAM,CAACJ,OAAP,CAAe,kBAAf,IAAqCK,KAArC;AACD;;AACD,SAAOD,MAAP;AACD,CAPH,EAQGG,KAAD,IAAW;AACT,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAVH;AAaAV,QAAQ,CAACI,YAAT,CAAsBS,QAAtB,CAA+BP,GAA/B,CACGQ,GAAD,IAAS;AACP,SAAOA,GAAP;AACD,CAHH,EAIE,MAAOC,GAAP,IAAe;AACb,QAAMC,cAAc,GAAGD,GAAG,CAACR,MAA3B;;AAEA,MAAIS,cAAc,CAACC,GAAf,KAAuB,iBAAvB,IAA4CF,GAAG,CAACF,QAApD,EAA8D;AAC5D;AACA,QAAIE,GAAG,CAACF,QAAJ,CAAaK,MAAb,KAAwB,GAAxB,IAA+B,CAACF,cAAc,CAACG,MAAnD,EAA2D;AACzDH,MAAAA,cAAc,CAACG,MAAf,GAAwB,IAAxB;;AAEA,UAAI;AACF,cAAMC,EAAE,GAAG,MAAMpB,QAAQ,CAACqB,IAAT,CAAc,wBAAd,EAAwC;AACvDC,UAAAA,YAAY,EAAExB,YAAY,CAACyB,oBAAb;AADyC,SAAxC,CAAjB;AAIA,cAAM;AAAEC,UAAAA;AAAF,YAAkBJ,EAAE,CAACK,IAA3B;AACA3B,QAAAA,YAAY,CAAC4B,sBAAb,CAAoCF,WAApC;AAEA,eAAOxB,QAAQ,CAACgB,cAAD,CAAf;AACD,OATD,CASE,OAAOW,MAAP,EAAe;AACf,eAAOhB,OAAO,CAACC,MAAR,CAAee,MAAf,CAAP;AACD;AACF;AACF;;AAED,SAAOhB,OAAO,CAACC,MAAR,CAAeG,GAAf,CAAP;AACD,CA5BH;AA+BA,eAAef,QAAf","sourcesContent":["import axios from \"axios\";\r\nimport TokenService from \"./tokenService\";\r\nimport { Base_URL } from \"../utils/baseUrlConstant\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: Base_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = TokenService.getLocalAccessToken();\r\n    if (token) {\r\n      config.headers[\"www-authenticate\"] = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\ninstance.interceptors.response.use(\r\n  (res) => {\r\n    return res;\r\n  },\r\n  async (err) => {\r\n    const originalConfig = err.config;\r\n\r\n    if (originalConfig.url !== \"/Identity/login\" && err.response) {\r\n      // Access Token was expired\r\n      if (err.response.status === 401 && !originalConfig._retry) {\r\n        originalConfig._retry = true;\r\n\r\n        try {\r\n          const rs = await instance.post(\"/Identity/refreshToken\", {\r\n            refreshToken: TokenService.getLocalRefreshToken(),\r\n          });\r\n\r\n          const { accessToken } = rs.data;\r\n          TokenService.updateLocalAccessToken(accessToken);\r\n\r\n          return instance(originalConfig);\r\n        } catch (_error) {\r\n          return Promise.reject(_error);\r\n        }\r\n      }\r\n    }\r\n\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\nexport default instance;"]},"metadata":{},"sourceType":"module"}